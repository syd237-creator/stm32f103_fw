
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008080  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800818c  0800818c  0001818c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800820c  0800820c  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800820c  0800820c  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800820c  0800820c  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800820c  0800820c  0001820c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008210  08008210  00018210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08008214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001018  20000190  080083a4  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011a8  080083a4  000211a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f395  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a7  00000000  00000000  0002f54e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00032cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  00033b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c254  00000000  00000000  00034760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001892e  00000000  00000000  000509b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000874da  00000000  00000000  000692e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f07bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003514  00000000  00000000  000f080c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000190 	.word	0x20000190
 8000128:	00000000 	.word	0x00000000
 800012c:	08008174 	.word	0x08008174

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000194 	.word	0x20000194
 8000148:	08008174 	.word	0x08008174

0800014c <apInit>:
#include "ap.h"



void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 57600);
 8000150:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fa7d 	bl	8000654 <uartOpen>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}

0800015e <apMain>:

void apMain(void)
{
 800015e:	b580      	push	{r7, lr}
 8000160:	b082      	sub	sp, #8
 8000162:	af00      	add	r7, sp, #0

  uint32_t pre_time;

  while(1)
  {
    if (miliis() - pre_time >= 500)
 8000164:	f000 f83f 	bl	80001e6 <miliis>
 8000168:	4602      	mov	r2, r0
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	1ad3      	subs	r3, r2, r3
 800016e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000172:	d3f7      	bcc.n	8000164 <apMain+0x6>
    {
      pre_time = miliis();
 8000174:	f000 f837 	bl	80001e6 <miliis>
 8000178:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
 800017a:	2000      	movs	r0, #0
 800017c:	f000 f994 	bl	80004a8 <ledToggle>
    if (miliis() - pre_time >= 500)
 8000180:	e7f0      	b.n	8000164 <apMain+0x6>
	...

08000184 <bspInit>:


void SystemClock_Config(void);

void bspInit(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
  HAL_Init();
 800018a:	f000 fac5 	bl	8000718 <HAL_Init>

  SystemClock_Config();
 800018e:	f000 f831 	bl	80001f4 <SystemClock_Config>

  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000192:	4b0e      	ldr	r3, [pc, #56]	; (80001cc <bspInit+0x48>)
 8000194:	699b      	ldr	r3, [r3, #24]
 8000196:	4a0d      	ldr	r2, [pc, #52]	; (80001cc <bspInit+0x48>)
 8000198:	f043 0320 	orr.w	r3, r3, #32
 800019c:	6193      	str	r3, [r2, #24]
 800019e:	4b0b      	ldr	r3, [pc, #44]	; (80001cc <bspInit+0x48>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	f003 0320 	and.w	r3, r3, #32
 80001a6:	607b      	str	r3, [r7, #4]
 80001a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001aa:	4b08      	ldr	r3, [pc, #32]	; (80001cc <bspInit+0x48>)
 80001ac:	699b      	ldr	r3, [r3, #24]
 80001ae:	4a07      	ldr	r2, [pc, #28]	; (80001cc <bspInit+0x48>)
 80001b0:	f043 0304 	orr.w	r3, r3, #4
 80001b4:	6193      	str	r3, [r2, #24]
 80001b6:	4b05      	ldr	r3, [pc, #20]	; (80001cc <bspInit+0x48>)
 80001b8:	699b      	ldr	r3, [r3, #24]
 80001ba:	f003 0304 	and.w	r3, r3, #4
 80001be:	603b      	str	r3, [r7, #0]
 80001c0:	683b      	ldr	r3, [r7, #0]


}
 80001c2:	bf00      	nop
 80001c4:	3708      	adds	r7, #8
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40021000 	.word	0x40021000

080001d0 <delay>:

void delay(uint32_t ms)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80001d8:	6878      	ldr	r0, [r7, #4]
 80001da:	f000 faff 	bl	80007dc <HAL_Delay>
}
 80001de:	bf00      	nop
 80001e0:	3708      	adds	r7, #8
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}

080001e6 <miliis>:

uint32_t miliis(void)
{
 80001e6:	b580      	push	{r7, lr}
 80001e8:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80001ea:	f000 faed 	bl	80007c8 <HAL_GetTick>
 80001ee:	4603      	mov	r3, r0
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b094      	sub	sp, #80	; 0x50
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f007 ffae 	bl	8008164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	f107 0314 	add.w	r3, r7, #20
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	605a      	str	r2, [r3, #4]
 8000212:	609a      	str	r2, [r3, #8]
 8000214:	60da      	str	r2, [r3, #12]
 8000216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000224:	2305      	movs	r3, #5
 8000226:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800022c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000242:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000244:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000248:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fa7a 	bl	8002748 <HAL_RCC_OscConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800025a:	f000 f82a 	bl	80002b2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000262:	2302      	movs	r3, #2
 8000264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000274:	f107 0314 	add.w	r3, r7, #20
 8000278:	2102      	movs	r1, #2
 800027a:	4618      	mov	r0, r3
 800027c:	f002 fce6 	bl	8002c4c <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000286:	f000 f814 	bl	80002b2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 800028a:	2311      	movs	r3, #17
 800028c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800028e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000292:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000294:	2300      	movs	r3, #0
 8000296:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fe5a 	bl	8002f54 <HAL_RCCEx_PeriphCLKConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002a6:	f000 f804 	bl	80002b2 <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3750      	adds	r7, #80	; 0x50
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002b6:	b672      	cpsid	i
}
 80002b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ba:	e7fe      	b.n	80002ba <Error_Handler+0x8>

080002bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002c2:	4b15      	ldr	r3, [pc, #84]	; (8000318 <HAL_MspInit+0x5c>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	4a14      	ldr	r2, [pc, #80]	; (8000318 <HAL_MspInit+0x5c>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6193      	str	r3, [r2, #24]
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <HAL_MspInit+0x5c>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	60bb      	str	r3, [r7, #8]
 80002d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002da:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <HAL_MspInit+0x5c>)
 80002dc:	69db      	ldr	r3, [r3, #28]
 80002de:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <HAL_MspInit+0x5c>)
 80002e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e4:	61d3      	str	r3, [r2, #28]
 80002e6:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <HAL_MspInit+0x5c>)
 80002e8:	69db      	ldr	r3, [r3, #28]
 80002ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <HAL_MspInit+0x60>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	60fb      	str	r3, [r7, #12]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <HAL_MspInit+0x60>)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800030e:	bf00      	nop
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	40021000 	.word	0x40021000
 800031c:	40010000 	.word	0x40010000

08000320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000324:	e7fe      	b.n	8000324 <NMI_Handler+0x4>

08000326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800032a:	e7fe      	b.n	800032a <HardFault_Handler+0x4>

0800032c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000330:	e7fe      	b.n	8000330 <MemManage_Handler+0x4>

08000332 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000336:	e7fe      	b.n	8000336 <BusFault_Handler+0x4>

08000338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800033c:	e7fe      	b.n	800033c <UsageFault_Handler+0x4>

0800033e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr

0800034a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800034e:	bf00      	nop
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr

08000356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800035a:	bf00      	nop
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr

08000362 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000366:	f000 fa1d 	bl	80007a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000374:	4802      	ldr	r0, [pc, #8]	; (8000380 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000376:	f000 fe49 	bl	800100c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000c9c 	.word	0x20000c9c

08000384 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	; (80003c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	; (80003d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003b6:	f7ff ffe5 	bl	8000384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ba:	f007 feaf 	bl	800811c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003be:	f007 fea1 	bl	8008104 <main>
  bx lr
 80003c2:	4770      	bx	lr
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80003cc:	08008214 	.word	0x08008214
  ldr r2, =_sbss
 80003d0:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80003d4:	200011a8 	.word	0x200011a8

080003d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC1_2_IRQHandler>
	...

080003dc <ledInit>:
    {
        {GPIOB, GPIO_PIN_12, GPIO_PIN_RESET, GPIO_PIN_SET},
    };

bool ledInit(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
  bool ret = true;
 80003e2:	2301      	movs	r3, #1
 80003e4:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f4:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <ledInit+0x84>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a19      	ldr	r2, [pc, #100]	; (8000460 <ledInit+0x84>)
 80003fa:	f043 0308 	orr.w	r3, r3, #8
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b17      	ldr	r3, [pc, #92]	; (8000460 <ledInit+0x84>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0308 	and.w	r3, r3, #8
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB12 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000410:	2300      	movs	r3, #0
 8000412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000414:	2302      	movs	r3, #2
 8000416:	617b      	str	r3, [r7, #20]

  for ( int i = 0; i < LED_MAX_CH; i ++)
 8000418:	2300      	movs	r3, #0
 800041a:	61fb      	str	r3, [r7, #28]
 800041c:	e017      	b.n	800044e <ledInit+0x72>
  {
    GPIO_InitStruct.Pin =led_tbl[i].pin;
 800041e:	4a11      	ldr	r2, [pc, #68]	; (8000464 <ledInit+0x88>)
 8000420:	69fb      	ldr	r3, [r7, #28]
 8000422:	00db      	lsls	r3, r3, #3
 8000424:	4413      	add	r3, r2
 8000426:	889b      	ldrh	r3, [r3, #4]
 8000428:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800042a:	4a0e      	ldr	r2, [pc, #56]	; (8000464 <ledInit+0x88>)
 800042c:	69fb      	ldr	r3, [r7, #28]
 800042e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000432:	f107 0208 	add.w	r2, r7, #8
 8000436:	4611      	mov	r1, r2
 8000438:	4618      	mov	r0, r3
 800043a:	f000 fb01 	bl	8000a40 <HAL_GPIO_Init>
    ledOff(i);
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	4618      	mov	r0, r3
 8000444:	f000 f810 	bl	8000468 <ledOff>
  for ( int i = 0; i < LED_MAX_CH; i ++)
 8000448:	69fb      	ldr	r3, [r7, #28]
 800044a:	3301      	adds	r3, #1
 800044c:	61fb      	str	r3, [r7, #28]
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	2b00      	cmp	r3, #0
 8000452:	dde4      	ble.n	800041e <ledInit+0x42>
  }

  return ret;
 8000454:	7efb      	ldrb	r3, [r7, #27]
}
 8000456:	4618      	mov	r0, r3
 8000458:	3720      	adds	r7, #32
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000
 8000464:	20000004 	.word	0x20000004

08000468 <ledOff>:
  if ( ch >= LED_MAX_CH ) return;
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
  if ( ch >= LED_MAX_CH ) return;
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d111      	bne.n	800049c <ledOff+0x34>
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	4a0a      	ldr	r2, [pc, #40]	; (80004a4 <ledOff+0x3c>)
 800047c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	4a08      	ldr	r2, [pc, #32]	; (80004a4 <ledOff+0x3c>)
 8000484:	00db      	lsls	r3, r3, #3
 8000486:	4413      	add	r3, r2
 8000488:	8899      	ldrh	r1, [r3, #4]
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	4a05      	ldr	r2, [pc, #20]	; (80004a4 <ledOff+0x3c>)
 800048e:	00db      	lsls	r3, r3, #3
 8000490:	4413      	add	r3, r2
 8000492:	79db      	ldrb	r3, [r3, #7]
 8000494:	461a      	mov	r2, r3
 8000496:	f000 fc57 	bl	8000d48 <HAL_GPIO_WritePin>
 800049a:	e000      	b.n	800049e <ledOff+0x36>
  if ( ch >= LED_MAX_CH ) return;
 800049c:	bf00      	nop
}
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000004 	.word	0x20000004

080004a8 <ledToggle>:

void ledToggle(uint8_t ch)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
  if ( ch >= LED_MAX_CH ) return;
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d10d      	bne.n	80004d4 <ledToggle+0x2c>
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	4a08      	ldr	r2, [pc, #32]	; (80004dc <ledToggle+0x34>)
 80004bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	4906      	ldr	r1, [pc, #24]	; (80004dc <ledToggle+0x34>)
 80004c4:	00db      	lsls	r3, r3, #3
 80004c6:	440b      	add	r3, r1
 80004c8:	889b      	ldrh	r3, [r3, #4]
 80004ca:	4619      	mov	r1, r3
 80004cc:	4610      	mov	r0, r2
 80004ce:	f000 fc53 	bl	8000d78 <HAL_GPIO_TogglePin>
 80004d2:	e000      	b.n	80004d6 <ledToggle+0x2e>
  if ( ch >= LED_MAX_CH ) return;
 80004d4:	bf00      	nop
}
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000004 	.word	0x20000004

080004e0 <resetInit>:

static uint32_t reset_count = 0;


bool resetInit(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
  bool ret = true;
 80004e6:	2301      	movs	r3, #1
 80004e8:	71fb      	strb	r3, [r7, #7]

  // 만약 Reset 핀이 눌렸다면

  if( RCC->CSR & (1<<26))
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <resetInit+0x50>)
 80004ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d012      	beq.n	800051c <resetInit+0x3c>
  {
    rtcBackupRegWrite(1,rtcBackupRegRead(1) + 1);
 80004f6:	2001      	movs	r0, #1
 80004f8:	f000 f84e 	bl	8000598 <rtcBackupRegRead>
 80004fc:	4603      	mov	r3, r0
 80004fe:	3301      	adds	r3, #1
 8000500:	4619      	mov	r1, r3
 8000502:	2001      	movs	r0, #1
 8000504:	f000 f858 	bl	80005b8 <rtcBackupRegWrite>
    delay(500);
 8000508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050c:	f7ff fe60 	bl	80001d0 <delay>
    reset_count = rtcBackupRegRead(1);
 8000510:	2001      	movs	r0, #1
 8000512:	f000 f841 	bl	8000598 <rtcBackupRegRead>
 8000516:	4603      	mov	r3, r0
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <resetInit+0x54>)
 800051a:	6013      	str	r3, [r2, #0]
  }

  rtcBackupRegWrite(1,0);
 800051c:	2100      	movs	r1, #0
 800051e:	2001      	movs	r0, #1
 8000520:	f000 f84a 	bl	80005b8 <rtcBackupRegWrite>

  return ret;
 8000524:	79fb      	ldrb	r3, [r7, #7]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000
 8000534:	200001ac 	.word	0x200001ac

08000538 <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
  bool ret = true;
 800053e:	2301      	movs	r3, #1
 8000540:	71fb      	strb	r3, [r7, #7]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <rtcInit+0x54>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a11      	ldr	r2, [pc, #68]	; (800058c <rtcInit+0x54>)
 8000548:	f043 0310 	orr.w	r3, r3, #16
 800054c:	6193      	str	r3, [r2, #24]
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <rtcInit+0x54>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f003 0310 	and.w	r3, r3, #16
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]

  hrtc.Instance = RTC;
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <rtcInit+0x58>)
 800055c:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <rtcInit+0x5c>)
 800055e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <rtcInit+0x58>)
 8000562:	f04f 32ff 	mov.w	r2, #4294967295
 8000566:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <rtcInit+0x58>)
 800056a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800056e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000570:	4807      	ldr	r0, [pc, #28]	; (8000590 <rtcInit+0x58>)
 8000572:	f002 fe65 	bl	8003240 <HAL_RTC_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <rtcInit+0x48>
  {
    Error_Handler();
 800057c:	f7ff fe99 	bl	80002b2 <Error_Handler>
  }

  return ret;
 8000580:	79fb      	ldrb	r3, [r7, #7]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000
 8000590:	200001b0 	.word	0x200001b0
 8000594:	40002800 	.word	0x40002800

08000598 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 80005a0:	6879      	ldr	r1, [r7, #4]
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <rtcBackupRegRead+0x1c>)
 80005a4:	f002 ff7a 	bl	800349c <HAL_RTCEx_BKUPRead>
 80005a8:	4603      	mov	r3, r0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200001b0 	.word	0x200001b0

080005b8 <rtcBackupRegWrite>:


void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80005c2:	683a      	ldr	r2, [r7, #0]
 80005c4:	6879      	ldr	r1, [r7, #4]
 80005c6:	4803      	ldr	r0, [pc, #12]	; (80005d4 <rtcBackupRegWrite+0x1c>)
 80005c8:	f002 ff4e 	bl	8003468 <HAL_RTCEx_BKUPWrite>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200001b0 	.word	0x200001b0

080005d8 <HAL_RTC_MspInit>:



void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <HAL_RTC_MspInit+0x3c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d110      	bne.n	800060c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80005ea:	f002 f8a1 	bl	8002730 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_RTC_MspInit+0x40>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a09      	ldr	r2, [pc, #36]	; (8000618 <HAL_RTC_MspInit+0x40>)
 80005f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b07      	ldr	r3, [pc, #28]	; (8000618 <HAL_RTC_MspInit+0x40>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_RTC_MspInit+0x44>)
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40002800 	.word	0x40002800
 8000618:	40021000 	.word	0x40021000
 800061c:	4242043c 	.word	0x4242043c

08000620 <uartInit>:
#include "cdc.h"

static bool is_open[UART_MAX_CH];

bool uartInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
  for( int i = 0; i < UART_MAX_CH; i++)
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	e007      	b.n	800063c <uartInit+0x1c>
  {
    is_open[i] = false;
 800062c:	4a08      	ldr	r2, [pc, #32]	; (8000650 <uartInit+0x30>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
  for( int i = 0; i < UART_MAX_CH; i++)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3301      	adds	r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b00      	cmp	r3, #0
 8000640:	ddf4      	ble.n	800062c <uartInit+0xc>
  }

  return true;
 8000642:	2301      	movs	r3, #1
}
 8000644:	4618      	mov	r0, r3
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200001c4 	.word	0x200001c4

08000654 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8000660:	2300      	movs	r3, #0
 8000662:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d106      	bne.n	8000678 <uartOpen+0x24>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4a05      	ldr	r2, [pc, #20]	; (8000684 <uartOpen+0x30>)
 800066e:	2101      	movs	r1, #1
 8000670:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8000672:	2301      	movs	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
      break;
 8000676:	bf00      	nop
  }

  return ret;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	200001c4 	.word	0x200001c4

08000688 <usbInit>:

#include "usb.h"
#include "usb_device.h"

bool usbInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
  bool ret = true;
 800068e:	2301      	movs	r3, #1
 8000690:	75fb      	strb	r3, [r7, #23]


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80006a4:	2311      	movs	r3, #17
 80006a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	480f      	ldr	r0, [pc, #60]	; (80006f4 <usbInit+0x6c>)
 80006b6:	f000 f9c3 	bl	8000a40 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <usbInit+0x6c>)
 80006c2:	f000 fb41 	bl	8000d48 <HAL_GPIO_WritePin>
  delay(100);
 80006c6:	2064      	movs	r0, #100	; 0x64
 80006c8:	f7ff fd82 	bl	80001d0 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d2:	4808      	ldr	r0, [pc, #32]	; (80006f4 <usbInit+0x6c>)
 80006d4:	f000 fb38 	bl	8000d48 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	4619      	mov	r1, r3
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <usbInit+0x6c>)
 80006e2:	f000 f9ad 	bl	8000a40 <HAL_GPIO_Init>

  MX_USB_DEVICE_Init();
 80006e6:	f007 f801 	bl	80076ec <MX_USB_DEVICE_Init>


  return ret;
 80006ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40010800 	.word	0x40010800

080006f8 <hwInit>:


#include "hw.h"

void hwInit(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  bspInit();
 80006fc:	f7ff fd42 	bl	8000184 <bspInit>
  rtcInit();
 8000700:	f7ff ff1a 	bl	8000538 <rtcInit>

  resetInit();
 8000704:	f7ff feec 	bl	80004e0 <resetInit>
  ledInit();
 8000708:	f7ff fe68 	bl	80003dc <ledInit>
  usbInit();
 800070c:	f7ff ffbc 	bl	8000688 <usbInit>
  uartInit();
 8000710:	f7ff ff86 	bl	8000620 <uartInit>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HAL_Init+0x28>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <HAL_Init+0x28>)
 8000722:	f043 0310 	orr.w	r3, r3, #16
 8000726:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f947 	bl	80009bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f808 	bl	8000744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000734:	f7ff fdc2 	bl	80002bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40022000 	.word	0x40022000

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_InitTick+0x54>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x58>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075a:	fbb3 f3f1 	udiv	r3, r3, r1
 800075e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f95f 	bl	8000a26 <HAL_SYSTICK_Config>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	e00e      	b.n	8000790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b0f      	cmp	r3, #15
 8000776:	d80a      	bhi.n	800078e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000778:	2200      	movs	r2, #0
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f000 f927 	bl	80009d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <HAL_InitTick+0x5c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	e000      	b.n	8000790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000000 	.word	0x20000000
 800079c:	20000010 	.word	0x20000010
 80007a0:	2000000c 	.word	0x2000000c

080007a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_IncTick+0x1c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_IncTick+0x20>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a03      	ldr	r2, [pc, #12]	; (80007c4 <HAL_IncTick+0x20>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000010 	.word	0x20000010
 80007c4:	200001c8 	.word	0x200001c8

080007c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return uwTick;
 80007cc:	4b02      	ldr	r3, [pc, #8]	; (80007d8 <HAL_GetTick+0x10>)
 80007ce:	681b      	ldr	r3, [r3, #0]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	200001c8 	.word	0x200001c8

080007dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e4:	f7ff fff0 	bl	80007c8 <HAL_GetTick>
 80007e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f4:	d005      	beq.n	8000802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HAL_Delay+0x44>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4413      	add	r3, r2
 8000800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000802:	bf00      	nop
 8000804:	f7ff ffe0 	bl	80007c8 <HAL_GetTick>
 8000808:	4602      	mov	r2, r0
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	d8f7      	bhi.n	8000804 <HAL_Delay+0x28>
  {
  }
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000010 	.word	0x20000010

08000824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800084c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000856:	4a04      	ldr	r2, [pc, #16]	; (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	60d3      	str	r3, [r2, #12]
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <__NVIC_GetPriorityGrouping+0x18>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	f003 0307 	and.w	r3, r3, #7
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	db0b      	blt.n	80008b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f003 021f 	and.w	r2, r3, #31
 80008a0:	4906      	ldr	r1, [pc, #24]	; (80008bc <__NVIC_EnableIRQ+0x34>)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	095b      	lsrs	r3, r3, #5
 80008a8:	2001      	movs	r0, #1
 80008aa:	fa00 f202 	lsl.w	r2, r0, r2
 80008ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	e000e100 	.word	0xe000e100

080008c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db0a      	blt.n	80008ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	490c      	ldr	r1, [pc, #48]	; (800090c <__NVIC_SetPriority+0x4c>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	0112      	lsls	r2, r2, #4
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e8:	e00a      	b.n	8000900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4908      	ldr	r1, [pc, #32]	; (8000910 <__NVIC_SetPriority+0x50>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	3b04      	subs	r3, #4
 80008f8:	0112      	lsls	r2, r2, #4
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	440b      	add	r3, r1
 80008fe:	761a      	strb	r2, [r3, #24]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	; 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f1c3 0307 	rsb	r3, r3, #7
 800092e:	2b04      	cmp	r3, #4
 8000930:	bf28      	it	cs
 8000932:	2304      	movcs	r3, #4
 8000934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3304      	adds	r3, #4
 800093a:	2b06      	cmp	r3, #6
 800093c:	d902      	bls.n	8000944 <NVIC_EncodePriority+0x30>
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3b03      	subs	r3, #3
 8000942:	e000      	b.n	8000946 <NVIC_EncodePriority+0x32>
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	f04f 32ff 	mov.w	r2, #4294967295
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43da      	mvns	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	401a      	ands	r2, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095c:	f04f 31ff 	mov.w	r1, #4294967295
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	43d9      	mvns	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	4313      	orrs	r3, r2
         );
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	; 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000988:	d301      	bcc.n	800098e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098a:	2301      	movs	r3, #1
 800098c:	e00f      	b.n	80009ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <SysTick_Config+0x40>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000996:	210f      	movs	r1, #15
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f7ff ff90 	bl	80008c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <SysTick_Config+0x40>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <SysTick_Config+0x40>)
 80009a8:	2207      	movs	r2, #7
 80009aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	e000e010 	.word	0xe000e010

080009bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ff2d 	bl	8000824 <__NVIC_SetPriorityGrouping>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b086      	sub	sp, #24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e4:	f7ff ff42 	bl	800086c <__NVIC_GetPriorityGrouping>
 80009e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	68b9      	ldr	r1, [r7, #8]
 80009ee:	6978      	ldr	r0, [r7, #20]
 80009f0:	f7ff ff90 	bl	8000914 <NVIC_EncodePriority>
 80009f4:	4602      	mov	r2, r0
 80009f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fa:	4611      	mov	r1, r2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff5f 	bl	80008c0 <__NVIC_SetPriority>
}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff35 	bl	8000888 <__NVIC_EnableIRQ>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ffa2 	bl	8000978 <SysTick_Config>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b08b      	sub	sp, #44	; 0x2c
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a52:	e169      	b.n	8000d28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a54:	2201      	movs	r2, #1
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	69fa      	ldr	r2, [r7, #28]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	f040 8158 	bne.w	8000d22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	4a9a      	ldr	r2, [pc, #616]	; (8000ce0 <HAL_GPIO_Init+0x2a0>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d05e      	beq.n	8000b3a <HAL_GPIO_Init+0xfa>
 8000a7c:	4a98      	ldr	r2, [pc, #608]	; (8000ce0 <HAL_GPIO_Init+0x2a0>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d875      	bhi.n	8000b6e <HAL_GPIO_Init+0x12e>
 8000a82:	4a98      	ldr	r2, [pc, #608]	; (8000ce4 <HAL_GPIO_Init+0x2a4>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d058      	beq.n	8000b3a <HAL_GPIO_Init+0xfa>
 8000a88:	4a96      	ldr	r2, [pc, #600]	; (8000ce4 <HAL_GPIO_Init+0x2a4>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d86f      	bhi.n	8000b6e <HAL_GPIO_Init+0x12e>
 8000a8e:	4a96      	ldr	r2, [pc, #600]	; (8000ce8 <HAL_GPIO_Init+0x2a8>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d052      	beq.n	8000b3a <HAL_GPIO_Init+0xfa>
 8000a94:	4a94      	ldr	r2, [pc, #592]	; (8000ce8 <HAL_GPIO_Init+0x2a8>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d869      	bhi.n	8000b6e <HAL_GPIO_Init+0x12e>
 8000a9a:	4a94      	ldr	r2, [pc, #592]	; (8000cec <HAL_GPIO_Init+0x2ac>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d04c      	beq.n	8000b3a <HAL_GPIO_Init+0xfa>
 8000aa0:	4a92      	ldr	r2, [pc, #584]	; (8000cec <HAL_GPIO_Init+0x2ac>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d863      	bhi.n	8000b6e <HAL_GPIO_Init+0x12e>
 8000aa6:	4a92      	ldr	r2, [pc, #584]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d046      	beq.n	8000b3a <HAL_GPIO_Init+0xfa>
 8000aac:	4a90      	ldr	r2, [pc, #576]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d85d      	bhi.n	8000b6e <HAL_GPIO_Init+0x12e>
 8000ab2:	2b12      	cmp	r3, #18
 8000ab4:	d82a      	bhi.n	8000b0c <HAL_GPIO_Init+0xcc>
 8000ab6:	2b12      	cmp	r3, #18
 8000ab8:	d859      	bhi.n	8000b6e <HAL_GPIO_Init+0x12e>
 8000aba:	a201      	add	r2, pc, #4	; (adr r2, 8000ac0 <HAL_GPIO_Init+0x80>)
 8000abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac0:	08000b3b 	.word	0x08000b3b
 8000ac4:	08000b15 	.word	0x08000b15
 8000ac8:	08000b27 	.word	0x08000b27
 8000acc:	08000b69 	.word	0x08000b69
 8000ad0:	08000b6f 	.word	0x08000b6f
 8000ad4:	08000b6f 	.word	0x08000b6f
 8000ad8:	08000b6f 	.word	0x08000b6f
 8000adc:	08000b6f 	.word	0x08000b6f
 8000ae0:	08000b6f 	.word	0x08000b6f
 8000ae4:	08000b6f 	.word	0x08000b6f
 8000ae8:	08000b6f 	.word	0x08000b6f
 8000aec:	08000b6f 	.word	0x08000b6f
 8000af0:	08000b6f 	.word	0x08000b6f
 8000af4:	08000b6f 	.word	0x08000b6f
 8000af8:	08000b6f 	.word	0x08000b6f
 8000afc:	08000b6f 	.word	0x08000b6f
 8000b00:	08000b6f 	.word	0x08000b6f
 8000b04:	08000b1d 	.word	0x08000b1d
 8000b08:	08000b31 	.word	0x08000b31
 8000b0c:	4a79      	ldr	r2, [pc, #484]	; (8000cf4 <HAL_GPIO_Init+0x2b4>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d013      	beq.n	8000b3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b12:	e02c      	b.n	8000b6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	623b      	str	r3, [r7, #32]
          break;
 8000b1a:	e029      	b.n	8000b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	3304      	adds	r3, #4
 8000b22:	623b      	str	r3, [r7, #32]
          break;
 8000b24:	e024      	b.n	8000b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	3308      	adds	r3, #8
 8000b2c:	623b      	str	r3, [r7, #32]
          break;
 8000b2e:	e01f      	b.n	8000b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	330c      	adds	r3, #12
 8000b36:	623b      	str	r3, [r7, #32]
          break;
 8000b38:	e01a      	b.n	8000b70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d102      	bne.n	8000b48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b42:	2304      	movs	r3, #4
 8000b44:	623b      	str	r3, [r7, #32]
          break;
 8000b46:	e013      	b.n	8000b70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d105      	bne.n	8000b5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b50:	2308      	movs	r3, #8
 8000b52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	69fa      	ldr	r2, [r7, #28]
 8000b58:	611a      	str	r2, [r3, #16]
          break;
 8000b5a:	e009      	b.n	8000b70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	615a      	str	r2, [r3, #20]
          break;
 8000b66:	e003      	b.n	8000b70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
          break;
 8000b6c:	e000      	b.n	8000b70 <HAL_GPIO_Init+0x130>
          break;
 8000b6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	2bff      	cmp	r3, #255	; 0xff
 8000b74:	d801      	bhi.n	8000b7a <HAL_GPIO_Init+0x13a>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	e001      	b.n	8000b7e <HAL_GPIO_Init+0x13e>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	2bff      	cmp	r3, #255	; 0xff
 8000b84:	d802      	bhi.n	8000b8c <HAL_GPIO_Init+0x14c>
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	e002      	b.n	8000b92 <HAL_GPIO_Init+0x152>
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	3b08      	subs	r3, #8
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	210f      	movs	r1, #15
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	6a39      	ldr	r1, [r7, #32]
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	431a      	orrs	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 80b1 	beq.w	8000d22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc0:	4b4d      	ldr	r3, [pc, #308]	; (8000cf8 <HAL_GPIO_Init+0x2b8>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a4c      	ldr	r2, [pc, #304]	; (8000cf8 <HAL_GPIO_Init+0x2b8>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b4a      	ldr	r3, [pc, #296]	; (8000cf8 <HAL_GPIO_Init+0x2b8>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bd8:	4a48      	ldr	r2, [pc, #288]	; (8000cfc <HAL_GPIO_Init+0x2bc>)
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	089b      	lsrs	r3, r3, #2
 8000bde:	3302      	adds	r3, #2
 8000be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	220f      	movs	r2, #15
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a40      	ldr	r2, [pc, #256]	; (8000d00 <HAL_GPIO_Init+0x2c0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d013      	beq.n	8000c2c <HAL_GPIO_Init+0x1ec>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a3f      	ldr	r2, [pc, #252]	; (8000d04 <HAL_GPIO_Init+0x2c4>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d00d      	beq.n	8000c28 <HAL_GPIO_Init+0x1e8>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a3e      	ldr	r2, [pc, #248]	; (8000d08 <HAL_GPIO_Init+0x2c8>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d007      	beq.n	8000c24 <HAL_GPIO_Init+0x1e4>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a3d      	ldr	r2, [pc, #244]	; (8000d0c <HAL_GPIO_Init+0x2cc>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d101      	bne.n	8000c20 <HAL_GPIO_Init+0x1e0>
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	e006      	b.n	8000c2e <HAL_GPIO_Init+0x1ee>
 8000c20:	2304      	movs	r3, #4
 8000c22:	e004      	b.n	8000c2e <HAL_GPIO_Init+0x1ee>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e002      	b.n	8000c2e <HAL_GPIO_Init+0x1ee>
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e000      	b.n	8000c2e <HAL_GPIO_Init+0x1ee>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c30:	f002 0203 	and.w	r2, r2, #3
 8000c34:	0092      	lsls	r2, r2, #2
 8000c36:	4093      	lsls	r3, r2
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c3e:	492f      	ldr	r1, [pc, #188]	; (8000cfc <HAL_GPIO_Init+0x2bc>)
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	3302      	adds	r3, #2
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d006      	beq.n	8000c66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c58:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	492c      	ldr	r1, [pc, #176]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	600b      	str	r3, [r1, #0]
 8000c64:	e006      	b.n	8000c74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c66:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	4928      	ldr	r1, [pc, #160]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d006      	beq.n	8000c8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c80:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000c82:	685a      	ldr	r2, [r3, #4]
 8000c84:	4922      	ldr	r1, [pc, #136]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	604b      	str	r3, [r1, #4]
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	491e      	ldr	r1, [pc, #120]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000c98:	4013      	ands	r3, r2
 8000c9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d006      	beq.n	8000cb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000caa:	689a      	ldr	r2, [r3, #8]
 8000cac:	4918      	ldr	r1, [pc, #96]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	608b      	str	r3, [r1, #8]
 8000cb4:	e006      	b.n	8000cc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	4914      	ldr	r1, [pc, #80]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d021      	beq.n	8000d14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	490e      	ldr	r1, [pc, #56]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	60cb      	str	r3, [r1, #12]
 8000cdc:	e021      	b.n	8000d22 <HAL_GPIO_Init+0x2e2>
 8000cde:	bf00      	nop
 8000ce0:	10320000 	.word	0x10320000
 8000ce4:	10310000 	.word	0x10310000
 8000ce8:	10220000 	.word	0x10220000
 8000cec:	10210000 	.word	0x10210000
 8000cf0:	10120000 	.word	0x10120000
 8000cf4:	10110000 	.word	0x10110000
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000
 8000d00:	40010800 	.word	0x40010800
 8000d04:	40010c00 	.word	0x40010c00
 8000d08:	40011000 	.word	0x40011000
 8000d0c:	40011400 	.word	0x40011400
 8000d10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_GPIO_Init+0x304>)
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	4909      	ldr	r1, [pc, #36]	; (8000d44 <HAL_GPIO_Init+0x304>)
 8000d1e:	4013      	ands	r3, r2
 8000d20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	3301      	adds	r3, #1
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f47f ae8e 	bne.w	8000a54 <HAL_GPIO_Init+0x14>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	372c      	adds	r7, #44	; 0x2c
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	40010400 	.word	0x40010400

08000d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	807b      	strh	r3, [r7, #2]
 8000d54:	4613      	mov	r3, r2
 8000d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d58:	787b      	ldrb	r3, [r7, #1]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d5e:	887a      	ldrh	r2, [r7, #2]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d64:	e003      	b.n	8000d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	041a      	lsls	r2, r3, #16
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	611a      	str	r2, [r3, #16]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d8a:	887a      	ldrh	r2, [r7, #2]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	041a      	lsls	r2, r3, #16
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	43d9      	mvns	r1, r3
 8000d96:	887b      	ldrh	r3, [r7, #2]
 8000d98:	400b      	ands	r3, r1
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	611a      	str	r2, [r3, #16]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dac:	b08b      	sub	sp, #44	; 0x2c
 8000dae:	af06      	add	r7, sp, #24
 8000db0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e0fd      	b.n	8000fb8 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d106      	bne.n	8000dd6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f006 feed 	bl	8007bb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2203      	movs	r2, #3
 8000dda:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 fb9c 	bl	8003520 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	687e      	ldr	r6, [r7, #4]
 8000df0:	466d      	mov	r5, sp
 8000df2:	f106 0410 	add.w	r4, r6, #16
 8000df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	602b      	str	r3, [r5, #0]
 8000dfe:	1d33      	adds	r3, r6, #4
 8000e00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e02:	6838      	ldr	r0, [r7, #0]
 8000e04:	f002 fb66 	bl	80034d4 <USB_CoreInit>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d005      	beq.n	8000e1a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2202      	movs	r2, #2
 8000e12:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e0ce      	b.n	8000fb8 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 fb97 	bl	8003554 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	73fb      	strb	r3, [r7, #15]
 8000e2a:	e04c      	b.n	8000ec6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	1c5a      	adds	r2, r3, #1
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	440b      	add	r3, r1
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	4613      	mov	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	440b      	add	r3, r1
 8000e52:	7bfa      	ldrb	r2, [r7, #15]
 8000e54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e56:	7bfa      	ldrb	r2, [r7, #15]
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	b298      	uxth	r0, r3
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	440b      	add	r3, r1
 8000e68:	3336      	adds	r3, #54	; 0x36
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	440b      	add	r3, r1
 8000e7e:	3303      	adds	r3, #3
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e84:	7bfa      	ldrb	r2, [r7, #15]
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	440b      	add	r3, r1
 8000e92:	3338      	adds	r3, #56	; 0x38
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e98:	7bfa      	ldrb	r2, [r7, #15]
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	440b      	add	r3, r1
 8000ea6:	333c      	adds	r3, #60	; 0x3c
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000eac:	7bfa      	ldrb	r2, [r7, #15]
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	440b      	add	r3, r1
 8000eba:	3340      	adds	r3, #64	; 0x40
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d3ad      	bcc.n	8000e2c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e044      	b.n	8000f60 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ed6:	7bfa      	ldrb	r2, [r7, #15]
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000eec:	7bfa      	ldrb	r2, [r7, #15]
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	440b      	add	r3, r1
 8000efa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f02:	7bfa      	ldrb	r2, [r7, #15]
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	440b      	add	r3, r1
 8000f10:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f18:	7bfa      	ldrb	r2, [r7, #15]
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	440b      	add	r3, r1
 8000f26:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	440b      	add	r3, r1
 8000f52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	7bfa      	ldrb	r2, [r7, #15]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d3b5      	bcc.n	8000ed6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	687e      	ldr	r6, [r7, #4]
 8000f72:	466d      	mov	r5, sp
 8000f74:	f106 0410 	add.w	r4, r6, #16
 8000f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	602b      	str	r3, [r5, #0]
 8000f80:	1d33      	adds	r3, r6, #4
 8000f82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f84:	6838      	ldr	r0, [r7, #0]
 8000f86:	f002 faf1 	bl	800356c <USB_DevInit>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d005      	beq.n	8000f9c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2202      	movs	r2, #2
 8000f94:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e00d      	b.n	8000fb8 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f004 ffa3 	bl	8005efc <USB_DevDisconnect>

  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fc0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <HAL_PCD_Start+0x16>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e016      	b.n	8001004 <HAL_PCD_Start+0x44>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fa86 	bl	80034f4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000fe8:	2101      	movs	r1, #1
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f007 f853 	bl	8008096 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f004 ff77 	bl	8005ee8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f004 ff79 	bl	8005f10 <USB_ReadInterrupts>
 800101e:	4603      	mov	r3, r0
 8001020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001028:	d102      	bne.n	8001030 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 fb5f 	bl	80016ee <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f004 ff6b 	bl	8005f10 <USB_ReadInterrupts>
 800103a:	4603      	mov	r3, r0
 800103c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001044:	d112      	bne.n	800106c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800104e:	b29a      	uxth	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001058:	b292      	uxth	r2, r2
 800105a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f006 fe21 	bl	8007ca6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001064:	2100      	movs	r1, #0
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f923 	bl	80012b2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f004 ff4d 	bl	8005f10 <USB_ReadInterrupts>
 8001076:	4603      	mov	r3, r0
 8001078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001080:	d10b      	bne.n	800109a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800108a:	b29a      	uxth	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001094:	b292      	uxth	r2, r2
 8001096:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f004 ff36 	bl	8005f10 <USB_ReadInterrupts>
 80010a4:	4603      	mov	r3, r0
 80010a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010ae:	d10b      	bne.n	80010c8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010c2:	b292      	uxth	r2, r2
 80010c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f004 ff1f 	bl	8005f10 <USB_ReadInterrupts>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010dc:	d126      	bne.n	800112c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0204 	bic.w	r2, r2, #4
 80010f0:	b292      	uxth	r2, r2
 80010f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010fe:	b29a      	uxth	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0208 	bic.w	r2, r2, #8
 8001108:	b292      	uxth	r2, r2
 800110a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f006 fe02 	bl	8007d18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800111c:	b29a      	uxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001126:	b292      	uxth	r2, r2
 8001128:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f004 feed 	bl	8005f10 <USB_ReadInterrupts>
 8001136:	4603      	mov	r3, r0
 8001138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800113c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001140:	f040 8082 	bne.w	8001248 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001144:	2300      	movs	r3, #0
 8001146:	77fb      	strb	r3, [r7, #31]
 8001148:	e010      	b.n	800116c <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	7ffb      	ldrb	r3, [r7, #31]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	441a      	add	r2, r3
 8001156:	7ffb      	ldrb	r3, [r7, #31]
 8001158:	8812      	ldrh	r2, [r2, #0]
 800115a:	b292      	uxth	r2, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	3320      	adds	r3, #32
 8001160:	443b      	add	r3, r7
 8001162:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001166:	7ffb      	ldrb	r3, [r7, #31]
 8001168:	3301      	adds	r3, #1
 800116a:	77fb      	strb	r3, [r7, #31]
 800116c:	7ffb      	ldrb	r3, [r7, #31]
 800116e:	2b07      	cmp	r3, #7
 8001170:	d9eb      	bls.n	800114a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800117a:	b29a      	uxth	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f042 0201 	orr.w	r2, r2, #1
 8001184:	b292      	uxth	r2, r2
 8001186:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001192:	b29a      	uxth	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0201 	bic.w	r2, r2, #1
 800119c:	b292      	uxth	r2, r2
 800119e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80011a2:	bf00      	nop
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f6      	beq.n	80011a4 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011be:	b29a      	uxth	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011c8:	b292      	uxth	r2, r2
 80011ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	77fb      	strb	r3, [r7, #31]
 80011d2:	e00f      	b.n	80011f4 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80011d4:	7ffb      	ldrb	r3, [r7, #31]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	4611      	mov	r1, r2
 80011dc:	7ffa      	ldrb	r2, [r7, #31]
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	440a      	add	r2, r1
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	3320      	adds	r3, #32
 80011e6:	443b      	add	r3, r7
 80011e8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80011ec:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80011ee:	7ffb      	ldrb	r3, [r7, #31]
 80011f0:	3301      	adds	r3, #1
 80011f2:	77fb      	strb	r3, [r7, #31]
 80011f4:	7ffb      	ldrb	r3, [r7, #31]
 80011f6:	2b07      	cmp	r3, #7
 80011f8:	d9ec      	bls.n	80011d4 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001202:	b29a      	uxth	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 0208 	orr.w	r2, r2, #8
 800120c:	b292      	uxth	r2, r2
 800120e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800121a:	b29a      	uxth	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001224:	b292      	uxth	r2, r2
 8001226:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001232:	b29a      	uxth	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f042 0204 	orr.w	r2, r2, #4
 800123c:	b292      	uxth	r2, r2
 800123e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f006 fd4e 	bl	8007ce4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f004 fe5f 	bl	8005f10 <USB_ReadInterrupts>
 8001252:	4603      	mov	r3, r0
 8001254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800125c:	d10e      	bne.n	800127c <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001266:	b29a      	uxth	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001270:	b292      	uxth	r2, r2
 8001272:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f006 fd07 	bl	8007c8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f004 fe45 	bl	8005f10 <USB_ReadInterrupts>
 8001286:	4603      	mov	r3, r0
 8001288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001290:	d10b      	bne.n	80012aa <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800129a:	b29a      	uxth	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012a4:	b292      	uxth	r2, r2
 80012a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80012aa:	bf00      	nop
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d101      	bne.n	80012cc <HAL_PCD_SetAddress+0x1a>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e013      	b.n	80012f4 <HAL_PCD_SetAddress+0x42>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	78fa      	ldrb	r2, [r7, #3]
 80012d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	78fa      	ldrb	r2, [r7, #3]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f004 fdec 	bl	8005ec2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	4608      	mov	r0, r1
 8001306:	4611      	mov	r1, r2
 8001308:	461a      	mov	r2, r3
 800130a:	4603      	mov	r3, r0
 800130c:	70fb      	strb	r3, [r7, #3]
 800130e:	460b      	mov	r3, r1
 8001310:	803b      	strh	r3, [r7, #0]
 8001312:	4613      	mov	r3, r2
 8001314:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800131a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800131e:	2b00      	cmp	r3, #0
 8001320:	da0e      	bge.n	8001340 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2201      	movs	r2, #1
 800133c:	705a      	strb	r2, [r3, #1]
 800133e:	e00e      	b.n	800135e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	f003 0207 	and.w	r2, r3, #7
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2200      	movs	r2, #0
 800135c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800135e:	78fb      	ldrb	r3, [r7, #3]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	b2da      	uxtb	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800136a:	883a      	ldrh	r2, [r7, #0]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	78ba      	ldrb	r2, [r7, #2]
 8001374:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	785b      	ldrb	r3, [r3, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d004      	beq.n	8001388 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b29a      	uxth	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001388:	78bb      	ldrb	r3, [r7, #2]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d102      	bne.n	8001394 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_PCD_EP_Open+0xa6>
 800139e:	2302      	movs	r3, #2
 80013a0:	e00e      	b.n	80013c0 <HAL_PCD_EP_Open+0xc4>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68f9      	ldr	r1, [r7, #12]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 f8fb 	bl	80035ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80013be:	7afb      	ldrb	r3, [r7, #11]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da0e      	bge.n	80013fa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2201      	movs	r2, #1
 80013f6:	705a      	strb	r2, [r3, #1]
 80013f8:	e00e      	b.n	8001418 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	f003 0207 	and.w	r2, r3, #7
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	b2da      	uxtb	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800142a:	2b01      	cmp	r3, #1
 800142c:	d101      	bne.n	8001432 <HAL_PCD_EP_Close+0x6a>
 800142e:	2302      	movs	r3, #2
 8001430:	e00e      	b.n	8001450 <HAL_PCD_EP_Close+0x88>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68f9      	ldr	r1, [r7, #12]
 8001440:	4618      	mov	r0, r3
 8001442:	f002 fc1d 	bl	8003c80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	460b      	mov	r3, r1
 8001466:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001468:	7afb      	ldrb	r3, [r7, #11]
 800146a:	f003 0207 	and.w	r2, r3, #7
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	4413      	add	r3, r2
 800147e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	2200      	movs	r2, #0
 8001496:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001498:	7afb      	ldrb	r3, [r7, #11]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80014a4:	7afb      	ldrb	r3, [r7, #11]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6979      	ldr	r1, [r7, #20]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fdcf 	bl	8004058 <USB_EPStartXfer>
 80014ba:	e005      	b.n	80014c8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6979      	ldr	r1, [r7, #20]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fdc8 	bl	8004058 <USB_EPStartXfer>
  }

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	460b      	mov	r3, r1
 80014dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80014de:	78fb      	ldrb	r3, [r7, #3]
 80014e0:	f003 0207 	and.w	r2, r3, #7
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80014f4:	681b      	ldr	r3, [r3, #0]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	460b      	mov	r3, r1
 800150e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001510:	7afb      	ldrb	r3, [r7, #11]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2201      	movs	r2, #1
 800154a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800154c:	7afb      	ldrb	r3, [r7, #11]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	b2da      	uxtb	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001558:	7afb      	ldrb	r3, [r7, #11]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	2b00      	cmp	r3, #0
 8001560:	d106      	bne.n	8001570 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6979      	ldr	r1, [r7, #20]
 8001568:	4618      	mov	r0, r3
 800156a:	f002 fd75 	bl	8004058 <USB_EPStartXfer>
 800156e:	e005      	b.n	800157c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6979      	ldr	r1, [r7, #20]
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fd6e 	bl	8004058 <USB_EPStartXfer>
  }

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	460b      	mov	r3, r1
 8001590:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	f003 0207 	and.w	r2, r3, #7
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	429a      	cmp	r2, r3
 800159e:	d901      	bls.n	80015a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e04c      	b.n	800163e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	da0e      	bge.n	80015ca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2201      	movs	r2, #1
 80015c6:	705a      	strb	r2, [r3, #1]
 80015c8:	e00c      	b.n	80015e4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2201      	movs	r2, #1
 80015e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_PCD_EP_SetStall+0x7e>
 8001600:	2302      	movs	r3, #2
 8001602:	e01c      	b.n	800163e <HAL_PCD_EP_SetStall+0xb8>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68f9      	ldr	r1, [r7, #12]
 8001612:	4618      	mov	r0, r3
 8001614:	f004 fb58 	bl	8005cc8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	2b00      	cmp	r3, #0
 8001620:	d108      	bne.n	8001634 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f004 fc7d 	bl	8005f2e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	460b      	mov	r3, r1
 8001650:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	f003 020f 	and.w	r2, r3, #15
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	d901      	bls.n	8001664 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e040      	b.n	80016e6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001668:	2b00      	cmp	r3, #0
 800166a:	da0e      	bge.n	800168a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2201      	movs	r2, #1
 8001686:	705a      	strb	r2, [r3, #1]
 8001688:	e00e      	b.n	80016a8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	f003 0207 	and.w	r2, r3, #7
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_PCD_EP_ClrStall+0x82>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e00e      	b.n	80016e6 <HAL_PCD_EP_ClrStall+0xa0>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68f9      	ldr	r1, [r7, #12]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 fb46 	bl	8005d68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b08e      	sub	sp, #56	; 0x38
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016f6:	e2ec      	b.n	8001cd2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001700:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001702:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800170e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 8161 	bne.w	80019da <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001718:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	2b00      	cmp	r3, #0
 8001720:	d152      	bne.n	80017c8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	b29b      	uxth	r3, r3
 800172a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800172e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001732:	81fb      	strh	r3, [r7, #14]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	89fb      	ldrh	r3, [r7, #14]
 800173a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800173e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001742:	b29b      	uxth	r3, r3
 8001744:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3328      	adds	r3, #40	; 0x28
 800174a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001754:	b29b      	uxth	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4413      	add	r3, r2
 8001760:	3302      	adds	r3, #2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	4413      	add	r3, r2
 800176a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	695a      	ldr	r2, [r3, #20]
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	441a      	add	r2, r3
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001786:	2100      	movs	r1, #0
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f006 fa64 	bl	8007c56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 829b 	beq.w	8001cd2 <PCD_EP_ISR_Handler+0x5e4>
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f040 8296 	bne.w	8001cd2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	b292      	uxth	r2, r2
 80017ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017c6:	e284      	b.n	8001cd2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80017d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d034      	beq.n	800184c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4413      	add	r3, r2
 80017f6:	3306      	adds	r3, #6
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001820:	b29b      	uxth	r3, r3
 8001822:	f004 fbd4 	bl	8005fce <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	b29a      	uxth	r2, r3
 800182e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001832:	4013      	ands	r3, r2
 8001834:	823b      	strh	r3, [r7, #16]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	8a3a      	ldrh	r2, [r7, #16]
 800183c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001840:	b292      	uxth	r2, r2
 8001842:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f006 f9d9 	bl	8007bfc <HAL_PCD_SetupStageCallback>
 800184a:	e242      	b.n	8001cd2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800184c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001850:	2b00      	cmp	r3, #0
 8001852:	f280 823e 	bge.w	8001cd2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b29a      	uxth	r2, r3
 800185e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001862:	4013      	ands	r3, r2
 8001864:	83bb      	strh	r3, [r7, #28]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	8bba      	ldrh	r2, [r7, #28]
 800186c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001870:	b292      	uxth	r2, r2
 8001872:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800187c:	b29b      	uxth	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	3306      	adds	r3, #6
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	4413      	add	r3, r2
 8001892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d019      	beq.n	80018dc <PCD_EP_ISR_Handler+0x1ee>
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d015      	beq.n	80018dc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	6959      	ldr	r1, [r3, #20]
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	f004 fb84 	bl	8005fce <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	441a      	add	r2, r3
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80018d4:	2100      	movs	r1, #0
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f006 f9a2 	bl	8007c20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f040 81f2 	bne.w	8001cd2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	4413      	add	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d112      	bne.n	800193c <PCD_EP_ISR_Handler+0x24e>
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001920:	b29a      	uxth	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	801a      	strh	r2, [r3, #0]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001934:	b29a      	uxth	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	801a      	strh	r2, [r3, #0]
 800193a:	e02f      	b.n	800199c <PCD_EP_ISR_Handler+0x2ae>
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	2b3e      	cmp	r3, #62	; 0x3e
 8001942:	d813      	bhi.n	800196c <PCD_EP_ISR_Handler+0x27e>
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	085b      	lsrs	r3, r3, #1
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <PCD_EP_ISR_Handler+0x270>
 8001958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195a:	3301      	adds	r3, #1
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
 800195e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001960:	b29b      	uxth	r3, r3
 8001962:	029b      	lsls	r3, r3, #10
 8001964:	b29a      	uxth	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	801a      	strh	r2, [r3, #0]
 800196a:	e017      	b.n	800199c <PCD_EP_ISR_Handler+0x2ae>
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	095b      	lsrs	r3, r3, #5
 8001972:	633b      	str	r3, [r7, #48]	; 0x30
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	f003 031f 	and.w	r3, r3, #31
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <PCD_EP_ISR_Handler+0x298>
 8001980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001982:	3b01      	subs	r3, #1
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
 8001986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001988:	b29b      	uxth	r3, r3
 800198a:	029b      	lsls	r3, r3, #10
 800198c:	b29b      	uxth	r3, r3
 800198e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001996:	b29a      	uxth	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ac:	827b      	strh	r3, [r7, #18]
 80019ae:	8a7b      	ldrh	r3, [r7, #18]
 80019b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80019b4:	827b      	strh	r3, [r7, #18]
 80019b6:	8a7b      	ldrh	r3, [r7, #18]
 80019b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80019bc:	827b      	strh	r3, [r7, #18]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	8a7b      	ldrh	r3, [r7, #18]
 80019c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	8013      	strh	r3, [r2, #0]
 80019d8:	e17b      	b.n	8001cd2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019ec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f280 80ea 	bge.w	8001bca <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	853b      	strh	r3, [r7, #40]	; 0x28
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a24:	b292      	uxth	r2, r2
 8001a26:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a28:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	7b1b      	ldrb	r3, [r3, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d122      	bne.n	8001a8c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	3306      	adds	r3, #6
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a6e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001a70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8087 	beq.w	8001b86 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	6959      	ldr	r1, [r3, #20]
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	88da      	ldrh	r2, [r3, #6]
 8001a84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a86:	f004 faa2 	bl	8005fce <USB_ReadPMA>
 8001a8a:	e07c      	b.n	8001b86 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	78db      	ldrb	r3, [r3, #3]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d108      	bne.n	8001aa6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a96:	461a      	mov	r2, r3
 8001a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f927 	bl	8001cee <HAL_PCD_EP_DB_Receive>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001aa4:	e06f      	b.n	8001b86 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ac0:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	441a      	add	r2, r3
 8001ad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ade:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d021      	beq.n	8001b44 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4413      	add	r3, r2
 8001b14:	3302      	adds	r3, #2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b28:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001b2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d02a      	beq.n	8001b86 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	6959      	ldr	r1, [r3, #20]
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	891a      	ldrh	r2, [r3, #8]
 8001b3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b3e:	f004 fa46 	bl	8005fce <USB_ReadPMA>
 8001b42:	e020      	b.n	8001b86 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	3306      	adds	r3, #6
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	4413      	add	r3, r2
 8001b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b6c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001b6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	6959      	ldr	r1, [r3, #20]
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	895a      	ldrh	r2, [r3, #10]
 8001b80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b82:	f004 fa24 	bl	8005fce <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	69da      	ldr	r2, [r3, #28]
 8001b8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b8c:	441a      	add	r2, r3
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b98:	441a      	add	r2, r3
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <PCD_EP_ISR_Handler+0x4c2>
 8001ba6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d206      	bcs.n	8001bbe <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f006 f832 	bl	8007c20 <HAL_PCD_DataOutStageCallback>
 8001bbc:	e005      	b.n	8001bca <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 fa47 	bl	8004058 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001bca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d07e      	beq.n	8001cd2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001bd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c02:	843b      	strh	r3, [r7, #32]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	441a      	add	r2, r3
 8001c12:	8c3b      	ldrh	r3, [r7, #32]
 8001c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	78db      	ldrb	r3, [r3, #3]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d00c      	beq.n	8001c42 <PCD_EP_ISR_Handler+0x554>
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	78db      	ldrb	r3, [r3, #3]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d146      	bne.n	8001cc6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001c38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d141      	bne.n	8001cc6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4413      	add	r3, r2
 8001c56:	3302      	adds	r3, #2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c6a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	699a      	ldr	r2, [r3, #24]
 8001c70:	8bfb      	ldrh	r3, [r7, #30]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d906      	bls.n	8001c84 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	8bfb      	ldrh	r3, [r7, #30]
 8001c7c:	1ad2      	subs	r2, r2, r3
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	619a      	str	r2, [r3, #24]
 8001c82:	e002      	b.n	8001c8a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d106      	bne.n	8001ca0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	4619      	mov	r1, r3
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f005 ffdc 	bl	8007c56 <HAL_PCD_DataInStageCallback>
 8001c9e:	e018      	b.n	8001cd2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	695a      	ldr	r2, [r3, #20]
 8001ca4:	8bfb      	ldrh	r3, [r7, #30]
 8001ca6:	441a      	add	r2, r3
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	69da      	ldr	r2, [r3, #28]
 8001cb0:	8bfb      	ldrh	r3, [r7, #30]
 8001cb2:	441a      	add	r2, r3
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f002 f9ca 	bl	8004058 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001cc4:	e005      	b.n	8001cd2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001cc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001cc8:	461a      	mov	r2, r3
 8001cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f91b 	bl	8001f08 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f6ff ad0a 	blt.w	80016f8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3738      	adds	r7, #56	; 0x38
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b088      	sub	sp, #32
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d07e      	beq.n	8001e04 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d2e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	699a      	ldr	r2, [r3, #24]
 8001d34:	8b7b      	ldrh	r3, [r7, #26]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d306      	bcc.n	8001d48 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	8b7b      	ldrh	r3, [r7, #26]
 8001d40:	1ad2      	subs	r2, r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	619a      	str	r2, [r3, #24]
 8001d46:	e002      	b.n	8001d4e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d123      	bne.n	8001d9e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d70:	833b      	strh	r3, [r7, #24]
 8001d72:	8b3b      	ldrh	r3, [r7, #24]
 8001d74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d78:	833b      	strh	r3, [r7, #24]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	441a      	add	r2, r3
 8001d88:	8b3b      	ldrh	r3, [r7, #24]
 8001d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01f      	beq.n	8001de8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc2:	82fb      	strh	r3, [r7, #22]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	441a      	add	r2, r3
 8001dd2:	8afb      	ldrh	r3, [r7, #22]
 8001dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001de0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001de8:	8b7b      	ldrh	r3, [r7, #26]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8087 	beq.w	8001efe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	6959      	ldr	r1, [r3, #20]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	891a      	ldrh	r2, [r3, #8]
 8001dfc:	8b7b      	ldrh	r3, [r7, #26]
 8001dfe:	f004 f8e6 	bl	8005fce <USB_ReadPMA>
 8001e02:	e07c      	b.n	8001efe <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	3306      	adds	r3, #6
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e2c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	8b7b      	ldrh	r3, [r7, #26]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d306      	bcc.n	8001e46 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	699a      	ldr	r2, [r3, #24]
 8001e3c:	8b7b      	ldrh	r3, [r7, #26]
 8001e3e:	1ad2      	subs	r2, r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	619a      	str	r2, [r3, #24]
 8001e44:	e002      	b.n	8001e4c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d123      	bne.n	8001e9c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e6e:	83fb      	strh	r3, [r7, #30]
 8001e70:	8bfb      	ldrh	r3, [r7, #30]
 8001e72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e76:	83fb      	strh	r3, [r7, #30]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	441a      	add	r2, r3
 8001e86:	8bfb      	ldrh	r3, [r7, #30]
 8001e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d11f      	bne.n	8001ee6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec0:	83bb      	strh	r3, [r7, #28]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	441a      	add	r2, r3
 8001ed0:	8bbb      	ldrh	r3, [r7, #28]
 8001ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ede:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ee6:	8b7b      	ldrh	r3, [r7, #26]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	6959      	ldr	r1, [r3, #20]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	895a      	ldrh	r2, [r3, #10]
 8001ef8:	8b7b      	ldrh	r3, [r7, #26]
 8001efa:	f004 f868 	bl	8005fce <USB_ReadPMA>
    }
  }

  return count;
 8001efe:	8b7b      	ldrh	r3, [r7, #26]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3720      	adds	r7, #32
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b0a2      	sub	sp, #136	; 0x88
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	4613      	mov	r3, r2
 8001f14:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 81c7 	beq.w	80022b0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	3302      	adds	r3, #2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f4a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d907      	bls.n	8001f6a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f62:	1ad2      	subs	r2, r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	619a      	str	r2, [r3, #24]
 8001f68:	e002      	b.n	8001f70 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f040 80b9 	bne.w	80020ec <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	785b      	ldrb	r3, [r3, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d126      	bne.n	8001fd0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f96:	4413      	add	r3, r2
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	011a      	lsls	r2, r3, #4
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	801a      	strh	r2, [r3, #0]
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	801a      	strh	r2, [r3, #0]
 8001fce:	e01a      	b.n	8002006 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	785b      	ldrb	r3, [r3, #1]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d116      	bne.n	8002006 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fec:	4413      	add	r3, r2
 8001fee:	633b      	str	r3, [r7, #48]	; 0x30
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	011a      	lsls	r2, r3, #4
 8001ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002002:	2200      	movs	r2, #0
 8002004:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	623b      	str	r3, [r7, #32]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	785b      	ldrb	r3, [r3, #1]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d126      	bne.n	8002062 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002022:	b29b      	uxth	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4413      	add	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	011a      	lsls	r2, r3, #4
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4413      	add	r3, r2
 8002036:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	b29b      	uxth	r3, r3
 8002042:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002046:	b29a      	uxth	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	801a      	strh	r2, [r3, #0]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	b29b      	uxth	r3, r3
 8002052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800205a:	b29a      	uxth	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	801a      	strh	r2, [r3, #0]
 8002060:	e017      	b.n	8002092 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d113      	bne.n	8002092 <HAL_PCD_EP_DB_Transmit+0x18a>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002072:	b29b      	uxth	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	4413      	add	r3, r2
 800207a:	623b      	str	r3, [r7, #32]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	011a      	lsls	r2, r3, #4
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	4413      	add	r3, r2
 8002086:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800208a:	61fb      	str	r3, [r7, #28]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2200      	movs	r2, #0
 8002090:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	4619      	mov	r1, r3
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f005 fddc 	bl	8007c56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 82d4 	beq.w	8002652 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c4:	827b      	strh	r3, [r7, #18]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	441a      	add	r2, r3
 80020d4:	8a7b      	ldrh	r3, [r7, #18]
 80020d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	8013      	strh	r3, [r2, #0]
 80020ea:	e2b2      	b.n	8002652 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d021      	beq.n	800213a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800210c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002110:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	441a      	add	r2, r3
 8002122:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800212a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800212e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002136:	b29b      	uxth	r3, r3
 8002138:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002140:	2b01      	cmp	r3, #1
 8002142:	f040 8286 	bne.w	8002652 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800214e:	441a      	add	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800215c:	441a      	add	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	6a1a      	ldr	r2, [r3, #32]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	429a      	cmp	r2, r3
 800216c:	d309      	bcc.n	8002182 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	6a1a      	ldr	r2, [r3, #32]
 8002178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800217a:	1ad2      	subs	r2, r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	621a      	str	r2, [r3, #32]
 8002180:	e015      	b.n	80021ae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d107      	bne.n	800219a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800218a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800218e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002198:	e009      	b.n	80021ae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2200      	movs	r2, #0
 80021ac:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	785b      	ldrb	r3, [r3, #1]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d155      	bne.n	8002262 <HAL_PCD_EP_DB_Transmit+0x35a>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ca:	4413      	add	r3, r2
 80021cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	011a      	lsls	r2, r3, #4
 80021d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d6:	4413      	add	r3, r2
 80021d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021dc:	637b      	str	r3, [r7, #52]	; 0x34
 80021de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d112      	bne.n	800220a <HAL_PCD_EP_DB_Transmit+0x302>
 80021e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f2:	801a      	strh	r2, [r3, #0]
 80021f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002202:	b29a      	uxth	r2, r3
 8002204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002206:	801a      	strh	r2, [r3, #0]
 8002208:	e047      	b.n	800229a <HAL_PCD_EP_DB_Transmit+0x392>
 800220a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800220c:	2b3e      	cmp	r3, #62	; 0x3e
 800220e:	d811      	bhi.n	8002234 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002212:	085b      	lsrs	r3, r3, #1
 8002214:	64bb      	str	r3, [r7, #72]	; 0x48
 8002216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002222:	3301      	adds	r3, #1
 8002224:	64bb      	str	r3, [r7, #72]	; 0x48
 8002226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002228:	b29b      	uxth	r3, r3
 800222a:	029b      	lsls	r3, r3, #10
 800222c:	b29a      	uxth	r2, r3
 800222e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002230:	801a      	strh	r2, [r3, #0]
 8002232:	e032      	b.n	800229a <HAL_PCD_EP_DB_Transmit+0x392>
 8002234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	64bb      	str	r3, [r7, #72]	; 0x48
 800223a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <HAL_PCD_EP_DB_Transmit+0x342>
 8002244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002246:	3b01      	subs	r3, #1
 8002248:	64bb      	str	r3, [r7, #72]	; 0x48
 800224a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800224c:	b29b      	uxth	r3, r3
 800224e:	029b      	lsls	r3, r3, #10
 8002250:	b29b      	uxth	r3, r3
 8002252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800225a:	b29a      	uxth	r2, r3
 800225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225e:	801a      	strh	r2, [r3, #0]
 8002260:	e01b      	b.n	800229a <HAL_PCD_EP_DB_Transmit+0x392>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	785b      	ldrb	r3, [r3, #1]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d117      	bne.n	800229a <HAL_PCD_EP_DB_Transmit+0x392>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	643b      	str	r3, [r7, #64]	; 0x40
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002278:	b29b      	uxth	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800227e:	4413      	add	r3, r2
 8002280:	643b      	str	r3, [r7, #64]	; 0x40
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	011a      	lsls	r2, r3, #4
 8002288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800228a:	4413      	add	r3, r2
 800228c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002294:	b29a      	uxth	r2, r3
 8002296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002298:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	6959      	ldr	r1, [r3, #20]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	891a      	ldrh	r2, [r3, #8]
 80022a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	f003 fe4b 	bl	8005f44 <USB_WritePMA>
 80022ae:	e1d0      	b.n	8002652 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	3306      	adds	r3, #6
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	699a      	ldr	r2, [r3, #24]
 80022e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d307      	bcc.n	80022f8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	699a      	ldr	r2, [r3, #24]
 80022ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022f0:	1ad2      	subs	r2, r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	619a      	str	r2, [r3, #24]
 80022f6:	e002      	b.n	80022fe <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2200      	movs	r2, #0
 80022fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f040 80c4 	bne.w	8002490 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	785b      	ldrb	r3, [r3, #1]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d126      	bne.n	800235e <HAL_PCD_EP_DB_Transmit+0x456>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002324:	4413      	add	r3, r2
 8002326:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	011a      	lsls	r2, r3, #4
 800232e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002330:	4413      	add	r3, r2
 8002332:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002336:	66bb      	str	r3, [r7, #104]	; 0x68
 8002338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	b29b      	uxth	r3, r3
 800233e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002342:	b29a      	uxth	r2, r3
 8002344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002346:	801a      	strh	r2, [r3, #0]
 8002348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	b29b      	uxth	r3, r3
 800234e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002356:	b29a      	uxth	r2, r3
 8002358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800235a:	801a      	strh	r2, [r3, #0]
 800235c:	e01a      	b.n	8002394 <HAL_PCD_EP_DB_Transmit+0x48c>
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	785b      	ldrb	r3, [r3, #1]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d116      	bne.n	8002394 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	677b      	str	r3, [r7, #116]	; 0x74
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002374:	b29b      	uxth	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800237a:	4413      	add	r3, r2
 800237c:	677b      	str	r3, [r7, #116]	; 0x74
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	011a      	lsls	r2, r3, #4
 8002384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002386:	4413      	add	r3, r2
 8002388:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800238c:	673b      	str	r3, [r7, #112]	; 0x70
 800238e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002390:	2200      	movs	r2, #0
 8002392:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	67bb      	str	r3, [r7, #120]	; 0x78
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	785b      	ldrb	r3, [r3, #1]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d12f      	bne.n	8002402 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023ba:	4413      	add	r3, r2
 80023bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	011a      	lsls	r2, r3, #4
 80023c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023ca:	4413      	add	r3, r2
 80023cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023e6:	801a      	strh	r2, [r3, #0]
 80023e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023fe:	801a      	strh	r2, [r3, #0]
 8002400:	e017      	b.n	8002432 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	785b      	ldrb	r3, [r3, #1]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d113      	bne.n	8002432 <HAL_PCD_EP_DB_Transmit+0x52a>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002412:	b29b      	uxth	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002418:	4413      	add	r3, r2
 800241a:	67bb      	str	r3, [r7, #120]	; 0x78
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	011a      	lsls	r2, r3, #4
 8002422:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002424:	4413      	add	r3, r2
 8002426:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800242a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800242c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800242e:	2200      	movs	r2, #0
 8002430:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	4619      	mov	r1, r3
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f005 fc0c 	bl	8007c56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002444:	2b00      	cmp	r3, #0
 8002446:	f040 8104 	bne.w	8002652 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002464:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	441a      	add	r2, r3
 8002476:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800247a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800247e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002482:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248a:	b29b      	uxth	r3, r3
 800248c:	8013      	strh	r3, [r2, #0]
 800248e:	e0e0      	b.n	8002652 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d121      	bne.n	80024de <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	441a      	add	r2, r3
 80024c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80024ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024da:	b29b      	uxth	r3, r3
 80024dc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	f040 80b4 	bne.w	8002652 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024f2:	441a      	add	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	69da      	ldr	r2, [r3, #28]
 80024fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002500:	441a      	add	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	6a1a      	ldr	r2, [r3, #32]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	429a      	cmp	r2, r3
 8002510:	d309      	bcc.n	8002526 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	6a1a      	ldr	r2, [r3, #32]
 800251c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800251e:	1ad2      	subs	r2, r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	621a      	str	r2, [r3, #32]
 8002524:	e015      	b.n	8002552 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800252e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002532:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800253c:	e009      	b.n	8002552 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2200      	movs	r2, #0
 8002548:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	667b      	str	r3, [r7, #100]	; 0x64
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	785b      	ldrb	r3, [r3, #1]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d155      	bne.n	800260c <HAL_PCD_EP_DB_Transmit+0x704>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002574:	4413      	add	r3, r2
 8002576:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	011a      	lsls	r2, r3, #4
 800257e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002580:	4413      	add	r3, r2
 8002582:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002586:	65bb      	str	r3, [r7, #88]	; 0x58
 8002588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800258a:	2b00      	cmp	r3, #0
 800258c:	d112      	bne.n	80025b4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800258e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	b29b      	uxth	r3, r3
 8002594:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002598:	b29a      	uxth	r2, r3
 800259a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800259c:	801a      	strh	r2, [r3, #0]
 800259e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b0:	801a      	strh	r2, [r3, #0]
 80025b2:	e044      	b.n	800263e <HAL_PCD_EP_DB_Transmit+0x736>
 80025b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b6:	2b3e      	cmp	r3, #62	; 0x3e
 80025b8:	d811      	bhi.n	80025de <HAL_PCD_EP_DB_Transmit+0x6d6>
 80025ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	657b      	str	r3, [r7, #84]	; 0x54
 80025c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80025ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025cc:	3301      	adds	r3, #1
 80025ce:	657b      	str	r3, [r7, #84]	; 0x54
 80025d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	029b      	lsls	r3, r3, #10
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025da:	801a      	strh	r2, [r3, #0]
 80025dc:	e02f      	b.n	800263e <HAL_PCD_EP_DB_Transmit+0x736>
 80025de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	657b      	str	r3, [r7, #84]	; 0x54
 80025e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80025ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f0:	3b01      	subs	r3, #1
 80025f2:	657b      	str	r3, [r7, #84]	; 0x54
 80025f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	029b      	lsls	r3, r3, #10
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002604:	b29a      	uxth	r2, r3
 8002606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002608:	801a      	strh	r2, [r3, #0]
 800260a:	e018      	b.n	800263e <HAL_PCD_EP_DB_Transmit+0x736>
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	785b      	ldrb	r3, [r3, #1]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d114      	bne.n	800263e <HAL_PCD_EP_DB_Transmit+0x736>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261c:	b29b      	uxth	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002622:	4413      	add	r3, r2
 8002624:	667b      	str	r3, [r7, #100]	; 0x64
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	011a      	lsls	r2, r3, #4
 800262c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800262e:	4413      	add	r3, r2
 8002630:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002634:	663b      	str	r3, [r7, #96]	; 0x60
 8002636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002638:	b29a      	uxth	r2, r3
 800263a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800263c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	6959      	ldr	r1, [r3, #20]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	895a      	ldrh	r2, [r3, #10]
 800264a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800264c:	b29b      	uxth	r3, r3
 800264e:	f003 fc79 	bl	8005f44 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800266c:	823b      	strh	r3, [r7, #16]
 800266e:	8a3b      	ldrh	r3, [r7, #16]
 8002670:	f083 0310 	eor.w	r3, r3, #16
 8002674:	823b      	strh	r3, [r7, #16]
 8002676:	8a3b      	ldrh	r3, [r7, #16]
 8002678:	f083 0320 	eor.w	r3, r3, #32
 800267c:	823b      	strh	r3, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	441a      	add	r2, r3
 800268c:	8a3b      	ldrh	r3, [r7, #16]
 800268e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800269a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800269e:	b29b      	uxth	r3, r3
 80026a0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3788      	adds	r7, #136	; 0x88
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	460b      	mov	r3, r1
 80026b8:	817b      	strh	r3, [r7, #10]
 80026ba:	4613      	mov	r3, r2
 80026bc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80026be:	897b      	ldrh	r3, [r7, #10]
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ca:	897b      	ldrh	r3, [r7, #10]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4413      	add	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	e009      	b.n	80026f6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026e2:	897a      	ldrh	r2, [r7, #10]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4413      	add	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026f6:	893b      	ldrh	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d107      	bne.n	800270c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2200      	movs	r2, #0
 8002700:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	b29a      	uxth	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	80da      	strh	r2, [r3, #6]
 800270a:	e00b      	b.n	8002724 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2201      	movs	r2, #1
 8002710:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	b29a      	uxth	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0c1b      	lsrs	r3, r3, #16
 800271e:	b29a      	uxth	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	420e0020 	.word	0x420e0020

08002748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e272      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8087 	beq.w	8002876 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002768:	4b92      	ldr	r3, [pc, #584]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b04      	cmp	r3, #4
 8002772:	d00c      	beq.n	800278e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002774:	4b8f      	ldr	r3, [pc, #572]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d112      	bne.n	80027a6 <HAL_RCC_OscConfig+0x5e>
 8002780:	4b8c      	ldr	r3, [pc, #560]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d10b      	bne.n	80027a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278e:	4b89      	ldr	r3, [pc, #548]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d06c      	beq.n	8002874 <HAL_RCC_OscConfig+0x12c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d168      	bne.n	8002874 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e24c      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x76>
 80027b0:	4b80      	ldr	r3, [pc, #512]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a7f      	ldr	r2, [pc, #508]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	e02e      	b.n	800281c <HAL_RCC_OscConfig+0xd4>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x98>
 80027c6:	4b7b      	ldr	r3, [pc, #492]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a7a      	ldr	r2, [pc, #488]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b78      	ldr	r3, [pc, #480]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a77      	ldr	r2, [pc, #476]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e01d      	b.n	800281c <HAL_RCC_OscConfig+0xd4>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0xbc>
 80027ea:	4b72      	ldr	r3, [pc, #456]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a71      	ldr	r2, [pc, #452]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b6f      	ldr	r3, [pc, #444]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a6e      	ldr	r2, [pc, #440]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0xd4>
 8002804:	4b6b      	ldr	r3, [pc, #428]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a6a      	ldr	r2, [pc, #424]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 800280a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b68      	ldr	r3, [pc, #416]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a67      	ldr	r2, [pc, #412]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fd ffd0 	bl	80007c8 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282c:	f7fd ffcc 	bl	80007c8 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e200      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	4b5d      	ldr	r3, [pc, #372]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0xe4>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fd ffbc 	bl	80007c8 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7fd ffb8 	bl	80007c8 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e1ec      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	4b53      	ldr	r3, [pc, #332]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x10c>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d063      	beq.n	800294a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002882:	4b4c      	ldr	r3, [pc, #304]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800288e:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b08      	cmp	r3, #8
 8002898:	d11c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x18c>
 800289a:	4b46      	ldr	r3, [pc, #280]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	4b43      	ldr	r3, [pc, #268]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_RCC_OscConfig+0x176>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e1c0      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b3d      	ldr	r3, [pc, #244]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4939      	ldr	r1, [pc, #228]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	e03a      	b.n	800294a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028dc:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <HAL_RCC_OscConfig+0x270>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fd ff71 	bl	80007c8 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ea:	f7fd ff6d 	bl	80007c8 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e1a1      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fc:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002908:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4927      	ldr	r1, [pc, #156]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
 800291c:	e015      	b.n	800294a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291e:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <HAL_RCC_OscConfig+0x270>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7fd ff50 	bl	80007c8 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292c:	f7fd ff4c 	bl	80007c8 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e180      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293e:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d03a      	beq.n	80029cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d019      	beq.n	8002992 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002964:	f7fd ff30 	bl	80007c8 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296c:	f7fd ff2c 	bl	80007c8 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e160      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297e:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800298a:	2001      	movs	r0, #1
 800298c:	f000 fac4 	bl	8002f18 <RCC_Delay>
 8002990:	e01c      	b.n	80029cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002998:	f7fd ff16 	bl	80007c8 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299e:	e00f      	b.n	80029c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a0:	f7fd ff12 	bl	80007c8 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d908      	bls.n	80029c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e146      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	42420000 	.word	0x42420000
 80029bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c0:	4b92      	ldr	r3, [pc, #584]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1e9      	bne.n	80029a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80a6 	beq.w	8002b26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029da:	2300      	movs	r3, #0
 80029dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029de:	4b8b      	ldr	r3, [pc, #556]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10d      	bne.n	8002a06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	4b88      	ldr	r3, [pc, #544]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	4a87      	ldr	r2, [pc, #540]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f4:	61d3      	str	r3, [r2, #28]
 80029f6:	4b85      	ldr	r3, [pc, #532]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a02:	2301      	movs	r3, #1
 8002a04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a06:	4b82      	ldr	r3, [pc, #520]	; (8002c10 <HAL_RCC_OscConfig+0x4c8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d118      	bne.n	8002a44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a12:	4b7f      	ldr	r3, [pc, #508]	; (8002c10 <HAL_RCC_OscConfig+0x4c8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a7e      	ldr	r2, [pc, #504]	; (8002c10 <HAL_RCC_OscConfig+0x4c8>)
 8002a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1e:	f7fd fed3 	bl	80007c8 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a26:	f7fd fecf 	bl	80007c8 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b64      	cmp	r3, #100	; 0x64
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e103      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	4b75      	ldr	r3, [pc, #468]	; (8002c10 <HAL_RCC_OscConfig+0x4c8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d106      	bne.n	8002a5a <HAL_RCC_OscConfig+0x312>
 8002a4c:	4b6f      	ldr	r3, [pc, #444]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4a6e      	ldr	r2, [pc, #440]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6213      	str	r3, [r2, #32]
 8002a58:	e02d      	b.n	8002ab6 <HAL_RCC_OscConfig+0x36e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x334>
 8002a62:	4b6a      	ldr	r3, [pc, #424]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	4a69      	ldr	r2, [pc, #420]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	6213      	str	r3, [r2, #32]
 8002a6e:	4b67      	ldr	r3, [pc, #412]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	4a66      	ldr	r2, [pc, #408]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	f023 0304 	bic.w	r3, r3, #4
 8002a78:	6213      	str	r3, [r2, #32]
 8002a7a:	e01c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x36e>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d10c      	bne.n	8002a9e <HAL_RCC_OscConfig+0x356>
 8002a84:	4b61      	ldr	r3, [pc, #388]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4a60      	ldr	r2, [pc, #384]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	f043 0304 	orr.w	r3, r3, #4
 8002a8e:	6213      	str	r3, [r2, #32]
 8002a90:	4b5e      	ldr	r3, [pc, #376]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	4a5d      	ldr	r2, [pc, #372]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6213      	str	r3, [r2, #32]
 8002a9c:	e00b      	b.n	8002ab6 <HAL_RCC_OscConfig+0x36e>
 8002a9e:	4b5b      	ldr	r3, [pc, #364]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a5a      	ldr	r2, [pc, #360]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6213      	str	r3, [r2, #32]
 8002aaa:	4b58      	ldr	r3, [pc, #352]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4a57      	ldr	r2, [pc, #348]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d015      	beq.n	8002aea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7fd fe83 	bl	80007c8 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fd fe7f 	bl	80007c8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0b1      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002adc:	4b4b      	ldr	r3, [pc, #300]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ee      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x37e>
 8002ae8:	e014      	b.n	8002b14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aea:	f7fd fe6d 	bl	80007c8 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7fd fe69 	bl	80007c8 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e09b      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b08:	4b40      	ldr	r3, [pc, #256]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ee      	bne.n	8002af2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d105      	bne.n	8002b26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1a:	4b3c      	ldr	r3, [pc, #240]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	4a3b      	ldr	r2, [pc, #236]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8087 	beq.w	8002c3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b30:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d061      	beq.n	8002c00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d146      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	4b33      	ldr	r3, [pc, #204]	; (8002c14 <HAL_RCC_OscConfig+0x4cc>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7fd fe3d 	bl	80007c8 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b52:	f7fd fe39 	bl	80007c8 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e06d      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b64:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f0      	bne.n	8002b52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b78:	d108      	bne.n	8002b8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b7a:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	4921      	ldr	r1, [pc, #132]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a19      	ldr	r1, [r3, #32]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	491b      	ldr	r1, [pc, #108]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_RCC_OscConfig+0x4cc>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7fd fe0d 	bl	80007c8 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7fd fe09 	bl	80007c8 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e03d      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x46a>
 8002bd0:	e035      	b.n	8002c3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_RCC_OscConfig+0x4cc>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fd fdf6 	bl	80007c8 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be0:	f7fd fdf2 	bl	80007c8 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e026      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x498>
 8002bfe:	e01e      	b.n	8002c3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d107      	bne.n	8002c18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e019      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40007000 	.word	0x40007000
 8002c14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_OscConfig+0x500>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d001      	beq.n	8002c3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021000 	.word	0x40021000

08002c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0d0      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d910      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 0207 	bic.w	r2, r3, #7
 8002c76:	4965      	ldr	r1, [pc, #404]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0b8      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d020      	beq.n	8002cde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca8:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ccc:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	494d      	ldr	r1, [pc, #308]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d040      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d115      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e07f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e073      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e06b      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2a:	4b39      	ldr	r3, [pc, #228]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f023 0203 	bic.w	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4936      	ldr	r1, [pc, #216]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d3c:	f7fd fd44 	bl	80007c8 <HAL_GetTick>
 8002d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d44:	f7fd fd40 	bl	80007c8 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e053      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 020c 	and.w	r2, r3, #12
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d1eb      	bne.n	8002d44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b27      	ldr	r3, [pc, #156]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d210      	bcs.n	8002d9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 0207 	bic.w	r2, r3, #7
 8002d82:	4922      	ldr	r1, [pc, #136]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e032      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da8:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4916      	ldr	r1, [pc, #88]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	490e      	ldr	r1, [pc, #56]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dda:	f000 f821 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002dde:	4602      	mov	r2, r0
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	490a      	ldr	r1, [pc, #40]	; (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002dec:	5ccb      	ldrb	r3, [r1, r3]
 8002dee:	fa22 f303 	lsr.w	r3, r2, r3
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x1cc>)
 8002df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_ClockConfig+0x1d0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fd fca2 	bl	8000744 <HAL_InitTick>

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40022000 	.word	0x40022000
 8002e10:	40021000 	.word	0x40021000
 8002e14:	080081f4 	.word	0x080081f4
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	2000000c 	.word	0x2000000c

08002e20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e20:	b490      	push	{r4, r7}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e26:	4b29      	ldr	r3, [pc, #164]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xac>)
 8002e28:	1d3c      	adds	r4, r7, #4
 8002e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e30:	f240 2301 	movw	r3, #513	; 0x201
 8002e34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e4a:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d002      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x40>
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x46>
 8002e5e:	e02b      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e60:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e62:	623b      	str	r3, [r7, #32]
      break;
 8002e64:	e02b      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	0c9b      	lsrs	r3, r3, #18
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	3328      	adds	r3, #40	; 0x28
 8002e70:	443b      	add	r3, r7
 8002e72:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e76:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d012      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	0c5b      	lsrs	r3, r3, #17
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	3328      	adds	r3, #40	; 0x28
 8002e8e:	443b      	add	r3, r7
 8002e90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e94:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	4a0e      	ldr	r2, [pc, #56]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e9a:	fb03 f202 	mul.w	r2, r3, r2
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea6:	e004      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	4a0b      	ldr	r2, [pc, #44]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	623b      	str	r3, [r7, #32]
      break;
 8002eb6:	e002      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002eba:	623b      	str	r3, [r7, #32]
      break;
 8002ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3728      	adds	r7, #40	; 0x28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc90      	pop	{r4, r7}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	0800818c 	.word	0x0800818c
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	007a1200 	.word	0x007a1200
 8002ed8:	003d0900 	.word	0x003d0900

08002edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee0:	4b02      	ldr	r3, [pc, #8]	; (8002eec <HAL_RCC_GetHCLKFreq+0x10>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	20000000 	.word	0x20000000

08002ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ef4:	f7ff fff2 	bl	8002edc <HAL_RCC_GetHCLKFreq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	0adb      	lsrs	r3, r3, #11
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4903      	ldr	r1, [pc, #12]	; (8002f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000
 8002f14:	08008204 	.word	0x08008204

08002f18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f20:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <RCC_Delay+0x34>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <RCC_Delay+0x38>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0a5b      	lsrs	r3, r3, #9
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f34:	bf00      	nop
  }
  while (Delay --);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1e5a      	subs	r2, r3, #1
 8002f3a:	60fa      	str	r2, [r7, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f9      	bne.n	8002f34 <RCC_Delay+0x1c>
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	10624dd3 	.word	0x10624dd3

08002f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d07d      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f70:	2300      	movs	r3, #0
 8002f72:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f74:	4b4f      	ldr	r3, [pc, #316]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10d      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f80:	4b4c      	ldr	r3, [pc, #304]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	4a4b      	ldr	r2, [pc, #300]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	61d3      	str	r3, [r2, #28]
 8002f8c:	4b49      	ldr	r3, [pc, #292]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9c:	4b46      	ldr	r3, [pc, #280]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d118      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa8:	4b43      	ldr	r3, [pc, #268]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a42      	ldr	r2, [pc, #264]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb4:	f7fd fc08 	bl	80007c8 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fba:	e008      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbc:	f7fd fc04 	bl	80007c8 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	; 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e06d      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fce:	4b3a      	ldr	r3, [pc, #232]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fda:	4b36      	ldr	r3, [pc, #216]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d02e      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d027      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ff8:	4b2e      	ldr	r3, [pc, #184]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003000:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003002:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003008:	4b2c      	ldr	r3, [pc, #176]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800300e:	4a29      	ldr	r2, [pc, #164]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d014      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301e:	f7fd fbd3 	bl	80007c8 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003024:	e00a      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003026:	f7fd fbcf 	bl	80007c8 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	; 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e036      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303c:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0ee      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003048:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4917      	ldr	r1, [pc, #92]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003056:	4313      	orrs	r3, r2
 8003058:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800305a:	7dfb      	ldrb	r3, [r7, #23]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d105      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	4a13      	ldr	r2, [pc, #76]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003078:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	490b      	ldr	r1, [pc, #44]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003086:	4313      	orrs	r3, r2
 8003088:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b00      	cmp	r3, #0
 8003094:	d008      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	4904      	ldr	r1, [pc, #16]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40007000 	.word	0x40007000
 80030bc:	42420440 	.word	0x42420440

080030c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b08d      	sub	sp, #52	; 0x34
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030c8:	4b58      	ldr	r3, [pc, #352]	; (800322c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80030ca:	f107 040c 	add.w	r4, r7, #12
 80030ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030d4:	f240 2301 	movw	r3, #513	; 0x201
 80030d8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
 80030de:	2300      	movs	r3, #0
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030e2:	2300      	movs	r3, #0
 80030e4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	2300      	movs	r3, #0
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b10      	cmp	r3, #16
 80030f8:	f200 808e 	bhi.w	8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d049      	beq.n	8003196 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d079      	beq.n	80031fc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003108:	e086      	b.n	8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800310a:	4b49      	ldr	r3, [pc, #292]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003110:	4b47      	ldr	r3, [pc, #284]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d07f      	beq.n	800321c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	0c9b      	lsrs	r3, r3, #18
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	3330      	adds	r3, #48	; 0x30
 8003126:	443b      	add	r3, r7
 8003128:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800312c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d017      	beq.n	8003168 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003138:	4b3d      	ldr	r3, [pc, #244]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	0c5b      	lsrs	r3, r3, #17
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	3330      	adds	r3, #48	; 0x30
 8003144:	443b      	add	r3, r7
 8003146:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003156:	4a37      	ldr	r2, [pc, #220]	; (8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	fbb2 f2f3 	udiv	r2, r2, r3
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	fb02 f303 	mul.w	r3, r2, r3
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003166:	e004      	b.n	8003172 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	4a33      	ldr	r2, [pc, #204]	; (8003238 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003172:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800317e:	d102      	bne.n	8003186 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003184:	e04a      	b.n	800321c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4a2c      	ldr	r2, [pc, #176]	; (800323c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	085b      	lsrs	r3, r3, #1
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003194:	e042      	b.n	800321c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003196:	4b26      	ldr	r3, [pc, #152]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a6:	d108      	bne.n	80031ba <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80031b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031b8:	e01f      	b.n	80031fa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c4:	d109      	bne.n	80031da <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80031c6:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80031d2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d8:	e00f      	b.n	80031fa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031e4:	d11c      	bne.n	8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80031e6:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d016      	beq.n	8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80031f2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80031f8:	e012      	b.n	8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80031fa:	e011      	b.n	8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80031fc:	f7ff fe78 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	0b9b      	lsrs	r3, r3, #14
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	3301      	adds	r3, #1
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003216:	e004      	b.n	8003222 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003218:	bf00      	nop
 800321a:	e002      	b.n	8003222 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800321c:	bf00      	nop
 800321e:	e000      	b.n	8003222 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003220:	bf00      	nop
    }
  }
  return (frequency);
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003224:	4618      	mov	r0, r3
 8003226:	3734      	adds	r7, #52	; 0x34
 8003228:	46bd      	mov	sp, r7
 800322a:	bd90      	pop	{r4, r7, pc}
 800322c:	0800819c 	.word	0x0800819c
 8003230:	40021000 	.word	0x40021000
 8003234:	007a1200 	.word	0x007a1200
 8003238:	003d0900 	.word	0x003d0900
 800323c:	aaaaaaab 	.word	0xaaaaaaab

08003240 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e084      	b.n	8003360 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7c5b      	ldrb	r3, [r3, #17]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d105      	bne.n	800326c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fd f9b6 	bl	80005d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f87a 	bl	800336c <HAL_RTC_WaitForSynchro>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d004      	beq.n	8003288 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2204      	movs	r2, #4
 8003282:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e06b      	b.n	8003360 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f89c 	bl	80033c6 <RTC_EnterInitMode>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d004      	beq.n	800329e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2204      	movs	r2, #4
 8003298:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e060      	b.n	8003360 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0207 	bic.w	r2, r2, #7
 80032ac:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80032b6:	4b2c      	ldr	r3, [pc, #176]	; (8003368 <HAL_RTC_Init+0x128>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	4a2b      	ldr	r2, [pc, #172]	; (8003368 <HAL_RTC_Init+0x128>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80032c2:	4b29      	ldr	r3, [pc, #164]	; (8003368 <HAL_RTC_Init+0x128>)
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	4926      	ldr	r1, [pc, #152]	; (8003368 <HAL_RTC_Init+0x128>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d003      	beq.n	80032e6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	e00e      	b.n	8003304 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80032e6:	2001      	movs	r0, #1
 80032e8:	f7ff feea 	bl	80030c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80032ec:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d104      	bne.n	80032fe <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2204      	movs	r2, #4
 80032f8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e030      	b.n	8003360 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3b01      	subs	r3, #1
 8003302:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f023 010f 	bic.w	r1, r3, #15
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	0c1a      	lsrs	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	041b      	lsls	r3, r3, #16
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	b291      	uxth	r1, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	430b      	orrs	r3, r1
 800332e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f870 	bl	8003416 <RTC_ExitInitMode>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d004      	beq.n	8003346 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2204      	movs	r2, #4
 8003340:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e00c      	b.n	8003360 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800335e:	2300      	movs	r3, #0
  }
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40006c00 	.word	0x40006c00

0800336c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e01d      	b.n	80033be <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0208 	bic.w	r2, r2, #8
 8003390:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003392:	f7fd fa19 	bl	80007c8 <HAL_GetTick>
 8003396:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003398:	e009      	b.n	80033ae <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800339a:	f7fd fa15 	bl	80007c8 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033a8:	d901      	bls.n	80033ae <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e007      	b.n	80033be <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0ee      	beq.n	800339a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80033d2:	f7fd f9f9 	bl	80007c8 <HAL_GetTick>
 80033d6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80033d8:	e009      	b.n	80033ee <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80033da:	f7fd f9f5 	bl	80007c8 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033e8:	d901      	bls.n	80033ee <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e00f      	b.n	800340e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ee      	beq.n	80033da <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0210 	orr.w	r2, r2, #16
 800340a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0210 	bic.w	r2, r2, #16
 8003430:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003432:	f7fd f9c9 	bl	80007c8 <HAL_GetTick>
 8003436:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003438:	e009      	b.n	800344e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800343a:	f7fd f9c5 	bl	80007c8 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003448:	d901      	bls.n	800344e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e007      	b.n	800345e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0ee      	beq.n	800343a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8003478:	4b07      	ldr	r3, [pc, #28]	; (8003498 <HAL_RTCEx_BKUPWrite+0x30>)
 800347a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4413      	add	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	b292      	uxth	r2, r2
 800348c:	601a      	str	r2, [r3, #0]
}
 800348e:	bf00      	nop
 8003490:	371c      	adds	r7, #28
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr
 8003498:	40006c00 	.word	0x40006c00

0800349c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <HAL_RTCEx_BKUPRead+0x34>)
 80034b0:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4413      	add	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 80034c4:	68bb      	ldr	r3, [r7, #8]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr
 80034d0:	40006c00 	.word	0x40006c00

080034d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80034d4:	b084      	sub	sp, #16
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	f107 0014 	add.w	r0, r7, #20
 80034e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	b004      	add	sp, #16
 80034f2:	4770      	bx	lr

080034f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003504:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003508:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	b29a      	uxth	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003528:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800352c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	b29b      	uxth	r3, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	b29b      	uxth	r3, r3
 800353e:	4013      	ands	r3, r2
 8003540:	b29a      	uxth	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800356c:	b084      	sub	sp, #16
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	f107 0014 	add.w	r0, r7, #20
 800357a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	b004      	add	sp, #16
 80035aa:	4770      	bx	lr

080035ac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b09b      	sub	sp, #108	; 0x6c
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80035ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	78db      	ldrb	r3, [r3, #3]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d81f      	bhi.n	800361e <USB_ActivateEndpoint+0x72>
 80035de:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <USB_ActivateEndpoint+0x38>)
 80035e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e4:	080035f5 	.word	0x080035f5
 80035e8:	08003611 	.word	0x08003611
 80035ec:	08003627 	.word	0x08003627
 80035f0:	08003603 	.word	0x08003603
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80035f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80035f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035fc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003600:	e012      	b.n	8003628 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003602:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003606:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800360a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800360e:	e00b      	b.n	8003628 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003610:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003614:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003618:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800361c:	e004      	b.n	8003628 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003624:	e000      	b.n	8003628 <USB_ActivateEndpoint+0x7c>
      break;
 8003626:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	441a      	add	r2, r3
 8003632:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800363a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800363e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003646:	b29b      	uxth	r3, r3
 8003648:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800365c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003660:	b29a      	uxth	r2, r3
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b29b      	uxth	r3, r3
 8003668:	4313      	orrs	r3, r2
 800366a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	441a      	add	r2, r3
 8003678:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800367c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800368c:	b29b      	uxth	r3, r3
 800368e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	7b1b      	ldrb	r3, [r3, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f040 8149 	bne.w	800392c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	785b      	ldrb	r3, [r3, #1]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8084 	beq.w	80037ac <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	4413      	add	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	011a      	lsls	r2, r3, #4
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	88db      	ldrh	r3, [r3, #6]
 80036cc:	085b      	lsrs	r3, r3, #1
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	81fb      	strh	r3, [r7, #14]
 80036e6:	89fb      	ldrh	r3, [r7, #14]
 80036e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01b      	beq.n	8003728 <USB_ActivateEndpoint+0x17c>
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003706:	81bb      	strh	r3, [r7, #12]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	441a      	add	r2, r3
 8003712:	89bb      	ldrh	r3, [r7, #12]
 8003714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800371c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003720:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003724:	b29b      	uxth	r3, r3
 8003726:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	78db      	ldrb	r3, [r3, #3]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d020      	beq.n	8003772 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	b29b      	uxth	r3, r3
 800373e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003746:	813b      	strh	r3, [r7, #8]
 8003748:	893b      	ldrh	r3, [r7, #8]
 800374a:	f083 0320 	eor.w	r3, r3, #32
 800374e:	813b      	strh	r3, [r7, #8]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	441a      	add	r2, r3
 800375a:	893b      	ldrh	r3, [r7, #8]
 800375c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376c:	b29b      	uxth	r3, r3
 800376e:	8013      	strh	r3, [r2, #0]
 8003770:	e27f      	b.n	8003c72 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	b29b      	uxth	r3, r3
 8003780:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003788:	817b      	strh	r3, [r7, #10]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	441a      	add	r2, r3
 8003794:	897b      	ldrh	r3, [r7, #10]
 8003796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800379a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800379e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	8013      	strh	r3, [r2, #0]
 80037aa:	e262      	b.n	8003c72 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	4413      	add	r3, r2
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	011a      	lsls	r2, r3, #4
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	88db      	ldrh	r3, [r3, #6]
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	461a      	mov	r2, r3
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	4413      	add	r3, r2
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	011a      	lsls	r2, r3, #4
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	4413      	add	r3, r2
 80037fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003802:	623b      	str	r3, [r7, #32]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d112      	bne.n	8003832 <USB_ActivateEndpoint+0x286>
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003816:	b29a      	uxth	r2, r3
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	801a      	strh	r2, [r3, #0]
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	b29b      	uxth	r3, r3
 8003822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800382a:	b29a      	uxth	r2, r3
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	801a      	strh	r2, [r3, #0]
 8003830:	e02f      	b.n	8003892 <USB_ActivateEndpoint+0x2e6>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b3e      	cmp	r3, #62	; 0x3e
 8003838:	d813      	bhi.n	8003862 <USB_ActivateEndpoint+0x2b6>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	085b      	lsrs	r3, r3, #1
 8003840:	663b      	str	r3, [r7, #96]	; 0x60
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <USB_ActivateEndpoint+0x2a8>
 800384e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003850:	3301      	adds	r3, #1
 8003852:	663b      	str	r3, [r7, #96]	; 0x60
 8003854:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003856:	b29b      	uxth	r3, r3
 8003858:	029b      	lsls	r3, r3, #10
 800385a:	b29a      	uxth	r2, r3
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	801a      	strh	r2, [r3, #0]
 8003860:	e017      	b.n	8003892 <USB_ActivateEndpoint+0x2e6>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	663b      	str	r3, [r7, #96]	; 0x60
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	2b00      	cmp	r3, #0
 8003874:	d102      	bne.n	800387c <USB_ActivateEndpoint+0x2d0>
 8003876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003878:	3b01      	subs	r3, #1
 800387a:	663b      	str	r3, [r7, #96]	; 0x60
 800387c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800387e:	b29b      	uxth	r3, r3
 8003880:	029b      	lsls	r3, r3, #10
 8003882:	b29b      	uxth	r3, r3
 8003884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800388c:	b29a      	uxth	r2, r3
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	83fb      	strh	r3, [r7, #30]
 80038a0:	8bfb      	ldrh	r3, [r7, #30]
 80038a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d01b      	beq.n	80038e2 <USB_ActivateEndpoint+0x336>
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c0:	83bb      	strh	r3, [r7, #28]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	441a      	add	r2, r3
 80038cc:	8bbb      	ldrh	r3, [r7, #28]
 80038ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038de:	b29b      	uxth	r3, r3
 80038e0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f8:	837b      	strh	r3, [r7, #26]
 80038fa:	8b7b      	ldrh	r3, [r7, #26]
 80038fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003900:	837b      	strh	r3, [r7, #26]
 8003902:	8b7b      	ldrh	r3, [r7, #26]
 8003904:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003908:	837b      	strh	r3, [r7, #26]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	441a      	add	r2, r3
 8003914:	8b7b      	ldrh	r3, [r7, #26]
 8003916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800391a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800391e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003926:	b29b      	uxth	r3, r3
 8003928:	8013      	strh	r3, [r2, #0]
 800392a:	e1a2      	b.n	8003c72 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	b29b      	uxth	r3, r3
 800393a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003942:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800395c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003964:	b29b      	uxth	r3, r3
 8003966:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	65bb      	str	r3, [r7, #88]	; 0x58
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003972:	b29b      	uxth	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003978:	4413      	add	r3, r2
 800397a:	65bb      	str	r3, [r7, #88]	; 0x58
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	011a      	lsls	r2, r3, #4
 8003982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003984:	4413      	add	r3, r2
 8003986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800398a:	657b      	str	r3, [r7, #84]	; 0x54
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	891b      	ldrh	r3, [r3, #8]
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	b29b      	uxth	r3, r3
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800399a:	801a      	strh	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	653b      	str	r3, [r7, #80]	; 0x50
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ac:	4413      	add	r3, r2
 80039ae:	653b      	str	r3, [r7, #80]	; 0x50
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	011a      	lsls	r2, r3, #4
 80039b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80039be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	895b      	ldrh	r3, [r3, #10]
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ce:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	785b      	ldrb	r3, [r3, #1]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f040 8091 	bne.w	8003afc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80039e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80039ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d01b      	beq.n	8003a2a <USB_ActivateEndpoint+0x47e>
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a08:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	441a      	add	r2, r3
 8003a14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	873b      	strh	r3, [r7, #56]	; 0x38
 8003a38:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01b      	beq.n	8003a7a <USB_ActivateEndpoint+0x4ce>
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a58:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	441a      	add	r2, r3
 8003a64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a90:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003a92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a98:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003a9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003aa0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	441a      	add	r2, r3
 8003aac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad8:	867b      	strh	r3, [r7, #50]	; 0x32
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	441a      	add	r2, r3
 8003ae4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	8013      	strh	r3, [r2, #0]
 8003afa:	e0ba      	b.n	8003c72 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003b0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01d      	beq.n	8003b54 <USB_ActivateEndpoint+0x5a8>
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	441a      	add	r2, r3
 8003b3c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003b64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01d      	beq.n	8003bac <USB_ActivateEndpoint+0x600>
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	441a      	add	r2, r3
 8003b94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	78db      	ldrb	r3, [r3, #3]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d024      	beq.n	8003bfe <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003bce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bd2:	f083 0320 	eor.w	r3, r3, #32
 8003bd6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	441a      	add	r2, r3
 8003be4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	8013      	strh	r3, [r2, #0]
 8003bfc:	e01d      	b.n	8003c3a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c14:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	441a      	add	r2, r3
 8003c22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c50:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	441a      	add	r2, r3
 8003c5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003c72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	376c      	adds	r7, #108	; 0x6c
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b08d      	sub	sp, #52	; 0x34
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	7b1b      	ldrb	r3, [r3, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f040 808e 	bne.w	8003db0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	785b      	ldrb	r3, [r3, #1]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d044      	beq.n	8003d26 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	81bb      	strh	r3, [r7, #12]
 8003caa:	89bb      	ldrh	r3, [r7, #12]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01b      	beq.n	8003cec <USB_DeactivateEndpoint+0x6c>
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cca:	817b      	strh	r3, [r7, #10]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	441a      	add	r2, r3
 8003cd6:	897b      	ldrh	r3, [r7, #10]
 8003cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d02:	813b      	strh	r3, [r7, #8]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	441a      	add	r2, r3
 8003d0e:	893b      	ldrh	r3, [r7, #8]
 8003d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	8013      	strh	r3, [r2, #0]
 8003d24:	e192      	b.n	800404c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	827b      	strh	r3, [r7, #18]
 8003d34:	8a7b      	ldrh	r3, [r7, #18]
 8003d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01b      	beq.n	8003d76 <USB_DeactivateEndpoint+0xf6>
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d54:	823b      	strh	r3, [r7, #16]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	441a      	add	r2, r3
 8003d60:	8a3b      	ldrh	r3, [r7, #16]
 8003d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8c:	81fb      	strh	r3, [r7, #14]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	441a      	add	r2, r3
 8003d98:	89fb      	ldrh	r3, [r7, #14]
 8003d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	8013      	strh	r3, [r2, #0]
 8003dae:	e14d      	b.n	800404c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	785b      	ldrb	r3, [r3, #1]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f040 80a5 	bne.w	8003f04 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	843b      	strh	r3, [r7, #32]
 8003dc8:	8c3b      	ldrh	r3, [r7, #32]
 8003dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d01b      	beq.n	8003e0a <USB_DeactivateEndpoint+0x18a>
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de8:	83fb      	strh	r3, [r7, #30]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	441a      	add	r2, r3
 8003df4:	8bfb      	ldrh	r3, [r7, #30]
 8003df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	83bb      	strh	r3, [r7, #28]
 8003e18:	8bbb      	ldrh	r3, [r7, #28]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01b      	beq.n	8003e5a <USB_DeactivateEndpoint+0x1da>
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e38:	837b      	strh	r3, [r7, #26]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	441a      	add	r2, r3
 8003e44:	8b7b      	ldrh	r3, [r7, #26]
 8003e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e70:	833b      	strh	r3, [r7, #24]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	441a      	add	r2, r3
 8003e7c:	8b3b      	ldrh	r3, [r7, #24]
 8003e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea8:	82fb      	strh	r3, [r7, #22]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	441a      	add	r2, r3
 8003eb4:	8afb      	ldrh	r3, [r7, #22]
 8003eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ee0:	82bb      	strh	r3, [r7, #20]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	441a      	add	r2, r3
 8003eec:	8abb      	ldrh	r3, [r7, #20]
 8003eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	8013      	strh	r3, [r2, #0]
 8003f02:	e0a3      	b.n	800404c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01b      	beq.n	8003f54 <USB_DeactivateEndpoint+0x2d4>
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	441a      	add	r2, r3
 8003f3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003f62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01b      	beq.n	8003fa4 <USB_DeactivateEndpoint+0x324>
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f82:	853b      	strh	r3, [r7, #40]	; 0x28
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	441a      	add	r2, r3
 8003f8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fba:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	441a      	add	r2, r3
 8003fc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	441a      	add	r2, r3
 8003ffe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800400c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004010:	b29b      	uxth	r3, r3
 8004012:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	847b      	strh	r3, [r7, #34]	; 0x22
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	441a      	add	r2, r3
 8004036:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800403c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004048:	b29b      	uxth	r3, r3
 800404a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3734      	adds	r7, #52	; 0x34
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b0cc      	sub	sp, #304	; 0x130
 800405c:	af00      	add	r7, sp, #0
 800405e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004062:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004066:	6018      	str	r0, [r3, #0]
 8004068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800406c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004070:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	785b      	ldrb	r3, [r3, #1]
 800407e:	2b01      	cmp	r3, #1
 8004080:	f041 817d 	bne.w	800537e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004088:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699a      	ldr	r2, [r3, #24]
 8004090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004094:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	429a      	cmp	r2, r3
 800409e:	d908      	bls.n	80040b2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80040a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80040b0:	e007      	b.n	80040c2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80040b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80040c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	7b1b      	ldrb	r3, [r3, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d152      	bne.n	8004178 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80040d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6959      	ldr	r1, [r3, #20]
 80040de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	88da      	ldrh	r2, [r3, #6]
 80040ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80040f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80040f8:	6800      	ldr	r0, [r0, #0]
 80040fa:	f001 ff23 	bl	8005f44 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80040fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004102:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004106:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800410a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004116:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004120:	b29b      	uxth	r3, r3
 8004122:	4619      	mov	r1, r3
 8004124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004128:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800412c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004130:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	440a      	add	r2, r1
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800413e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	011a      	lsls	r2, r3, #4
 8004148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800414c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4413      	add	r3, r2
 8004154:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800415c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004166:	b29a      	uxth	r2, r3
 8004168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800416c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	801a      	strh	r2, [r3, #0]
 8004174:	f001 b8b5 	b.w	80052e2 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800417c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	78db      	ldrb	r3, [r3, #3]
 8004184:	2b02      	cmp	r3, #2
 8004186:	f040 84c6 	bne.w	8004b16 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800418a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800418e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6a1a      	ldr	r2, [r3, #32]
 8004196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800419a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	f240 8443 	bls.w	8004a2e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80041a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80041d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	441a      	add	r2, r3
 80041ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80041f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80041fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004200:	b29b      	uxth	r3, r3
 8004202:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004208:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6a1a      	ldr	r2, [r3, #32]
 8004210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004214:	1ad2      	subs	r2, r2, r3
 8004216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800421a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 823e 	beq.w	80046c6 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800424a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800424e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004252:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004256:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	785b      	ldrb	r3, [r3, #1]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f040 809a 	bne.w	80043a4 <USB_EPStartXfer+0x34c>
 8004270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004278:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800427c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004288:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004292:	b29b      	uxth	r3, r3
 8004294:	4619      	mov	r1, r3
 8004296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800429a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800429e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80042a2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	440a      	add	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	011a      	lsls	r2, r3, #4
 80042ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4413      	add	r3, r2
 80042c6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80042ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d122      	bne.n	8004322 <USB_EPStartXfer+0x2ca>
 80042dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	801a      	strh	r2, [r3, #0]
 80042fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004300:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004312:	b29a      	uxth	r2, r3
 8004314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004318:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	801a      	strh	r2, [r3, #0]
 8004320:	e079      	b.n	8004416 <USB_EPStartXfer+0x3be>
 8004322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004326:	2b3e      	cmp	r3, #62	; 0x3e
 8004328:	d81b      	bhi.n	8004362 <USB_EPStartXfer+0x30a>
 800432a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800432e:	085b      	lsrs	r3, r3, #1
 8004330:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d004      	beq.n	800434a <USB_EPStartXfer+0x2f2>
 8004340:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004344:	3301      	adds	r3, #1
 8004346:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800434a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800434e:	b29b      	uxth	r3, r3
 8004350:	029b      	lsls	r3, r3, #10
 8004352:	b29a      	uxth	r2, r3
 8004354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004358:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	801a      	strh	r2, [r3, #0]
 8004360:	e059      	b.n	8004416 <USB_EPStartXfer+0x3be>
 8004362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800436c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	2b00      	cmp	r3, #0
 8004376:	d104      	bne.n	8004382 <USB_EPStartXfer+0x32a>
 8004378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800437c:	3b01      	subs	r3, #1
 800437e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004382:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004386:	b29b      	uxth	r3, r3
 8004388:	029b      	lsls	r3, r3, #10
 800438a:	b29b      	uxth	r3, r3
 800438c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004394:	b29a      	uxth	r2, r3
 8004396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800439a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	801a      	strh	r2, [r3, #0]
 80043a2:	e038      	b.n	8004416 <USB_EPStartXfer+0x3be>
 80043a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	785b      	ldrb	r3, [r3, #1]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d130      	bne.n	8004416 <USB_EPStartXfer+0x3be>
 80043b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	4619      	mov	r1, r3
 80043c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043ca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80043ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80043d2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	440a      	add	r2, r1
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	011a      	lsls	r2, r3, #4
 80043ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043ee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4413      	add	r3, r2
 80043f6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80043fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004408:	b29a      	uxth	r2, r3
 800440a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800440e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800441a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	895b      	ldrh	r3, [r3, #10]
 8004422:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800442a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6959      	ldr	r1, [r3, #20]
 8004432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004436:	b29b      	uxth	r3, r3
 8004438:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800443c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004440:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004444:	6800      	ldr	r0, [r0, #0]
 8004446:	f001 fd7d 	bl	8005f44 <USB_WritePMA>
            ep->xfer_buff += len;
 800444a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800444e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800445a:	441a      	add	r2, r3
 800445c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800446c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6a1a      	ldr	r2, [r3, #32]
 8004474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	429a      	cmp	r2, r3
 8004482:	d90f      	bls.n	80044a4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004494:	1ad2      	subs	r2, r2, r3
 8004496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800449a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	621a      	str	r2, [r3, #32]
 80044a2:	e00e      	b.n	80044c2 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80044a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80044b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2200      	movs	r2, #0
 80044c0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80044c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	785b      	ldrb	r3, [r3, #1]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f040 809a 	bne.w	8004608 <USB_EPStartXfer+0x5b0>
 80044d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80044dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80044e0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80044e4:	6812      	ldr	r2, [r2, #0]
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	4619      	mov	r1, r3
 80044fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004502:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004506:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	440a      	add	r2, r1
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	011a      	lsls	r2, r3, #4
 800451e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004522:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4413      	add	r3, r2
 800452a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800452e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004532:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d122      	bne.n	8004586 <USB_EPStartXfer+0x52e>
 8004540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004544:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004552:	b29a      	uxth	r2, r3
 8004554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004558:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	801a      	strh	r2, [r3, #0]
 8004560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004564:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004576:	b29a      	uxth	r2, r3
 8004578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800457c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	801a      	strh	r2, [r3, #0]
 8004584:	e083      	b.n	800468e <USB_EPStartXfer+0x636>
 8004586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800458a:	2b3e      	cmp	r3, #62	; 0x3e
 800458c:	d81b      	bhi.n	80045c6 <USB_EPStartXfer+0x56e>
 800458e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d004      	beq.n	80045ae <USB_EPStartXfer+0x556>
 80045a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80045a8:	3301      	adds	r3, #1
 80045aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80045ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	029b      	lsls	r3, r3, #10
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	801a      	strh	r2, [r3, #0]
 80045c4:	e063      	b.n	800468e <USB_EPStartXfer+0x636>
 80045c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80045d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d104      	bne.n	80045e6 <USB_EPStartXfer+0x58e>
 80045dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80045e0:	3b01      	subs	r3, #1
 80045e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80045e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	029b      	lsls	r3, r3, #10
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	801a      	strh	r2, [r3, #0]
 8004606:	e042      	b.n	800468e <USB_EPStartXfer+0x636>
 8004608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800460c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	785b      	ldrb	r3, [r3, #1]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d13a      	bne.n	800468e <USB_EPStartXfer+0x636>
 8004618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800461c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004620:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004624:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004630:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800463a:	b29b      	uxth	r3, r3
 800463c:	4619      	mov	r1, r3
 800463e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004642:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004646:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800464a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	440a      	add	r2, r1
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004658:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	011a      	lsls	r2, r3, #4
 8004662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004666:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4413      	add	r3, r2
 800466e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004676:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004680:	b29a      	uxth	r2, r3
 8004682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004686:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800468e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	891b      	ldrh	r3, [r3, #8]
 800469a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800469e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6959      	ldr	r1, [r3, #20]
 80046aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80046b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80046b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80046bc:	6800      	ldr	r0, [r0, #0]
 80046be:	f001 fc41 	bl	8005f44 <USB_WritePMA>
 80046c2:	f000 be0e 	b.w	80052e2 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80046c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	785b      	ldrb	r3, [r3, #1]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d16d      	bne.n	80047b2 <USB_EPStartXfer+0x75a>
 80046d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80046e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f6:	4413      	add	r3, r2
 80046f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80046fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	011a      	lsls	r2, r3, #4
 8004708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800470a:	4413      	add	r3, r2
 800470c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004710:	647b      	str	r3, [r7, #68]	; 0x44
 8004712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004716:	2b00      	cmp	r3, #0
 8004718:	d112      	bne.n	8004740 <USB_EPStartXfer+0x6e8>
 800471a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004724:	b29a      	uxth	r2, r3
 8004726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004728:	801a      	strh	r2, [r3, #0]
 800472a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	b29b      	uxth	r3, r3
 8004730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004738:	b29a      	uxth	r2, r3
 800473a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800473c:	801a      	strh	r2, [r3, #0]
 800473e:	e063      	b.n	8004808 <USB_EPStartXfer+0x7b0>
 8004740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004744:	2b3e      	cmp	r3, #62	; 0x3e
 8004746:	d817      	bhi.n	8004778 <USB_EPStartXfer+0x720>
 8004748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d004      	beq.n	8004768 <USB_EPStartXfer+0x710>
 800475e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004762:	3301      	adds	r3, #1
 8004764:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004768:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800476c:	b29b      	uxth	r3, r3
 800476e:	029b      	lsls	r3, r3, #10
 8004770:	b29a      	uxth	r2, r3
 8004772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004774:	801a      	strh	r2, [r3, #0]
 8004776:	e047      	b.n	8004808 <USB_EPStartXfer+0x7b0>
 8004778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	2b00      	cmp	r3, #0
 800478c:	d104      	bne.n	8004798 <USB_EPStartXfer+0x740>
 800478e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004792:	3b01      	subs	r3, #1
 8004794:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004798:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800479c:	b29b      	uxth	r3, r3
 800479e:	029b      	lsls	r3, r3, #10
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ae:	801a      	strh	r2, [r3, #0]
 80047b0:	e02a      	b.n	8004808 <USB_EPStartXfer+0x7b0>
 80047b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	785b      	ldrb	r3, [r3, #1]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d122      	bne.n	8004808 <USB_EPStartXfer+0x7b0>
 80047c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	653b      	str	r3, [r7, #80]	; 0x50
 80047ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047dc:	b29b      	uxth	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e2:	4413      	add	r3, r2
 80047e4:	653b      	str	r3, [r7, #80]	; 0x50
 80047e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	011a      	lsls	r2, r3, #4
 80047f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f6:	4413      	add	r3, r2
 80047f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004802:	b29a      	uxth	r2, r3
 8004804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004806:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800480c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	891b      	ldrh	r3, [r3, #8]
 8004814:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6959      	ldr	r1, [r3, #20]
 8004824:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004828:	b29b      	uxth	r3, r3
 800482a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800482e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004832:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004836:	6800      	ldr	r0, [r0, #0]
 8004838:	f001 fb84 	bl	8005f44 <USB_WritePMA>
            ep->xfer_buff += len;
 800483c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695a      	ldr	r2, [r3, #20]
 8004848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800484c:	441a      	add	r2, r3
 800484e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800485a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800485e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6a1a      	ldr	r2, [r3, #32]
 8004866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800486a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	429a      	cmp	r2, r3
 8004874:	d90f      	bls.n	8004896 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800487a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6a1a      	ldr	r2, [r3, #32]
 8004882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004886:	1ad2      	subs	r2, r2, r3
 8004888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800488c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	621a      	str	r2, [r3, #32]
 8004894:	e00e      	b.n	80048b4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800489a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80048a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2200      	movs	r2, #0
 80048b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80048b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	643b      	str	r3, [r7, #64]	; 0x40
 80048c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d16d      	bne.n	80049ac <USB_EPStartXfer+0x954>
 80048d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	63bb      	str	r3, [r7, #56]	; 0x38
 80048dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f0:	4413      	add	r3, r2
 80048f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	011a      	lsls	r2, r3, #4
 8004902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004904:	4413      	add	r3, r2
 8004906:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800490a:	637b      	str	r3, [r7, #52]	; 0x34
 800490c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d112      	bne.n	800493a <USB_EPStartXfer+0x8e2>
 8004914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	b29b      	uxth	r3, r3
 800491a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800491e:	b29a      	uxth	r2, r3
 8004920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004922:	801a      	strh	r2, [r3, #0]
 8004924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	b29b      	uxth	r3, r3
 800492a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800492e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004932:	b29a      	uxth	r2, r3
 8004934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004936:	801a      	strh	r2, [r3, #0]
 8004938:	e05d      	b.n	80049f6 <USB_EPStartXfer+0x99e>
 800493a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800493e:	2b3e      	cmp	r3, #62	; 0x3e
 8004940:	d817      	bhi.n	8004972 <USB_EPStartXfer+0x91a>
 8004942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800494c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d004      	beq.n	8004962 <USB_EPStartXfer+0x90a>
 8004958:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800495c:	3301      	adds	r3, #1
 800495e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004962:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004966:	b29b      	uxth	r3, r3
 8004968:	029b      	lsls	r3, r3, #10
 800496a:	b29a      	uxth	r2, r3
 800496c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496e:	801a      	strh	r2, [r3, #0]
 8004970:	e041      	b.n	80049f6 <USB_EPStartXfer+0x99e>
 8004972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800497c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004980:	f003 031f 	and.w	r3, r3, #31
 8004984:	2b00      	cmp	r3, #0
 8004986:	d104      	bne.n	8004992 <USB_EPStartXfer+0x93a>
 8004988:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800498c:	3b01      	subs	r3, #1
 800498e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004992:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004996:	b29b      	uxth	r3, r3
 8004998:	029b      	lsls	r3, r3, #10
 800499a:	b29b      	uxth	r3, r3
 800499c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a8:	801a      	strh	r2, [r3, #0]
 80049aa:	e024      	b.n	80049f6 <USB_EPStartXfer+0x99e>
 80049ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	785b      	ldrb	r3, [r3, #1]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d11c      	bne.n	80049f6 <USB_EPStartXfer+0x99e>
 80049bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	461a      	mov	r2, r3
 80049ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d0:	4413      	add	r3, r2
 80049d2:	643b      	str	r3, [r7, #64]	; 0x40
 80049d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	011a      	lsls	r2, r3, #4
 80049e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e4:	4413      	add	r3, r2
 80049e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80049f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	895b      	ldrh	r3, [r3, #10]
 8004a02:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6959      	ldr	r1, [r3, #20]
 8004a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a1c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a20:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a24:	6800      	ldr	r0, [r0, #0]
 8004a26:	f001 fa8d 	bl	8005f44 <USB_WritePMA>
 8004a2a:	f000 bc5a 	b.w	80052e2 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a64:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	441a      	add	r2, r3
 8004a82:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aba:	4413      	add	r3, r2
 8004abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	011a      	lsls	r2, r3, #4
 8004acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ace:	4413      	add	r3, r2
 8004ad0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ad4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ade:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ae4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	891b      	ldrh	r3, [r3, #8]
 8004aec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6959      	ldr	r1, [r3, #20]
 8004afc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b06:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004b0a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004b0e:	6800      	ldr	r0, [r0, #0]
 8004b10:	f001 fa18 	bl	8005f44 <USB_WritePMA>
 8004b14:	e3e5      	b.n	80052e2 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b66:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6a1a      	ldr	r2, [r3, #32]
 8004b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b82:	1ad2      	subs	r2, r2, r3
 8004b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 81bc 	beq.w	8004f30 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	785b      	ldrb	r3, [r3, #1]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d16d      	bne.n	8004cb2 <USB_EPStartXfer+0xc5a>
 8004bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bf6:	4413      	add	r3, r2
 8004bf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	011a      	lsls	r2, r3, #4
 8004c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c10:	677b      	str	r3, [r7, #116]	; 0x74
 8004c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d112      	bne.n	8004c40 <USB_EPStartXfer+0xbe8>
 8004c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c28:	801a      	strh	r2, [r3, #0]
 8004c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c3c:	801a      	strh	r2, [r3, #0]
 8004c3e:	e060      	b.n	8004d02 <USB_EPStartXfer+0xcaa>
 8004c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c44:	2b3e      	cmp	r3, #62	; 0x3e
 8004c46:	d817      	bhi.n	8004c78 <USB_EPStartXfer+0xc20>
 8004c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c4c:	085b      	lsrs	r3, r3, #1
 8004c4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <USB_EPStartXfer+0xc10>
 8004c5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004c62:	3301      	adds	r3, #1
 8004c64:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004c68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	029b      	lsls	r3, r3, #10
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c74:	801a      	strh	r2, [r3, #0]
 8004c76:	e044      	b.n	8004d02 <USB_EPStartXfer+0xcaa>
 8004c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c86:	f003 031f 	and.w	r3, r3, #31
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d104      	bne.n	8004c98 <USB_EPStartXfer+0xc40>
 8004c8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004c92:	3b01      	subs	r3, #1
 8004c94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004c98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	029b      	lsls	r3, r3, #10
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cae:	801a      	strh	r2, [r3, #0]
 8004cb0:	e027      	b.n	8004d02 <USB_EPStartXfer+0xcaa>
 8004cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	785b      	ldrb	r3, [r3, #1]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d11f      	bne.n	8004d02 <USB_EPStartXfer+0xcaa>
 8004cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cd8:	4413      	add	r3, r2
 8004cda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	011a      	lsls	r2, r3, #4
 8004cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d00:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	895b      	ldrh	r3, [r3, #10]
 8004d0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6959      	ldr	r1, [r3, #20]
 8004d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d28:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d2c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d30:	6800      	ldr	r0, [r0, #0]
 8004d32:	f001 f907 	bl	8005f44 <USB_WritePMA>
          ep->xfer_buff += len;
 8004d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d46:	441a      	add	r2, r3
 8004d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6a1a      	ldr	r2, [r3, #32]
 8004d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d90f      	bls.n	8004d90 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8004d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6a1a      	ldr	r2, [r3, #32]
 8004d7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d80:	1ad2      	subs	r2, r2, r3
 8004d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	621a      	str	r2, [r3, #32]
 8004d8e:	e00e      	b.n	8004dae <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8004d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2200      	movs	r2, #0
 8004dac:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 8295 	beq.w	80052e2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d16d      	bne.n	8004ea4 <USB_EPStartXfer+0xe4c>
 8004dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	461a      	mov	r2, r3
 8004de6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004de8:	4413      	add	r3, r2
 8004dea:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	011a      	lsls	r2, r3, #4
 8004dfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e02:	667b      	str	r3, [r7, #100]	; 0x64
 8004e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d112      	bne.n	8004e32 <USB_EPStartXfer+0xdda>
 8004e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e1a:	801a      	strh	r2, [r3, #0]
 8004e1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e2e:	801a      	strh	r2, [r3, #0]
 8004e30:	e063      	b.n	8004efa <USB_EPStartXfer+0xea2>
 8004e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e36:	2b3e      	cmp	r3, #62	; 0x3e
 8004e38:	d817      	bhi.n	8004e6a <USB_EPStartXfer+0xe12>
 8004e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e3e:	085b      	lsrs	r3, r3, #1
 8004e40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <USB_EPStartXfer+0xe02>
 8004e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e54:	3301      	adds	r3, #1
 8004e56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	029b      	lsls	r3, r3, #10
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e66:	801a      	strh	r2, [r3, #0]
 8004e68:	e047      	b.n	8004efa <USB_EPStartXfer+0xea2>
 8004e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d104      	bne.n	8004e8a <USB_EPStartXfer+0xe32>
 8004e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e84:	3b01      	subs	r3, #1
 8004e86:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	029b      	lsls	r3, r3, #10
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ea0:	801a      	strh	r2, [r3, #0]
 8004ea2:	e02a      	b.n	8004efa <USB_EPStartXfer+0xea2>
 8004ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	785b      	ldrb	r3, [r3, #1]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d122      	bne.n	8004efa <USB_EPStartXfer+0xea2>
 8004eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	673b      	str	r3, [r7, #112]	; 0x70
 8004ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ed4:	4413      	add	r3, r2
 8004ed6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	011a      	lsls	r2, r3, #4
 8004ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ee8:	4413      	add	r3, r2
 8004eea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004eee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	891b      	ldrh	r3, [r3, #8]
 8004f06:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6959      	ldr	r1, [r3, #20]
 8004f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004f20:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004f24:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004f28:	6800      	ldr	r0, [r0, #0]
 8004f2a:	f001 f80b 	bl	8005f44 <USB_WritePMA>
 8004f2e:	e1d8      	b.n	80052e2 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	785b      	ldrb	r3, [r3, #1]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d178      	bne.n	8005032 <USB_EPStartXfer+0xfda>
 8004f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f64:	4413      	add	r3, r2
 8004f66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	011a      	lsls	r2, r3, #4
 8004f78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d116      	bne.n	8004fbc <USB_EPStartXfer+0xf64>
 8004f8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fa0:	801a      	strh	r2, [r3, #0]
 8004fa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fb8:	801a      	strh	r2, [r3, #0]
 8004fba:	e06b      	b.n	8005094 <USB_EPStartXfer+0x103c>
 8004fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc0:	2b3e      	cmp	r3, #62	; 0x3e
 8004fc2:	d818      	bhi.n	8004ff6 <USB_EPStartXfer+0xf9e>
 8004fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc8:	085b      	lsrs	r3, r3, #1
 8004fca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d004      	beq.n	8004fe4 <USB_EPStartXfer+0xf8c>
 8004fda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004fde:	3301      	adds	r3, #1
 8004fe0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004fe4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	029b      	lsls	r3, r3, #10
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ff2:	801a      	strh	r2, [r3, #0]
 8004ff4:	e04e      	b.n	8005094 <USB_EPStartXfer+0x103c>
 8004ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ffa:	095b      	lsrs	r3, r3, #5
 8004ffc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	2b00      	cmp	r3, #0
 800500a:	d104      	bne.n	8005016 <USB_EPStartXfer+0xfbe>
 800500c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005010:	3b01      	subs	r3, #1
 8005012:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005016:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800501a:	b29b      	uxth	r3, r3
 800501c:	029b      	lsls	r3, r3, #10
 800501e:	b29b      	uxth	r3, r3
 8005020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005028:	b29a      	uxth	r2, r3
 800502a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	e030      	b.n	8005094 <USB_EPStartXfer+0x103c>
 8005032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005036:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	785b      	ldrb	r3, [r3, #1]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d128      	bne.n	8005094 <USB_EPStartXfer+0x103c>
 8005042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005046:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005054:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800505e:	b29b      	uxth	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005066:	4413      	add	r3, r2
 8005068:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800506c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	011a      	lsls	r2, r3, #4
 800507a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800507e:	4413      	add	r3, r2
 8005080:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005084:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800508c:	b29a      	uxth	r2, r3
 800508e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005092:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	891b      	ldrh	r3, [r3, #8]
 80050a0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6959      	ldr	r1, [r3, #20]
 80050b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80050ba:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80050be:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80050c2:	6800      	ldr	r0, [r0, #0]
 80050c4:	f000 ff3e 	bl	8005f44 <USB_WritePMA>
          ep->xfer_buff += len;
 80050c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695a      	ldr	r2, [r3, #20]
 80050d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d8:	441a      	add	r2, r3
 80050da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80050e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6a1a      	ldr	r2, [r3, #32]
 80050f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d90f      	bls.n	8005122 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6a1a      	ldr	r2, [r3, #32]
 800510e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005112:	1ad2      	subs	r2, r2, r3
 8005114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	621a      	str	r2, [r3, #32]
 8005120:	e00e      	b.n	8005140 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2200      	movs	r2, #0
 800513e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 80cc 	beq.w	80052e2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800514a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	785b      	ldrb	r3, [r3, #1]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d178      	bne.n	800525a <USB_EPStartXfer+0x1202>
 8005168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005184:	b29b      	uxth	r3, r3
 8005186:	461a      	mov	r2, r3
 8005188:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800518c:	4413      	add	r3, r2
 800518e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	011a      	lsls	r2, r3, #4
 80051a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051a4:	4413      	add	r3, r2
 80051a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d116      	bne.n	80051e4 <USB_EPStartXfer+0x118c>
 80051b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051c8:	801a      	strh	r2, [r3, #0]
 80051ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051da:	b29a      	uxth	r2, r3
 80051dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	e064      	b.n	80052ae <USB_EPStartXfer+0x1256>
 80051e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e8:	2b3e      	cmp	r3, #62	; 0x3e
 80051ea:	d818      	bhi.n	800521e <USB_EPStartXfer+0x11c6>
 80051ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f0:	085b      	lsrs	r3, r3, #1
 80051f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80051f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d004      	beq.n	800520c <USB_EPStartXfer+0x11b4>
 8005202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005206:	3301      	adds	r3, #1
 8005208:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800520c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005210:	b29b      	uxth	r3, r3
 8005212:	029b      	lsls	r3, r3, #10
 8005214:	b29a      	uxth	r2, r3
 8005216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800521a:	801a      	strh	r2, [r3, #0]
 800521c:	e047      	b.n	80052ae <USB_EPStartXfer+0x1256>
 800521e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	2b00      	cmp	r3, #0
 8005232:	d104      	bne.n	800523e <USB_EPStartXfer+0x11e6>
 8005234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005238:	3b01      	subs	r3, #1
 800523a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800523e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005242:	b29b      	uxth	r3, r3
 8005244:	029b      	lsls	r3, r3, #10
 8005246:	b29b      	uxth	r3, r3
 8005248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005250:	b29a      	uxth	r2, r3
 8005252:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	e029      	b.n	80052ae <USB_EPStartXfer+0x1256>
 800525a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	785b      	ldrb	r3, [r3, #1]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d121      	bne.n	80052ae <USB_EPStartXfer+0x1256>
 800526a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005278:	b29b      	uxth	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005280:	4413      	add	r3, r2
 8005282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	011a      	lsls	r2, r3, #4
 8005294:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005298:	4413      	add	r3, r2
 800529a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800529e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80052ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	895b      	ldrh	r3, [r3, #10]
 80052ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6959      	ldr	r1, [r3, #20]
 80052ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80052d4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80052d8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80052dc:	6800      	ldr	r0, [r0, #0]
 80052de:	f000 fe31 	bl	8005f44 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80052e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005304:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005310:	8013      	strh	r3, [r2, #0]
 8005312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005316:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800531a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800531e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005322:	8812      	ldrh	r2, [r2, #0]
 8005324:	f082 0210 	eor.w	r2, r2, #16
 8005328:	801a      	strh	r2, [r3, #0]
 800532a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800532e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005332:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005336:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800533a:	8812      	ldrh	r2, [r2, #0]
 800533c:	f082 0220 	eor.w	r2, r2, #32
 8005340:	801a      	strh	r2, [r3, #0]
 8005342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005346:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	441a      	add	r2, r3
 800535c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005360:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800536a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800536e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005376:	b29b      	uxth	r3, r3
 8005378:	8013      	strh	r3, [r2, #0]
 800537a:	f000 bc9f 	b.w	8005cbc <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800537e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	7b1b      	ldrb	r3, [r3, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	f040 80ae 	bne.w	80054ec <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	699a      	ldr	r2, [r3, #24]
 800539c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d917      	bls.n	80053dc <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80053ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80053bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699a      	ldr	r2, [r3, #24]
 80053c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053cc:	1ad2      	subs	r2, r2, r3
 80053ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	619a      	str	r2, [r3, #24]
 80053da:	e00e      	b.n	80053fa <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80053dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80053ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2200      	movs	r2, #0
 80053f8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80053fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005416:	b29b      	uxth	r3, r3
 8005418:	461a      	mov	r2, r3
 800541a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800541e:	4413      	add	r3, r2
 8005420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005428:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	011a      	lsls	r2, r3, #4
 8005432:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005436:	4413      	add	r3, r2
 8005438:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800543c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005444:	2b00      	cmp	r3, #0
 8005446:	d116      	bne.n	8005476 <USB_EPStartXfer+0x141e>
 8005448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005454:	b29a      	uxth	r2, r3
 8005456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800545a:	801a      	strh	r2, [r3, #0]
 800545c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800546c:	b29a      	uxth	r2, r3
 800546e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005472:	801a      	strh	r2, [r3, #0]
 8005474:	e3e8      	b.n	8005c48 <USB_EPStartXfer+0x1bf0>
 8005476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800547a:	2b3e      	cmp	r3, #62	; 0x3e
 800547c:	d818      	bhi.n	80054b0 <USB_EPStartXfer+0x1458>
 800547e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d004      	beq.n	800549e <USB_EPStartXfer+0x1446>
 8005494:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005498:	3301      	adds	r3, #1
 800549a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800549e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	029b      	lsls	r3, r3, #10
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054ac:	801a      	strh	r2, [r3, #0]
 80054ae:	e3cb      	b.n	8005c48 <USB_EPStartXfer+0x1bf0>
 80054b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80054ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054be:	f003 031f 	and.w	r3, r3, #31
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d104      	bne.n	80054d0 <USB_EPStartXfer+0x1478>
 80054c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054ca:	3b01      	subs	r3, #1
 80054cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80054d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	029b      	lsls	r3, r3, #10
 80054d8:	b29b      	uxth	r3, r3
 80054da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054e8:	801a      	strh	r2, [r3, #0]
 80054ea:	e3ad      	b.n	8005c48 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80054ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	78db      	ldrb	r3, [r3, #3]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	f040 8200 	bne.w	80058fe <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80054fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 8091 	bne.w	8005632 <USB_EPStartXfer+0x15da>
 8005510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005514:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800551e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005522:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800552c:	b29b      	uxth	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005534:	4413      	add	r3, r2
 8005536:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800553a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	011a      	lsls	r2, r3, #4
 8005548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800554c:	4413      	add	r3, r2
 800554e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005552:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d116      	bne.n	8005594 <USB_EPStartXfer+0x153c>
 8005566:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005572:	b29a      	uxth	r2, r3
 8005574:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	b29b      	uxth	r3, r3
 8005582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558a:	b29a      	uxth	r2, r3
 800558c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005590:	801a      	strh	r2, [r3, #0]
 8005592:	e083      	b.n	800569c <USB_EPStartXfer+0x1644>
 8005594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005598:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b3e      	cmp	r3, #62	; 0x3e
 80055a2:	d820      	bhi.n	80055e6 <USB_EPStartXfer+0x158e>
 80055a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d004      	beq.n	80055d4 <USB_EPStartXfer+0x157c>
 80055ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ce:	3301      	adds	r3, #1
 80055d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d8:	b29b      	uxth	r3, r3
 80055da:	029b      	lsls	r3, r3, #10
 80055dc:	b29a      	uxth	r2, r3
 80055de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055e2:	801a      	strh	r2, [r3, #0]
 80055e4:	e05a      	b.n	800569c <USB_EPStartXfer+0x1644>
 80055e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f003 031f 	and.w	r3, r3, #31
 8005608:	2b00      	cmp	r3, #0
 800560a:	d104      	bne.n	8005616 <USB_EPStartXfer+0x15be>
 800560c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005610:	3b01      	subs	r3, #1
 8005612:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800561a:	b29b      	uxth	r3, r3
 800561c:	029b      	lsls	r3, r3, #10
 800561e:	b29b      	uxth	r3, r3
 8005620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005628:	b29a      	uxth	r2, r3
 800562a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800562e:	801a      	strh	r2, [r3, #0]
 8005630:	e034      	b.n	800569c <USB_EPStartXfer+0x1644>
 8005632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	785b      	ldrb	r3, [r3, #1]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d12c      	bne.n	800569c <USB_EPStartXfer+0x1644>
 8005642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005646:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005654:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565e:	b29b      	uxth	r3, r3
 8005660:	461a      	mov	r2, r3
 8005662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005666:	4413      	add	r3, r2
 8005668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800566c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005670:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	011a      	lsls	r2, r3, #4
 800567a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800567e:	4413      	add	r3, r2
 8005680:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	b29a      	uxth	r2, r3
 8005696:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800569a:	801a      	strh	r2, [r3, #0]
 800569c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	785b      	ldrb	r3, [r3, #1]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f040 8091 	bne.w	80057de <USB_EPStartXfer+0x1786>
 80056bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80056ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056d8:	b29b      	uxth	r3, r3
 80056da:	461a      	mov	r2, r3
 80056dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80056e0:	4413      	add	r3, r2
 80056e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80056e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	011a      	lsls	r2, r3, #4
 80056f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80056f8:	4413      	add	r3, r2
 80056fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d116      	bne.n	8005740 <USB_EPStartXfer+0x16e8>
 8005712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800571e:	b29a      	uxth	r2, r3
 8005720:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005724:	801a      	strh	r2, [r3, #0]
 8005726:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005736:	b29a      	uxth	r2, r3
 8005738:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800573c:	801a      	strh	r2, [r3, #0]
 800573e:	e07c      	b.n	800583a <USB_EPStartXfer+0x17e2>
 8005740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	2b3e      	cmp	r3, #62	; 0x3e
 800574e:	d820      	bhi.n	8005792 <USB_EPStartXfer+0x173a>
 8005750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	085b      	lsrs	r3, r3, #1
 800575e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d004      	beq.n	8005780 <USB_EPStartXfer+0x1728>
 8005776:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800577a:	3301      	adds	r3, #1
 800577c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005780:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005784:	b29b      	uxth	r3, r3
 8005786:	029b      	lsls	r3, r3, #10
 8005788:	b29a      	uxth	r2, r3
 800578a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	e053      	b.n	800583a <USB_EPStartXfer+0x17e2>
 8005792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	f003 031f 	and.w	r3, r3, #31
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d104      	bne.n	80057c2 <USB_EPStartXfer+0x176a>
 80057b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057bc:	3b01      	subs	r3, #1
 80057be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	029b      	lsls	r3, r3, #10
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057da:	801a      	strh	r2, [r3, #0]
 80057dc:	e02d      	b.n	800583a <USB_EPStartXfer+0x17e2>
 80057de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	785b      	ldrb	r3, [r3, #1]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d125      	bne.n	800583a <USB_EPStartXfer+0x17e2>
 80057ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	461a      	mov	r2, r3
 8005800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005804:	4413      	add	r3, r2
 8005806:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800580a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	011a      	lsls	r2, r3, #4
 8005818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800581c:	4413      	add	r3, r2
 800581e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005822:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	b29a      	uxth	r2, r3
 8005834:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005838:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800583a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 81fe 	beq.w	8005c48 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800584c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800586c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <USB_EPStartXfer+0x182c>
 8005878:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10d      	bne.n	80058a0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005884:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800588c:	2b00      	cmp	r3, #0
 800588e:	f040 81db 	bne.w	8005c48 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005892:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589a:	2b00      	cmp	r3, #0
 800589c:	f040 81d4 	bne.w	8005c48 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80058a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80058ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	441a      	add	r2, r3
 80058e4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80058e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	8013      	strh	r3, [r2, #0]
 80058fc:	e1a4      	b.n	8005c48 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80058fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	78db      	ldrb	r3, [r3, #3]
 800590a:	2b01      	cmp	r3, #1
 800590c:	f040 819a 	bne.w	8005c44 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	699a      	ldr	r2, [r3, #24]
 800591c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	429a      	cmp	r2, r3
 800592a:	d917      	bls.n	800595c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800592c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800593c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005940:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699a      	ldr	r2, [r3, #24]
 8005948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800594c:	1ad2      	subs	r2, r2, r3
 800594e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	619a      	str	r2, [r3, #24]
 800595a:	e00e      	b.n	800597a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800595c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800596c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005970:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2200      	movs	r2, #0
 8005978:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800597a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800597e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	785b      	ldrb	r3, [r3, #1]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d178      	bne.n	8005a7c <USB_EPStartXfer+0x1a24>
 800598a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059ae:	4413      	add	r3, r2
 80059b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	011a      	lsls	r2, r3, #4
 80059c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059c6:	4413      	add	r3, r2
 80059c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d116      	bne.n	8005a06 <USB_EPStartXfer+0x19ae>
 80059d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059ea:	801a      	strh	r2, [r3, #0]
 80059ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a02:	801a      	strh	r2, [r3, #0]
 8005a04:	e06b      	b.n	8005ade <USB_EPStartXfer+0x1a86>
 8005a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a0c:	d818      	bhi.n	8005a40 <USB_EPStartXfer+0x19e8>
 8005a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a12:	085b      	lsrs	r3, r3, #1
 8005a14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d004      	beq.n	8005a2e <USB_EPStartXfer+0x19d6>
 8005a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a28:	3301      	adds	r3, #1
 8005a2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	029b      	lsls	r3, r3, #10
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a3c:	801a      	strh	r2, [r3, #0]
 8005a3e:	e04e      	b.n	8005ade <USB_EPStartXfer+0x1a86>
 8005a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a4e:	f003 031f 	and.w	r3, r3, #31
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d104      	bne.n	8005a60 <USB_EPStartXfer+0x1a08>
 8005a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	029b      	lsls	r3, r3, #10
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a78:	801a      	strh	r2, [r3, #0]
 8005a7a:	e030      	b.n	8005ade <USB_EPStartXfer+0x1a86>
 8005a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d128      	bne.n	8005ade <USB_EPStartXfer+0x1a86>
 8005a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	011a      	lsls	r2, r3, #4
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac8:	4413      	add	r3, r2
 8005aca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ace:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005adc:	801a      	strh	r2, [r3, #0]
 8005ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	785b      	ldrb	r3, [r3, #1]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d178      	bne.n	8005bee <USB_EPStartXfer+0x1b96>
 8005afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b20:	4413      	add	r3, r2
 8005b22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	011a      	lsls	r2, r3, #4
 8005b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b38:	4413      	add	r3, r2
 8005b3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d116      	bne.n	8005b78 <USB_EPStartXfer+0x1b20>
 8005b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b5c:	801a      	strh	r2, [r3, #0]
 8005b5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b74:	801a      	strh	r2, [r3, #0]
 8005b76:	e067      	b.n	8005c48 <USB_EPStartXfer+0x1bf0>
 8005b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b7e:	d818      	bhi.n	8005bb2 <USB_EPStartXfer+0x1b5a>
 8005b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b84:	085b      	lsrs	r3, r3, #1
 8005b86:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d004      	beq.n	8005ba0 <USB_EPStartXfer+0x1b48>
 8005b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ba0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	029b      	lsls	r3, r3, #10
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bae:	801a      	strh	r2, [r3, #0]
 8005bb0:	e04a      	b.n	8005c48 <USB_EPStartXfer+0x1bf0>
 8005bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc0:	f003 031f 	and.w	r3, r3, #31
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d104      	bne.n	8005bd2 <USB_EPStartXfer+0x1b7a>
 8005bc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	029b      	lsls	r3, r3, #10
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bea:	801a      	strh	r2, [r3, #0]
 8005bec:	e02c      	b.n	8005c48 <USB_EPStartXfer+0x1bf0>
 8005bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	785b      	ldrb	r3, [r3, #1]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d124      	bne.n	8005c48 <USB_EPStartXfer+0x1bf0>
 8005bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c14:	4413      	add	r3, r2
 8005c16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	011a      	lsls	r2, r3, #4
 8005c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	e001      	b.n	8005c48 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e03a      	b.n	8005cbe <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005c72:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005c76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c7a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005c7e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005c82:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c86:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	441a      	add	r2, r3
 8005ca4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d020      	beq.n	8005d1c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf0:	81bb      	strh	r3, [r7, #12]
 8005cf2:	89bb      	ldrh	r3, [r7, #12]
 8005cf4:	f083 0310 	eor.w	r3, r3, #16
 8005cf8:	81bb      	strh	r3, [r7, #12]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	441a      	add	r2, r3
 8005d04:	89bb      	ldrh	r3, [r7, #12]
 8005d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	8013      	strh	r3, [r2, #0]
 8005d1a:	e01f      	b.n	8005d5c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d32:	81fb      	strh	r3, [r7, #14]
 8005d34:	89fb      	ldrh	r3, [r7, #14]
 8005d36:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d3a:	81fb      	strh	r3, [r7, #14]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	441a      	add	r2, r3
 8005d46:	89fb      	ldrh	r3, [r7, #14]
 8005d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr

08005d68 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	7b1b      	ldrb	r3, [r3, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f040 809d 	bne.w	8005eb6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	785b      	ldrb	r3, [r3, #1]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d04c      	beq.n	8005e1e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	823b      	strh	r3, [r7, #16]
 8005d92:	8a3b      	ldrh	r3, [r7, #16]
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01b      	beq.n	8005dd4 <USB_EPClearStall+0x6c>
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db2:	81fb      	strh	r3, [r7, #14]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	441a      	add	r2, r3
 8005dbe:	89fb      	ldrh	r3, [r7, #14]
 8005dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	78db      	ldrb	r3, [r3, #3]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d06c      	beq.n	8005eb6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df2:	81bb      	strh	r3, [r7, #12]
 8005df4:	89bb      	ldrh	r3, [r7, #12]
 8005df6:	f083 0320 	eor.w	r3, r3, #32
 8005dfa:	81bb      	strh	r3, [r7, #12]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	441a      	add	r2, r3
 8005e06:	89bb      	ldrh	r3, [r7, #12]
 8005e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	8013      	strh	r3, [r2, #0]
 8005e1c:	e04b      	b.n	8005eb6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	82fb      	strh	r3, [r7, #22]
 8005e2c:	8afb      	ldrh	r3, [r7, #22]
 8005e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01b      	beq.n	8005e6e <USB_EPClearStall+0x106>
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4c:	82bb      	strh	r3, [r7, #20]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	441a      	add	r2, r3
 8005e58:	8abb      	ldrh	r3, [r7, #20]
 8005e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e84:	827b      	strh	r3, [r7, #18]
 8005e86:	8a7b      	ldrh	r3, [r7, #18]
 8005e88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e8c:	827b      	strh	r3, [r7, #18]
 8005e8e:	8a7b      	ldrh	r3, [r7, #18]
 8005e90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e94:	827b      	strh	r3, [r7, #18]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	441a      	add	r2, r3
 8005ea0:	8a7b      	ldrh	r3, [r7, #18]
 8005ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr

08005ec2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005ece:	78fb      	ldrb	r3, [r7, #3]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d103      	bne.n	8005edc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2280      	movs	r2, #128	; 0x80
 8005ed8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bc80      	pop	{r7}
 8005ee6:	4770      	bx	lr

08005ee8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bc80      	pop	{r7}
 8005efa:	4770      	bx	lr

08005efc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bc80      	pop	{r7}
 8005f0e:	4770      	bx	lr

08005f10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005f22:	68fb      	ldr	r3, [r7, #12]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bc80      	pop	{r7}
 8005f2c:	4770      	bx	lr

08005f2e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr

08005f44 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b08d      	sub	sp, #52	; 0x34
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	4611      	mov	r1, r2
 8005f50:	461a      	mov	r2, r3
 8005f52:	460b      	mov	r3, r1
 8005f54:	80fb      	strh	r3, [r7, #6]
 8005f56:	4613      	mov	r3, r2
 8005f58:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005f5a:	88bb      	ldrh	r3, [r7, #4]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	085b      	lsrs	r3, r3, #1
 8005f60:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f6a:	88fb      	ldrh	r3, [r7, #6]
 8005f6c:	005a      	lsls	r2, r3, #1
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f76:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f7c:	e01e      	b.n	8005fbc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	3301      	adds	r3, #1
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	021b      	lsls	r3, r3, #8
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	3302      	adds	r3, #2
 8005fa8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	3302      	adds	r3, #2
 8005fae:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1dd      	bne.n	8005f7e <USB_WritePMA+0x3a>
  }
}
 8005fc2:	bf00      	nop
 8005fc4:	bf00      	nop
 8005fc6:	3734      	adds	r7, #52	; 0x34
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bc80      	pop	{r7}
 8005fcc:	4770      	bx	lr

08005fce <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b08b      	sub	sp, #44	; 0x2c
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	4611      	mov	r1, r2
 8005fda:	461a      	mov	r2, r3
 8005fdc:	460b      	mov	r3, r1
 8005fde:	80fb      	strh	r3, [r7, #6]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005fe4:	88bb      	ldrh	r3, [r7, #4]
 8005fe6:	085b      	lsrs	r3, r3, #1
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	005a      	lsls	r2, r3, #1
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006000:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
 8006006:	e01b      	b.n	8006040 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	b29b      	uxth	r3, r3
 800600e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	3302      	adds	r3, #2
 8006014:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	b2da      	uxtb	r2, r3
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	3301      	adds	r3, #1
 8006022:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	0a1b      	lsrs	r3, r3, #8
 8006028:	b2da      	uxtb	r2, r3
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	3301      	adds	r3, #1
 8006032:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	3302      	adds	r3, #2
 8006038:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	3b01      	subs	r3, #1
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e0      	bne.n	8006008 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006046:	88bb      	ldrh	r3, [r7, #4]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	b29b      	uxth	r3, r3
 8006058:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	b2da      	uxtb	r2, r3
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	701a      	strb	r2, [r3, #0]
  }
}
 8006062:	bf00      	nop
 8006064:	372c      	adds	r7, #44	; 0x2c
 8006066:	46bd      	mov	sp, r7
 8006068:	bc80      	pop	{r7}
 800606a:	4770      	bx	lr

0800606c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	7c1b      	ldrb	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d115      	bne.n	80060b0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006088:	2202      	movs	r2, #2
 800608a:	2181      	movs	r1, #129	; 0x81
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f001 fec6 	bl	8007e1e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800609c:	2202      	movs	r2, #2
 800609e:	2101      	movs	r1, #1
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 febc 	bl	8007e1e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80060ae:	e012      	b.n	80060d6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060b0:	2340      	movs	r3, #64	; 0x40
 80060b2:	2202      	movs	r2, #2
 80060b4:	2181      	movs	r1, #129	; 0x81
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 feb1 	bl	8007e1e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060c2:	2340      	movs	r3, #64	; 0x40
 80060c4:	2202      	movs	r2, #2
 80060c6:	2101      	movs	r1, #1
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f001 fea8 	bl	8007e1e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80060d6:	2308      	movs	r3, #8
 80060d8:	2203      	movs	r2, #3
 80060da:	2182      	movs	r1, #130	; 0x82
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 fe9e 	bl	8007e1e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80060e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80060ec:	f001 ffbe 	bl	800806c <USBD_static_malloc>
 80060f0:	4602      	mov	r2, r0
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d102      	bne.n	8006108 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006102:	2301      	movs	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
 8006106:	e026      	b.n	8006156 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800610e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2200      	movs	r2, #0
 800611e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2200      	movs	r2, #0
 8006126:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	7c1b      	ldrb	r3, [r3, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d109      	bne.n	8006146 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800613c:	2101      	movs	r1, #1
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f001 ff5e 	bl	8008000 <USBD_LL_PrepareReceive>
 8006144:	e007      	b.n	8006156 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800614c:	2340      	movs	r3, #64	; 0x40
 800614e:	2101      	movs	r1, #1
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f001 ff55 	bl	8008000 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006156:	7bfb      	ldrb	r3, [r7, #15]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006170:	2181      	movs	r1, #129	; 0x81
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 fe79 	bl	8007e6a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800617e:	2101      	movs	r1, #1
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f001 fe72 	bl	8007e6a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800618e:	2182      	movs	r1, #130	; 0x82
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f001 fe6a 	bl	8007e6a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00e      	beq.n	80061c4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b6:	4618      	mov	r0, r3
 80061b8:	f001 ff64 	bl	8008084 <USBD_static_free>
    pdev->pClassData = NULL;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b086      	sub	sp, #24
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061de:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d039      	beq.n	800626c <USBD_CDC_Setup+0x9e>
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	d17f      	bne.n	80062fc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	88db      	ldrh	r3, [r3, #6]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d029      	beq.n	8006258 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	b25b      	sxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	da11      	bge.n	8006232 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800621a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	88d2      	ldrh	r2, [r2, #6]
 8006220:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006222:	6939      	ldr	r1, [r7, #16]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	88db      	ldrh	r3, [r3, #6]
 8006228:	461a      	mov	r2, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f001 f9d9 	bl	80075e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006230:	e06b      	b.n	800630a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	785a      	ldrb	r2, [r3, #1]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	88db      	ldrh	r3, [r3, #6]
 8006240:	b2da      	uxtb	r2, r3
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006248:	6939      	ldr	r1, [r7, #16]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	88db      	ldrh	r3, [r3, #6]
 800624e:	461a      	mov	r2, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 f9f4 	bl	800763e <USBD_CtlPrepareRx>
      break;
 8006256:	e058      	b.n	800630a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	7850      	ldrb	r0, [r2, #1]
 8006264:	2200      	movs	r2, #0
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	4798      	blx	r3
      break;
 800626a:	e04e      	b.n	800630a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	785b      	ldrb	r3, [r3, #1]
 8006270:	2b0b      	cmp	r3, #11
 8006272:	d02e      	beq.n	80062d2 <USBD_CDC_Setup+0x104>
 8006274:	2b0b      	cmp	r3, #11
 8006276:	dc38      	bgt.n	80062ea <USBD_CDC_Setup+0x11c>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <USBD_CDC_Setup+0xb4>
 800627c:	2b0a      	cmp	r3, #10
 800627e:	d014      	beq.n	80062aa <USBD_CDC_Setup+0xdc>
 8006280:	e033      	b.n	80062ea <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006288:	2b03      	cmp	r3, #3
 800628a:	d107      	bne.n	800629c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800628c:	f107 030c 	add.w	r3, r7, #12
 8006290:	2202      	movs	r2, #2
 8006292:	4619      	mov	r1, r3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 f9a4 	bl	80075e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800629a:	e02e      	b.n	80062fa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f001 f935 	bl	800750e <USBD_CtlError>
            ret = USBD_FAIL;
 80062a4:	2302      	movs	r3, #2
 80062a6:	75fb      	strb	r3, [r7, #23]
          break;
 80062a8:	e027      	b.n	80062fa <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d107      	bne.n	80062c4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80062b4:	f107 030f 	add.w	r3, r7, #15
 80062b8:	2201      	movs	r2, #1
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 f990 	bl	80075e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062c2:	e01a      	b.n	80062fa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80062c4:	6839      	ldr	r1, [r7, #0]
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 f921 	bl	800750e <USBD_CtlError>
            ret = USBD_FAIL;
 80062cc:	2302      	movs	r3, #2
 80062ce:	75fb      	strb	r3, [r7, #23]
          break;
 80062d0:	e013      	b.n	80062fa <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d00d      	beq.n	80062f8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80062dc:	6839      	ldr	r1, [r7, #0]
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f001 f915 	bl	800750e <USBD_CtlError>
            ret = USBD_FAIL;
 80062e4:	2302      	movs	r3, #2
 80062e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80062e8:	e006      	b.n	80062f8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f001 f90e 	bl	800750e <USBD_CtlError>
          ret = USBD_FAIL;
 80062f2:	2302      	movs	r3, #2
 80062f4:	75fb      	strb	r3, [r7, #23]
          break;
 80062f6:	e000      	b.n	80062fa <USBD_CDC_Setup+0x12c>
          break;
 80062f8:	bf00      	nop
      }
      break;
 80062fa:	e006      	b.n	800630a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f001 f905 	bl	800750e <USBD_CtlError>
      ret = USBD_FAIL;
 8006304:	2302      	movs	r3, #2
 8006306:	75fb      	strb	r3, [r7, #23]
      break;
 8006308:	bf00      	nop
  }

  return ret;
 800630a:	7dfb      	ldrb	r3, [r7, #23]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006326:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800632e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006336:	2b00      	cmp	r3, #0
 8006338:	d03a      	beq.n	80063b0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800633a:	78fa      	ldrb	r2, [r7, #3]
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	440b      	add	r3, r1
 8006348:	331c      	adds	r3, #28
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d029      	beq.n	80063a4 <USBD_CDC_DataIn+0x90>
 8006350:	78fa      	ldrb	r2, [r7, #3]
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	331c      	adds	r3, #28
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	78f9      	ldrb	r1, [r7, #3]
 8006364:	68b8      	ldr	r0, [r7, #8]
 8006366:	460b      	mov	r3, r1
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	440b      	add	r3, r1
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4403      	add	r3, r0
 8006370:	3338      	adds	r3, #56	; 0x38
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	fbb2 f1f3 	udiv	r1, r2, r3
 8006378:	fb01 f303 	mul.w	r3, r1, r3
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d110      	bne.n	80063a4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006382:	78fa      	ldrb	r2, [r7, #3]
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	440b      	add	r3, r1
 8006390:	331c      	adds	r3, #28
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006396:	78f9      	ldrb	r1, [r7, #3]
 8006398:	2300      	movs	r3, #0
 800639a:	2200      	movs	r2, #0
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 fe0c 	bl	8007fba <USBD_LL_Transmit>
 80063a2:	e003      	b.n	80063ac <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	e000      	b.n	80063b2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80063b0:	2302      	movs	r3, #2
  }
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	460b      	mov	r3, r1
 80063c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063cc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 fe37 	bl	8008046 <USBD_LL_GetRxDataSize>
 80063d8:	4602      	mov	r2, r0
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00d      	beq.n	8006406 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80063fe:	4611      	mov	r1, r2
 8006400:	4798      	blx	r3

    return USBD_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	e000      	b.n	8006408 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006406:	2302      	movs	r3, #2
  }
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800641e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006426:	2b00      	cmp	r3, #0
 8006428:	d015      	beq.n	8006456 <USBD_CDC_EP0_RxReady+0x46>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006430:	2bff      	cmp	r3, #255	; 0xff
 8006432:	d010      	beq.n	8006456 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006442:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800644a:	b292      	uxth	r2, r2
 800644c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	22ff      	movs	r2, #255	; 0xff
 8006452:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2243      	movs	r2, #67	; 0x43
 800646c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800646e:	4b03      	ldr	r3, [pc, #12]	; (800647c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	bc80      	pop	{r7}
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	2000009c 	.word	0x2000009c

08006480 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2243      	movs	r2, #67	; 0x43
 800648c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800648e:	4b03      	ldr	r3, [pc, #12]	; (800649c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	bc80      	pop	{r7}
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	20000058 	.word	0x20000058

080064a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2243      	movs	r2, #67	; 0x43
 80064ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80064ae:	4b03      	ldr	r3, [pc, #12]	; (80064bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	200000e0 	.word	0x200000e0

080064c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	220a      	movs	r2, #10
 80064cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80064ce:	4b03      	ldr	r3, [pc, #12]	; (80064dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bc80      	pop	{r7}
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	20000014 	.word	0x20000014

080064e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80064ea:	2302      	movs	r3, #2
 80064ec:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	bc80      	pop	{r7}
 800650a:	4770      	bx	lr

0800650c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	4613      	mov	r3, r2
 8006518:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006520:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800652a:	88fa      	ldrh	r2, [r7, #6]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	371c      	adds	r7, #28
 8006538:	46bd      	mov	sp, r7
 800653a:	bc80      	pop	{r7}
 800653c:	4770      	bx	lr

0800653e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800653e:	b480      	push	{r7}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	bc80      	pop	{r7}
 8006562:	4770      	bx	lr

08006564 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006572:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d017      	beq.n	80065ae <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	7c1b      	ldrb	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d109      	bne.n	800659a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800658c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006590:	2101      	movs	r1, #1
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f001 fd34 	bl	8008000 <USBD_LL_PrepareReceive>
 8006598:	e007      	b.n	80065aa <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065a0:	2340      	movs	r3, #64	; 0x40
 80065a2:	2101      	movs	r1, #1
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 fd2b 	bl	8008000 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	e000      	b.n	80065b0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80065ae:	2302      	movs	r3, #2
  }
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	4613      	mov	r3, r2
 80065c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80065cc:	2302      	movs	r3, #2
 80065ce:	e01a      	b.n	8006606 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	79fa      	ldrb	r2, [r7, #7]
 80065fc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f001 fb98 	bl	8007d34 <USBD_LL_Init>

  return USBD_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800660e:	b480      	push	{r7}
 8006610:	b085      	sub	sp, #20
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
 8006616:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d006      	beq.n	8006630 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]
 800662e:	e001      	b.n	8006634 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006630:	2302      	movs	r3, #2
 8006632:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006634:	7bfb      	ldrb	r3, [r7, #15]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	bc80      	pop	{r7}
 800663e:	4770      	bx	lr

08006640 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 fbcd 	bl	8007de8 <USBD_LL_Start>

  return USBD_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	bc80      	pop	{r7}
 800666a:	4770      	bx	lr

0800666c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006678:	2302      	movs	r3, #2
 800667a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00c      	beq.n	80066a0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	4611      	mov	r1, r2
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	4798      	blx	r3
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b082      	sub	sp, #8
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	460b      	mov	r3, r1
 80066b4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	78fa      	ldrb	r2, [r7, #3]
 80066c0:	4611      	mov	r1, r2
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	4798      	blx	r3

  return USBD_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fed7 	bl	8007496 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80066f6:	461a      	mov	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006704:	f003 031f 	and.w	r3, r3, #31
 8006708:	2b02      	cmp	r3, #2
 800670a:	d016      	beq.n	800673a <USBD_LL_SetupStage+0x6a>
 800670c:	2b02      	cmp	r3, #2
 800670e:	d81c      	bhi.n	800674a <USBD_LL_SetupStage+0x7a>
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <USBD_LL_SetupStage+0x4a>
 8006714:	2b01      	cmp	r3, #1
 8006716:	d008      	beq.n	800672a <USBD_LL_SetupStage+0x5a>
 8006718:	e017      	b.n	800674a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006720:	4619      	mov	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f9ca 	bl	8006abc <USBD_StdDevReq>
      break;
 8006728:	e01a      	b.n	8006760 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa2c 	bl	8006b90 <USBD_StdItfReq>
      break;
 8006738:	e012      	b.n	8006760 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fa6c 	bl	8006c20 <USBD_StdEPReq>
      break;
 8006748:	e00a      	b.n	8006760 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006750:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006754:	b2db      	uxtb	r3, r3
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 fba5 	bl	8007ea8 <USBD_LL_StallEP>
      break;
 800675e:	bf00      	nop
  }

  return USBD_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b086      	sub	sp, #24
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	460b      	mov	r3, r1
 8006774:	607a      	str	r2, [r7, #4]
 8006776:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006778:	7afb      	ldrb	r3, [r7, #11]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d14b      	bne.n	8006816 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006784:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800678c:	2b03      	cmp	r3, #3
 800678e:	d134      	bne.n	80067fa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	429a      	cmp	r2, r3
 800679a:	d919      	bls.n	80067d0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	1ad2      	subs	r2, r2, r3
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d203      	bcs.n	80067be <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	e002      	b.n	80067c4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 ff56 	bl	800767a <USBD_CtlContinueRx>
 80067ce:	e038      	b.n	8006842 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d105      	bne.n	80067f2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 ff53 	bl	800769e <USBD_CtlSendStatus>
 80067f8:	e023      	b.n	8006842 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006800:	2b05      	cmp	r3, #5
 8006802:	d11e      	bne.n	8006842 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800680c:	2100      	movs	r1, #0
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f001 fb4a 	bl	8007ea8 <USBD_LL_StallEP>
 8006814:	e015      	b.n	8006842 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00d      	beq.n	800683e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006828:	2b03      	cmp	r3, #3
 800682a:	d108      	bne.n	800683e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	7afa      	ldrb	r2, [r7, #11]
 8006836:	4611      	mov	r1, r2
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	4798      	blx	r3
 800683c:	e001      	b.n	8006842 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800683e:	2302      	movs	r3, #2
 8006840:	e000      	b.n	8006844 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	460b      	mov	r3, r1
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800685a:	7afb      	ldrb	r3, [r7, #11]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d17f      	bne.n	8006960 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3314      	adds	r3, #20
 8006864:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800686c:	2b02      	cmp	r3, #2
 800686e:	d15c      	bne.n	800692a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	68da      	ldr	r2, [r3, #12]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	429a      	cmp	r2, r3
 800687a:	d915      	bls.n	80068a8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	1ad2      	subs	r2, r2, r3
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	b29b      	uxth	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 fec0 	bl	800761a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800689a:	2300      	movs	r3, #0
 800689c:	2200      	movs	r2, #0
 800689e:	2100      	movs	r1, #0
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f001 fbad 	bl	8008000 <USBD_LL_PrepareReceive>
 80068a6:	e04e      	b.n	8006946 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	6912      	ldr	r2, [r2, #16]
 80068b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80068b4:	fb01 f202 	mul.w	r2, r1, r2
 80068b8:	1a9b      	subs	r3, r3, r2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d11c      	bne.n	80068f8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d316      	bcc.n	80068f8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d20f      	bcs.n	80068f8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068d8:	2200      	movs	r2, #0
 80068da:	2100      	movs	r1, #0
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fe9c 	bl	800761a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068ea:	2300      	movs	r3, #0
 80068ec:	2200      	movs	r2, #0
 80068ee:	2100      	movs	r1, #0
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f001 fb85 	bl	8008000 <USBD_LL_PrepareReceive>
 80068f6:	e026      	b.n	8006946 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00a      	beq.n	800691a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800690a:	2b03      	cmp	r3, #3
 800690c:	d105      	bne.n	800691a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800691a:	2180      	movs	r1, #128	; 0x80
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f001 fac3 	bl	8007ea8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 fece 	bl	80076c4 <USBD_CtlReceiveStatus>
 8006928:	e00d      	b.n	8006946 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006930:	2b04      	cmp	r3, #4
 8006932:	d004      	beq.n	800693e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800693a:	2b00      	cmp	r3, #0
 800693c:	d103      	bne.n	8006946 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800693e:	2180      	movs	r1, #128	; 0x80
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f001 fab1 	bl	8007ea8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800694c:	2b01      	cmp	r3, #1
 800694e:	d11d      	bne.n	800698c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f7ff fe81 	bl	8006658 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800695e:	e015      	b.n	800698c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00d      	beq.n	8006988 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006972:	2b03      	cmp	r3, #3
 8006974:	d108      	bne.n	8006988 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	7afa      	ldrb	r2, [r7, #11]
 8006980:	4611      	mov	r1, r2
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	4798      	blx	r3
 8006986:	e001      	b.n	800698c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006988:	2302      	movs	r3, #2
 800698a:	e000      	b.n	800698e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b082      	sub	sp, #8
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800699e:	2340      	movs	r3, #64	; 0x40
 80069a0:	2200      	movs	r2, #0
 80069a2:	2100      	movs	r1, #0
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 fa3a 	bl	8007e1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2240      	movs	r2, #64	; 0x40
 80069b6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069ba:	2340      	movs	r3, #64	; 0x40
 80069bc:	2200      	movs	r2, #0
 80069be:	2180      	movs	r1, #128	; 0x80
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 fa2c 	bl	8007e1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2240      	movs	r2, #64	; 0x40
 80069d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6852      	ldr	r2, [r2, #4]
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	4611      	mov	r1, r2
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	4798      	blx	r3
  }

  return USBD_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	78fa      	ldrb	r2, [r7, #3]
 8006a28:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr

08006a36 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2204      	movs	r2, #4
 8006a4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bc80      	pop	{r7}
 8006a5c:	4770      	bx	lr

08006a5e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d105      	bne.n	8006a7c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr

08006a88 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d10b      	bne.n	8006ab2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d005      	beq.n	8006ab2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ad2:	2b40      	cmp	r3, #64	; 0x40
 8006ad4:	d005      	beq.n	8006ae2 <USBD_StdDevReq+0x26>
 8006ad6:	2b40      	cmp	r3, #64	; 0x40
 8006ad8:	d84f      	bhi.n	8006b7a <USBD_StdDevReq+0xbe>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d009      	beq.n	8006af2 <USBD_StdDevReq+0x36>
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d14b      	bne.n	8006b7a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	4798      	blx	r3
      break;
 8006af0:	e048      	b.n	8006b84 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	785b      	ldrb	r3, [r3, #1]
 8006af6:	2b09      	cmp	r3, #9
 8006af8:	d839      	bhi.n	8006b6e <USBD_StdDevReq+0xb2>
 8006afa:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <USBD_StdDevReq+0x44>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b51 	.word	0x08006b51
 8006b04:	08006b65 	.word	0x08006b65
 8006b08:	08006b6f 	.word	0x08006b6f
 8006b0c:	08006b5b 	.word	0x08006b5b
 8006b10:	08006b6f 	.word	0x08006b6f
 8006b14:	08006b33 	.word	0x08006b33
 8006b18:	08006b29 	.word	0x08006b29
 8006b1c:	08006b6f 	.word	0x08006b6f
 8006b20:	08006b47 	.word	0x08006b47
 8006b24:	08006b3d 	.word	0x08006b3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f9dc 	bl	8006ee8 <USBD_GetDescriptor>
          break;
 8006b30:	e022      	b.n	8006b78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fb3f 	bl	80071b8 <USBD_SetAddress>
          break;
 8006b3a:	e01d      	b.n	8006b78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fb7e 	bl	8007240 <USBD_SetConfig>
          break;
 8006b44:	e018      	b.n	8006b78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fc07 	bl	800735c <USBD_GetConfig>
          break;
 8006b4e:	e013      	b.n	8006b78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fc37 	bl	80073c6 <USBD_GetStatus>
          break;
 8006b58:	e00e      	b.n	8006b78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fc65 	bl	800742c <USBD_SetFeature>
          break;
 8006b62:	e009      	b.n	8006b78 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fc74 	bl	8007454 <USBD_ClrFeature>
          break;
 8006b6c:	e004      	b.n	8006b78 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fccc 	bl	800750e <USBD_CtlError>
          break;
 8006b76:	bf00      	nop
      }
      break;
 8006b78:	e004      	b.n	8006b84 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fcc6 	bl	800750e <USBD_CtlError>
      break;
 8006b82:	bf00      	nop
  }

  return ret;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop

08006b90 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ba6:	2b40      	cmp	r3, #64	; 0x40
 8006ba8:	d005      	beq.n	8006bb6 <USBD_StdItfReq+0x26>
 8006baa:	2b40      	cmp	r3, #64	; 0x40
 8006bac:	d82e      	bhi.n	8006c0c <USBD_StdItfReq+0x7c>
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <USBD_StdItfReq+0x26>
 8006bb2:	2b20      	cmp	r3, #32
 8006bb4:	d12a      	bne.n	8006c0c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d81d      	bhi.n	8006bfe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	889b      	ldrh	r3, [r3, #4]
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d813      	bhi.n	8006bf4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	4798      	blx	r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	88db      	ldrh	r3, [r3, #6]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d110      	bne.n	8006c08 <USBD_StdItfReq+0x78>
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10d      	bne.n	8006c08 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fd56 	bl	800769e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006bf2:	e009      	b.n	8006c08 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fc89 	bl	800750e <USBD_CtlError>
          break;
 8006bfc:	e004      	b.n	8006c08 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fc84 	bl	800750e <USBD_CtlError>
          break;
 8006c06:	e000      	b.n	8006c0a <USBD_StdItfReq+0x7a>
          break;
 8006c08:	bf00      	nop
      }
      break;
 8006c0a:	e004      	b.n	8006c16 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fc7d 	bl	800750e <USBD_CtlError>
      break;
 8006c14:	bf00      	nop
  }

  return USBD_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	889b      	ldrh	r3, [r3, #4]
 8006c32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c3c:	2b40      	cmp	r3, #64	; 0x40
 8006c3e:	d007      	beq.n	8006c50 <USBD_StdEPReq+0x30>
 8006c40:	2b40      	cmp	r3, #64	; 0x40
 8006c42:	f200 8146 	bhi.w	8006ed2 <USBD_StdEPReq+0x2b2>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <USBD_StdEPReq+0x40>
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	f040 8141 	bne.w	8006ed2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
      break;
 8006c5e:	e13d      	b.n	8006edc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	d10a      	bne.n	8006c82 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	4798      	blx	r3
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	e12d      	b.n	8006ede <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	785b      	ldrb	r3, [r3, #1]
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d007      	beq.n	8006c9a <USBD_StdEPReq+0x7a>
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	f300 811b 	bgt.w	8006ec6 <USBD_StdEPReq+0x2a6>
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d072      	beq.n	8006d7a <USBD_StdEPReq+0x15a>
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d03a      	beq.n	8006d0e <USBD_StdEPReq+0xee>
 8006c98:	e115      	b.n	8006ec6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d002      	beq.n	8006caa <USBD_StdEPReq+0x8a>
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d015      	beq.n	8006cd4 <USBD_StdEPReq+0xb4>
 8006ca8:	e02b      	b.n	8006d02 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00c      	beq.n	8006cca <USBD_StdEPReq+0xaa>
 8006cb0:	7bbb      	ldrb	r3, [r7, #14]
 8006cb2:	2b80      	cmp	r3, #128	; 0x80
 8006cb4:	d009      	beq.n	8006cca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 f8f4 	bl	8007ea8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006cc0:	2180      	movs	r1, #128	; 0x80
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 f8f0 	bl	8007ea8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cc8:	e020      	b.n	8006d0c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fc1e 	bl	800750e <USBD_CtlError>
              break;
 8006cd2:	e01b      	b.n	8006d0c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	885b      	ldrh	r3, [r3, #2]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10e      	bne.n	8006cfa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00b      	beq.n	8006cfa <USBD_StdEPReq+0xda>
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
 8006ce4:	2b80      	cmp	r3, #128	; 0x80
 8006ce6:	d008      	beq.n	8006cfa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	88db      	ldrh	r3, [r3, #6]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d104      	bne.n	8006cfa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 f8d7 	bl	8007ea8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fccf 	bl	800769e <USBD_CtlSendStatus>

              break;
 8006d00:	e004      	b.n	8006d0c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fc02 	bl	800750e <USBD_CtlError>
              break;
 8006d0a:	bf00      	nop
          }
          break;
 8006d0c:	e0e0      	b.n	8006ed0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d002      	beq.n	8006d1e <USBD_StdEPReq+0xfe>
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d015      	beq.n	8006d48 <USBD_StdEPReq+0x128>
 8006d1c:	e026      	b.n	8006d6c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00c      	beq.n	8006d3e <USBD_StdEPReq+0x11e>
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	2b80      	cmp	r3, #128	; 0x80
 8006d28:	d009      	beq.n	8006d3e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 f8ba 	bl	8007ea8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006d34:	2180      	movs	r1, #128	; 0x80
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f001 f8b6 	bl	8007ea8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d3c:	e01c      	b.n	8006d78 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fbe4 	bl	800750e <USBD_CtlError>
              break;
 8006d46:	e017      	b.n	8006d78 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	885b      	ldrh	r3, [r3, #2]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d112      	bne.n	8006d76 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d004      	beq.n	8006d64 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d5a:	7bbb      	ldrb	r3, [r7, #14]
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 f8c1 	bl	8007ee6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fc9a 	bl	800769e <USBD_CtlSendStatus>
              }
              break;
 8006d6a:	e004      	b.n	8006d76 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fbcd 	bl	800750e <USBD_CtlError>
              break;
 8006d74:	e000      	b.n	8006d78 <USBD_StdEPReq+0x158>
              break;
 8006d76:	bf00      	nop
          }
          break;
 8006d78:	e0aa      	b.n	8006ed0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d002      	beq.n	8006d8a <USBD_StdEPReq+0x16a>
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d032      	beq.n	8006dee <USBD_StdEPReq+0x1ce>
 8006d88:	e097      	b.n	8006eba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d8a:	7bbb      	ldrb	r3, [r7, #14]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d007      	beq.n	8006da0 <USBD_StdEPReq+0x180>
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	2b80      	cmp	r3, #128	; 0x80
 8006d94:	d004      	beq.n	8006da0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fbb8 	bl	800750e <USBD_CtlError>
                break;
 8006d9e:	e091      	b.n	8006ec4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006da0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	da0b      	bge.n	8006dc0 <USBD_StdEPReq+0x1a0>
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dae:	4613      	mov	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	3310      	adds	r3, #16
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	4413      	add	r3, r2
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	e00b      	b.n	8006dd8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006dc0:	7bbb      	ldrb	r3, [r7, #14]
 8006dc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2202      	movs	r2, #2
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fbfb 	bl	80075e2 <USBD_CtlSendData>
              break;
 8006dec:	e06a      	b.n	8006ec4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006dee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	da11      	bge.n	8006e1a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	f003 020f 	and.w	r2, r3, #15
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	440b      	add	r3, r1
 8006e08:	3318      	adds	r3, #24
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d117      	bne.n	8006e40 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fb7b 	bl	800750e <USBD_CtlError>
                  break;
 8006e18:	e054      	b.n	8006ec4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	f003 020f 	and.w	r2, r3, #15
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d104      	bne.n	8006e40 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fb68 	bl	800750e <USBD_CtlError>
                  break;
 8006e3e:	e041      	b.n	8006ec4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	da0b      	bge.n	8006e60 <USBD_StdEPReq+0x240>
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e4e:	4613      	mov	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	3310      	adds	r3, #16
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	e00b      	b.n	8006e78 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e60:	7bbb      	ldrb	r3, [r7, #14]
 8006e62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	4413      	add	r3, r2
 8006e76:	3304      	adds	r3, #4
 8006e78:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <USBD_StdEPReq+0x266>
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	2b80      	cmp	r3, #128	; 0x80
 8006e84:	d103      	bne.n	8006e8e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	e00e      	b.n	8006eac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 f846 	bl	8007f24 <USBD_LL_IsStallEP>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	e002      	b.n	8006eac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fb95 	bl	80075e2 <USBD_CtlSendData>
              break;
 8006eb8:	e004      	b.n	8006ec4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fb26 	bl	800750e <USBD_CtlError>
              break;
 8006ec2:	bf00      	nop
          }
          break;
 8006ec4:	e004      	b.n	8006ed0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fb20 	bl	800750e <USBD_CtlError>
          break;
 8006ece:	bf00      	nop
      }
      break;
 8006ed0:	e004      	b.n	8006edc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fb1a 	bl	800750e <USBD_CtlError>
      break;
 8006eda:	bf00      	nop
  }

  return ret;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	885b      	ldrh	r3, [r3, #2]
 8006f02:	0a1b      	lsrs	r3, r3, #8
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	3b01      	subs	r3, #1
 8006f08:	2b06      	cmp	r3, #6
 8006f0a:	f200 8128 	bhi.w	800715e <USBD_GetDescriptor+0x276>
 8006f0e:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <USBD_GetDescriptor+0x2c>)
 8006f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f14:	08006f31 	.word	0x08006f31
 8006f18:	08006f49 	.word	0x08006f49
 8006f1c:	08006f89 	.word	0x08006f89
 8006f20:	0800715f 	.word	0x0800715f
 8006f24:	0800715f 	.word	0x0800715f
 8006f28:	080070ff 	.word	0x080070ff
 8006f2c:	0800712b 	.word	0x0800712b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	7c12      	ldrb	r2, [r2, #16]
 8006f3c:	f107 0108 	add.w	r1, r7, #8
 8006f40:	4610      	mov	r0, r2
 8006f42:	4798      	blx	r3
 8006f44:	60f8      	str	r0, [r7, #12]
      break;
 8006f46:	e112      	b.n	800716e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	7c1b      	ldrb	r3, [r3, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10d      	bne.n	8006f6c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f58:	f107 0208 	add.w	r2, r7, #8
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4798      	blx	r3
 8006f60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3301      	adds	r3, #1
 8006f66:	2202      	movs	r2, #2
 8006f68:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f6a:	e100      	b.n	800716e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	f107 0208 	add.w	r2, r7, #8
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4798      	blx	r3
 8006f7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3301      	adds	r3, #1
 8006f82:	2202      	movs	r2, #2
 8006f84:	701a      	strb	r2, [r3, #0]
      break;
 8006f86:	e0f2      	b.n	800716e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	885b      	ldrh	r3, [r3, #2]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b05      	cmp	r3, #5
 8006f90:	f200 80ac 	bhi.w	80070ec <USBD_GetDescriptor+0x204>
 8006f94:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <USBD_GetDescriptor+0xb4>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08006fb5 	.word	0x08006fb5
 8006fa0:	08006fe9 	.word	0x08006fe9
 8006fa4:	0800701d 	.word	0x0800701d
 8006fa8:	08007051 	.word	0x08007051
 8006fac:	08007085 	.word	0x08007085
 8006fb0:	080070b9 	.word	0x080070b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	7c12      	ldrb	r2, [r2, #16]
 8006fcc:	f107 0108 	add.w	r1, r7, #8
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4798      	blx	r3
 8006fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fd6:	e091      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fa97 	bl	800750e <USBD_CtlError>
            err++;
 8006fe0:	7afb      	ldrb	r3, [r7, #11]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8006fe6:	e089      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	7c12      	ldrb	r2, [r2, #16]
 8007000:	f107 0108 	add.w	r1, r7, #8
 8007004:	4610      	mov	r0, r2
 8007006:	4798      	blx	r3
 8007008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800700a:	e077      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fa7d 	bl	800750e <USBD_CtlError>
            err++;
 8007014:	7afb      	ldrb	r3, [r7, #11]
 8007016:	3301      	adds	r3, #1
 8007018:	72fb      	strb	r3, [r7, #11]
          break;
 800701a:	e06f      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	7c12      	ldrb	r2, [r2, #16]
 8007034:	f107 0108 	add.w	r1, r7, #8
 8007038:	4610      	mov	r0, r2
 800703a:	4798      	blx	r3
 800703c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800703e:	e05d      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fa63 	bl	800750e <USBD_CtlError>
            err++;
 8007048:	7afb      	ldrb	r3, [r7, #11]
 800704a:	3301      	adds	r3, #1
 800704c:	72fb      	strb	r3, [r7, #11]
          break;
 800704e:	e055      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00b      	beq.n	8007074 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	7c12      	ldrb	r2, [r2, #16]
 8007068:	f107 0108 	add.w	r1, r7, #8
 800706c:	4610      	mov	r0, r2
 800706e:	4798      	blx	r3
 8007070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007072:	e043      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa49 	bl	800750e <USBD_CtlError>
            err++;
 800707c:	7afb      	ldrb	r3, [r7, #11]
 800707e:	3301      	adds	r3, #1
 8007080:	72fb      	strb	r3, [r7, #11]
          break;
 8007082:	e03b      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00b      	beq.n	80070a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	7c12      	ldrb	r2, [r2, #16]
 800709c:	f107 0108 	add.w	r1, r7, #8
 80070a0:	4610      	mov	r0, r2
 80070a2:	4798      	blx	r3
 80070a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070a6:	e029      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fa2f 	bl	800750e <USBD_CtlError>
            err++;
 80070b0:	7afb      	ldrb	r3, [r7, #11]
 80070b2:	3301      	adds	r3, #1
 80070b4:	72fb      	strb	r3, [r7, #11]
          break;
 80070b6:	e021      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00b      	beq.n	80070dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	7c12      	ldrb	r2, [r2, #16]
 80070d0:	f107 0108 	add.w	r1, r7, #8
 80070d4:	4610      	mov	r0, r2
 80070d6:	4798      	blx	r3
 80070d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070da:	e00f      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fa15 	bl	800750e <USBD_CtlError>
            err++;
 80070e4:	7afb      	ldrb	r3, [r7, #11]
 80070e6:	3301      	adds	r3, #1
 80070e8:	72fb      	strb	r3, [r7, #11]
          break;
 80070ea:	e007      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fa0d 	bl	800750e <USBD_CtlError>
          err++;
 80070f4:	7afb      	ldrb	r3, [r7, #11]
 80070f6:	3301      	adds	r3, #1
 80070f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80070fa:	e038      	b.n	800716e <USBD_GetDescriptor+0x286>
 80070fc:	e037      	b.n	800716e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	7c1b      	ldrb	r3, [r3, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710e:	f107 0208 	add.w	r2, r7, #8
 8007112:	4610      	mov	r0, r2
 8007114:	4798      	blx	r3
 8007116:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007118:	e029      	b.n	800716e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f9f6 	bl	800750e <USBD_CtlError>
        err++;
 8007122:	7afb      	ldrb	r3, [r7, #11]
 8007124:	3301      	adds	r3, #1
 8007126:	72fb      	strb	r3, [r7, #11]
      break;
 8007128:	e021      	b.n	800716e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	7c1b      	ldrb	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10d      	bne.n	800714e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713a:	f107 0208 	add.w	r2, r7, #8
 800713e:	4610      	mov	r0, r2
 8007140:	4798      	blx	r3
 8007142:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3301      	adds	r3, #1
 8007148:	2207      	movs	r2, #7
 800714a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800714c:	e00f      	b.n	800716e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f9dc 	bl	800750e <USBD_CtlError>
        err++;
 8007156:	7afb      	ldrb	r3, [r7, #11]
 8007158:	3301      	adds	r3, #1
 800715a:	72fb      	strb	r3, [r7, #11]
      break;
 800715c:	e007      	b.n	800716e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f9d4 	bl	800750e <USBD_CtlError>
      err++;
 8007166:	7afb      	ldrb	r3, [r7, #11]
 8007168:	3301      	adds	r3, #1
 800716a:	72fb      	strb	r3, [r7, #11]
      break;
 800716c:	bf00      	nop
  }

  if (err != 0U)
 800716e:	7afb      	ldrb	r3, [r7, #11]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d11c      	bne.n	80071ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007174:	893b      	ldrh	r3, [r7, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d011      	beq.n	800719e <USBD_GetDescriptor+0x2b6>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	88db      	ldrh	r3, [r3, #6]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00d      	beq.n	800719e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	88da      	ldrh	r2, [r3, #6]
 8007186:	893b      	ldrh	r3, [r7, #8]
 8007188:	4293      	cmp	r3, r2
 800718a:	bf28      	it	cs
 800718c:	4613      	movcs	r3, r2
 800718e:	b29b      	uxth	r3, r3
 8007190:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007192:	893b      	ldrh	r3, [r7, #8]
 8007194:	461a      	mov	r2, r3
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fa22 	bl	80075e2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	88db      	ldrh	r3, [r3, #6]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d104      	bne.n	80071b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fa79 	bl	800769e <USBD_CtlSendStatus>
 80071ac:	e000      	b.n	80071b0 <USBD_GetDescriptor+0x2c8>
    return;
 80071ae:	bf00      	nop
    }
  }
}
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop

080071b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	889b      	ldrh	r3, [r3, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d130      	bne.n	800722c <USBD_SetAddress+0x74>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	88db      	ldrh	r3, [r3, #6]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d12c      	bne.n	800722c <USBD_SetAddress+0x74>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	885b      	ldrh	r3, [r3, #2]
 80071d6:	2b7f      	cmp	r3, #127	; 0x7f
 80071d8:	d828      	bhi.n	800722c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	885b      	ldrh	r3, [r3, #2]
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	d104      	bne.n	80071fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f98b 	bl	800750e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f8:	e01d      	b.n	8007236 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	7bfa      	ldrb	r2, [r7, #15]
 80071fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007202:	7bfb      	ldrb	r3, [r7, #15]
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 feb8 	bl	8007f7c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fa46 	bl	800769e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d004      	beq.n	8007222 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007220:	e009      	b.n	8007236 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800722a:	e004      	b.n	8007236 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f96d 	bl	800750e <USBD_CtlError>
  }
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	885b      	ldrh	r3, [r3, #2]
 800724e:	b2da      	uxtb	r2, r3
 8007250:	4b41      	ldr	r3, [pc, #260]	; (8007358 <USBD_SetConfig+0x118>)
 8007252:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007254:	4b40      	ldr	r3, [pc, #256]	; (8007358 <USBD_SetConfig+0x118>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d904      	bls.n	8007266 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f955 	bl	800750e <USBD_CtlError>
 8007264:	e075      	b.n	8007352 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726c:	2b02      	cmp	r3, #2
 800726e:	d002      	beq.n	8007276 <USBD_SetConfig+0x36>
 8007270:	2b03      	cmp	r3, #3
 8007272:	d023      	beq.n	80072bc <USBD_SetConfig+0x7c>
 8007274:	e062      	b.n	800733c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007276:	4b38      	ldr	r3, [pc, #224]	; (8007358 <USBD_SetConfig+0x118>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01a      	beq.n	80072b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800727e:	4b36      	ldr	r3, [pc, #216]	; (8007358 <USBD_SetConfig+0x118>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2203      	movs	r2, #3
 800728c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007290:	4b31      	ldr	r3, [pc, #196]	; (8007358 <USBD_SetConfig+0x118>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff f9e8 	bl	800666c <USBD_SetClassConfig>
 800729c:	4603      	mov	r3, r0
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d104      	bne.n	80072ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f932 	bl	800750e <USBD_CtlError>
            return;
 80072aa:	e052      	b.n	8007352 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f9f6 	bl	800769e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80072b2:	e04e      	b.n	8007352 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f9f2 	bl	800769e <USBD_CtlSendStatus>
        break;
 80072ba:	e04a      	b.n	8007352 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80072bc:	4b26      	ldr	r3, [pc, #152]	; (8007358 <USBD_SetConfig+0x118>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d112      	bne.n	80072ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80072cc:	4b22      	ldr	r3, [pc, #136]	; (8007358 <USBD_SetConfig+0x118>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	461a      	mov	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80072d6:	4b20      	ldr	r3, [pc, #128]	; (8007358 <USBD_SetConfig+0x118>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff f9e4 	bl	80066aa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f9db 	bl	800769e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80072e8:	e033      	b.n	8007352 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80072ea:	4b1b      	ldr	r3, [pc, #108]	; (8007358 <USBD_SetConfig+0x118>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d01d      	beq.n	8007334 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff f9d2 	bl	80066aa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007306:	4b14      	ldr	r3, [pc, #80]	; (8007358 <USBD_SetConfig+0x118>)
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007310:	4b11      	ldr	r3, [pc, #68]	; (8007358 <USBD_SetConfig+0x118>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff f9a8 	bl	800666c <USBD_SetClassConfig>
 800731c:	4603      	mov	r3, r0
 800731e:	2b02      	cmp	r3, #2
 8007320:	d104      	bne.n	800732c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f8f2 	bl	800750e <USBD_CtlError>
            return;
 800732a:	e012      	b.n	8007352 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f9b6 	bl	800769e <USBD_CtlSendStatus>
        break;
 8007332:	e00e      	b.n	8007352 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f9b2 	bl	800769e <USBD_CtlSendStatus>
        break;
 800733a:	e00a      	b.n	8007352 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f8e5 	bl	800750e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007344:	4b04      	ldr	r3, [pc, #16]	; (8007358 <USBD_SetConfig+0x118>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff f9ad 	bl	80066aa <USBD_ClrClassConfig>
        break;
 8007350:	bf00      	nop
    }
  }
}
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	200001cc 	.word	0x200001cc

0800735c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	88db      	ldrh	r3, [r3, #6]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d004      	beq.n	8007378 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f8cc 	bl	800750e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007376:	e022      	b.n	80073be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800737e:	2b02      	cmp	r3, #2
 8007380:	dc02      	bgt.n	8007388 <USBD_GetConfig+0x2c>
 8007382:	2b00      	cmp	r3, #0
 8007384:	dc03      	bgt.n	800738e <USBD_GetConfig+0x32>
 8007386:	e015      	b.n	80073b4 <USBD_GetConfig+0x58>
 8007388:	2b03      	cmp	r3, #3
 800738a:	d00b      	beq.n	80073a4 <USBD_GetConfig+0x48>
 800738c:	e012      	b.n	80073b4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3308      	adds	r3, #8
 8007398:	2201      	movs	r2, #1
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f920 	bl	80075e2 <USBD_CtlSendData>
        break;
 80073a2:	e00c      	b.n	80073be <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3304      	adds	r3, #4
 80073a8:	2201      	movs	r2, #1
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f918 	bl	80075e2 <USBD_CtlSendData>
        break;
 80073b2:	e004      	b.n	80073be <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f8a9 	bl	800750e <USBD_CtlError>
        break;
 80073bc:	bf00      	nop
}
 80073be:	bf00      	nop
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d6:	3b01      	subs	r3, #1
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d81e      	bhi.n	800741a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	88db      	ldrh	r3, [r3, #6]
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d004      	beq.n	80073ee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f891 	bl	800750e <USBD_CtlError>
        break;
 80073ec:	e01a      	b.n	8007424 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d005      	beq.n	800740a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f043 0202 	orr.w	r2, r3, #2
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	330c      	adds	r3, #12
 800740e:	2202      	movs	r2, #2
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f8e5 	bl	80075e2 <USBD_CtlSendData>
      break;
 8007418:	e004      	b.n	8007424 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f876 	bl	800750e <USBD_CtlError>
      break;
 8007422:	bf00      	nop
  }
}
 8007424:	bf00      	nop
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	885b      	ldrh	r3, [r3, #2]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d106      	bne.n	800744c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f929 	bl	800769e <USBD_CtlSendStatus>
  }
}
 800744c:	bf00      	nop
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007464:	3b01      	subs	r3, #1
 8007466:	2b02      	cmp	r3, #2
 8007468:	d80b      	bhi.n	8007482 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	885b      	ldrh	r3, [r3, #2]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d10c      	bne.n	800748c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f90f 	bl	800769e <USBD_CtlSendStatus>
      }
      break;
 8007480:	e004      	b.n	800748c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f842 	bl	800750e <USBD_CtlError>
      break;
 800748a:	e000      	b.n	800748e <USBD_ClrFeature+0x3a>
      break;
 800748c:	bf00      	nop
  }
}
 800748e:	bf00      	nop
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	781a      	ldrb	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	785a      	ldrb	r2, [r3, #1]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	3302      	adds	r3, #2
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	3303      	adds	r3, #3
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	b29b      	uxth	r3, r3
 80074c0:	021b      	lsls	r3, r3, #8
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	4413      	add	r3, r2
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	3304      	adds	r3, #4
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	3305      	adds	r3, #5
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	b29b      	uxth	r3, r3
 80074dc:	021b      	lsls	r3, r3, #8
 80074de:	b29b      	uxth	r3, r3
 80074e0:	4413      	add	r3, r2
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	3306      	adds	r3, #6
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	3307      	adds	r3, #7
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	021b      	lsls	r3, r3, #8
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	4413      	add	r3, r2
 80074fe:	b29a      	uxth	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	80da      	strh	r2, [r3, #6]

}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	bc80      	pop	{r7}
 800750c:	4770      	bx	lr

0800750e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b082      	sub	sp, #8
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007518:	2180      	movs	r1, #128	; 0x80
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fcc4 	bl	8007ea8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007520:	2100      	movs	r1, #0
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fcc0 	bl	8007ea8 <USBD_LL_StallEP>
}
 8007528:	bf00      	nop
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d032      	beq.n	80075ac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 f834 	bl	80075b4 <USBD_GetLen>
 800754c:	4603      	mov	r3, r0
 800754e:	3301      	adds	r3, #1
 8007550:	b29b      	uxth	r3, r3
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	75fa      	strb	r2, [r7, #23]
 8007560:	461a      	mov	r2, r3
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	4413      	add	r3, r2
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	7812      	ldrb	r2, [r2, #0]
 800756a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800756c:	7dfb      	ldrb	r3, [r7, #23]
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	75fa      	strb	r2, [r7, #23]
 8007572:	461a      	mov	r2, r3
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	4413      	add	r3, r2
 8007578:	2203      	movs	r2, #3
 800757a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800757c:	e012      	b.n	80075a4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	60fa      	str	r2, [r7, #12]
 8007584:	7dfa      	ldrb	r2, [r7, #23]
 8007586:	1c51      	adds	r1, r2, #1
 8007588:	75f9      	strb	r1, [r7, #23]
 800758a:	4611      	mov	r1, r2
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	440a      	add	r2, r1
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	75fa      	strb	r2, [r7, #23]
 800759a:	461a      	mov	r2, r3
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	4413      	add	r3, r2
 80075a0:	2200      	movs	r2, #0
 80075a2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1e8      	bne.n	800757e <USBD_GetString+0x4e>
    }
  }
}
 80075ac:	bf00      	nop
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80075c0:	e005      	b.n	80075ce <USBD_GetLen+0x1a>
  {
    len++;
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	3301      	adds	r3, #1
 80075c6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	3301      	adds	r3, #1
 80075cc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1f5      	bne.n	80075c2 <USBD_GetLen+0xe>
  }

  return len;
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	bc80      	pop	{r7}
 80075e0:	4770      	bx	lr

080075e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	60b9      	str	r1, [r7, #8]
 80075ec:	4613      	mov	r3, r2
 80075ee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80075f8:	88fa      	ldrh	r2, [r7, #6]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80075fe:	88fa      	ldrh	r2, [r7, #6]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007604:	88fb      	ldrh	r3, [r7, #6]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	2100      	movs	r1, #0
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 fcd5 	bl	8007fba <USBD_LL_Transmit>

  return USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	4613      	mov	r3, r2
 8007626:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007628:	88fb      	ldrh	r3, [r7, #6]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	2100      	movs	r1, #0
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fcc3 	bl	8007fba <USBD_LL_Transmit>

  return USBD_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	4613      	mov	r3, r2
 800764a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2203      	movs	r2, #3
 8007650:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007654:	88fa      	ldrh	r2, [r7, #6]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800765c:	88fa      	ldrh	r2, [r7, #6]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007664:	88fb      	ldrh	r3, [r7, #6]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	2100      	movs	r1, #0
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 fcc8 	bl	8008000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	4613      	mov	r3, r2
 8007686:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007688:	88fb      	ldrh	r3, [r7, #6]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	2100      	movs	r1, #0
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 fcb6 	bl	8008000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2204      	movs	r2, #4
 80076aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076ae:	2300      	movs	r3, #0
 80076b0:	2200      	movs	r2, #0
 80076b2:	2100      	movs	r1, #0
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fc80 	bl	8007fba <USBD_LL_Transmit>

  return USBD_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2205      	movs	r2, #5
 80076d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076d4:	2300      	movs	r3, #0
 80076d6:	2200      	movs	r2, #0
 80076d8:	2100      	movs	r1, #0
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fc90 	bl	8008000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80076f0:	2200      	movs	r2, #0
 80076f2:	4912      	ldr	r1, [pc, #72]	; (800773c <MX_USB_DEVICE_Init+0x50>)
 80076f4:	4812      	ldr	r0, [pc, #72]	; (8007740 <MX_USB_DEVICE_Init+0x54>)
 80076f6:	f7fe ff5f 	bl	80065b8 <USBD_Init>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007700:	f7f8 fdd7 	bl	80002b2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007704:	490f      	ldr	r1, [pc, #60]	; (8007744 <MX_USB_DEVICE_Init+0x58>)
 8007706:	480e      	ldr	r0, [pc, #56]	; (8007740 <MX_USB_DEVICE_Init+0x54>)
 8007708:	f7fe ff81 	bl	800660e <USBD_RegisterClass>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007712:	f7f8 fdce 	bl	80002b2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007716:	490c      	ldr	r1, [pc, #48]	; (8007748 <MX_USB_DEVICE_Init+0x5c>)
 8007718:	4809      	ldr	r0, [pc, #36]	; (8007740 <MX_USB_DEVICE_Init+0x54>)
 800771a:	f7fe fee1 	bl	80064e0 <USBD_CDC_RegisterInterface>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007724:	f7f8 fdc5 	bl	80002b2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007728:	4805      	ldr	r0, [pc, #20]	; (8007740 <MX_USB_DEVICE_Init+0x54>)
 800772a:	f7fe ff89 	bl	8006640 <USBD_Start>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007734:	f7f8 fdbd 	bl	80002b2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007738:	bf00      	nop
 800773a:	bd80      	pop	{r7, pc}
 800773c:	20000140 	.word	0x20000140
 8007740:	200001d0 	.word	0x200001d0
 8007744:	20000020 	.word	0x20000020
 8007748:	20000130 	.word	0x20000130

0800774c <cdcDataIn>:
  return ret;
}


void cdcDataIn(uint8_t rx_data)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	4603      	mov	r3, r0
 8007754:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 8007756:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <cdcDataIn+0x44>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	490e      	ldr	r1, [pc, #56]	; (8007794 <cdcDataIn+0x48>)
 800775c:	79fa      	ldrb	r2, [r7, #7]
 800775e:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 8007760:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <cdcDataIn+0x44>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3301      	adds	r3, #1
 8007766:	4a0c      	ldr	r2, [pc, #48]	; (8007798 <cdcDataIn+0x4c>)
 8007768:	6812      	ldr	r2, [r2, #0]
 800776a:	fbb3 f1f2 	udiv	r1, r3, r2
 800776e:	fb01 f202 	mul.w	r2, r1, r2
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	60fb      	str	r3, [r7, #12]

  if (next_rx_in != rx_out)
 8007776:	4b09      	ldr	r3, [pc, #36]	; (800779c <cdcDataIn+0x50>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	429a      	cmp	r2, r3
 800777e:	d002      	beq.n	8007786 <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 8007780:	4a03      	ldr	r2, [pc, #12]	; (8007790 <cdcDataIn+0x44>)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6013      	str	r3, [r2, #0]
  }
}
 8007786:	bf00      	nop
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	bc80      	pop	{r7}
 800778e:	4770      	bx	lr
 8007790:	20000494 	.word	0x20000494
 8007794:	2000049c 	.word	0x2000049c
 8007798:	2000012c 	.word	0x2000012c
 800779c:	20000498 	.word	0x20000498

080077a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80077a4:	2200      	movs	r2, #0
 80077a6:	4905      	ldr	r1, [pc, #20]	; (80077bc <CDC_Init_FS+0x1c>)
 80077a8:	4805      	ldr	r0, [pc, #20]	; (80077c0 <CDC_Init_FS+0x20>)
 80077aa:	f7fe feaf 	bl	800650c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80077ae:	4905      	ldr	r1, [pc, #20]	; (80077c4 <CDC_Init_FS+0x24>)
 80077b0:	4803      	ldr	r0, [pc, #12]	; (80077c0 <CDC_Init_FS+0x20>)
 80077b2:	f7fe fec4 	bl	800653e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80077b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	2000089c 	.word	0x2000089c
 80077c0:	200001d0 	.word	0x200001d0
 80077c4:	2000069c 	.word	0x2000069c

080077c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80077c8:	b480      	push	{r7}
 80077ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80077cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bc80      	pop	{r7}
 80077d4:	4770      	bx	lr
	...

080077d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	6039      	str	r1, [r7, #0]
 80077e2:	71fb      	strb	r3, [r7, #7]
 80077e4:	4613      	mov	r3, r2
 80077e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80077e8:	79fb      	ldrb	r3, [r7, #7]
 80077ea:	2b23      	cmp	r3, #35	; 0x23
 80077ec:	f200 80a3 	bhi.w	8007936 <CDC_Control_FS+0x15e>
 80077f0:	a201      	add	r2, pc, #4	; (adr r2, 80077f8 <CDC_Control_FS+0x20>)
 80077f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f6:	bf00      	nop
 80077f8:	08007937 	.word	0x08007937
 80077fc:	08007937 	.word	0x08007937
 8007800:	08007889 	.word	0x08007889
 8007804:	080078e3 	.word	0x080078e3
 8007808:	08007937 	.word	0x08007937
 800780c:	08007937 	.word	0x08007937
 8007810:	08007937 	.word	0x08007937
 8007814:	08007937 	.word	0x08007937
 8007818:	08007937 	.word	0x08007937
 800781c:	08007937 	.word	0x08007937
 8007820:	08007937 	.word	0x08007937
 8007824:	08007937 	.word	0x08007937
 8007828:	08007937 	.word	0x08007937
 800782c:	08007937 	.word	0x08007937
 8007830:	08007937 	.word	0x08007937
 8007834:	08007937 	.word	0x08007937
 8007838:	08007937 	.word	0x08007937
 800783c:	08007937 	.word	0x08007937
 8007840:	08007937 	.word	0x08007937
 8007844:	08007937 	.word	0x08007937
 8007848:	08007937 	.word	0x08007937
 800784c:	08007937 	.word	0x08007937
 8007850:	08007937 	.word	0x08007937
 8007854:	08007937 	.word	0x08007937
 8007858:	08007937 	.word	0x08007937
 800785c:	08007937 	.word	0x08007937
 8007860:	08007937 	.word	0x08007937
 8007864:	08007937 	.word	0x08007937
 8007868:	08007937 	.word	0x08007937
 800786c:	08007937 	.word	0x08007937
 8007870:	08007937 	.word	0x08007937
 8007874:	08007937 	.word	0x08007937
 8007878:	08007937 	.word	0x08007937
 800787c:	08007937 	.word	0x08007937
 8007880:	08007937 	.word	0x08007937
 8007884:	08007937 	.word	0x08007937
    case CDC_GET_ENCAPSULATED_RESPONSE:

    break;

    case CDC_SET_COMM_FEATURE:
      LineCoding.bitrate = (uint32_t)(pbuf[0]);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	4b2d      	ldr	r3, [pc, #180]	; (8007944 <CDC_Control_FS+0x16c>)
 8007890:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 8007892:	4b2c      	ldr	r3, [pc, #176]	; (8007944 <CDC_Control_FS+0x16c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	3201      	adds	r2, #1
 800789a:	7812      	ldrb	r2, [r2, #0]
 800789c:	0212      	lsls	r2, r2, #8
 800789e:	4313      	orrs	r3, r2
 80078a0:	4a28      	ldr	r2, [pc, #160]	; (8007944 <CDC_Control_FS+0x16c>)
 80078a2:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 80078a4:	4b27      	ldr	r3, [pc, #156]	; (8007944 <CDC_Control_FS+0x16c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	3202      	adds	r2, #2
 80078ac:	7812      	ldrb	r2, [r2, #0]
 80078ae:	0412      	lsls	r2, r2, #16
 80078b0:	4313      	orrs	r3, r2
 80078b2:	4a24      	ldr	r2, [pc, #144]	; (8007944 <CDC_Control_FS+0x16c>)
 80078b4:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 80078b6:	4b23      	ldr	r3, [pc, #140]	; (8007944 <CDC_Control_FS+0x16c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	3203      	adds	r2, #3
 80078be:	7812      	ldrb	r2, [r2, #0]
 80078c0:	0612      	lsls	r2, r2, #24
 80078c2:	4313      	orrs	r3, r2
 80078c4:	4a1f      	ldr	r2, [pc, #124]	; (8007944 <CDC_Control_FS+0x16c>)
 80078c6:	6013      	str	r3, [r2, #0]
      LineCoding.format = pbuf[4];
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	791a      	ldrb	r2, [r3, #4]
 80078cc:	4b1d      	ldr	r3, [pc, #116]	; (8007944 <CDC_Control_FS+0x16c>)
 80078ce:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	795a      	ldrb	r2, [r3, #5]
 80078d4:	4b1b      	ldr	r3, [pc, #108]	; (8007944 <CDC_Control_FS+0x16c>)
 80078d6:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype = pbuf[6];
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	799a      	ldrb	r2, [r3, #6]
 80078dc:	4b19      	ldr	r3, [pc, #100]	; (8007944 <CDC_Control_FS+0x16c>)
 80078de:	719a      	strb	r2, [r3, #6]
    break;
 80078e0:	e02a      	b.n	8007938 <CDC_Control_FS+0x160>

    case CDC_GET_COMM_FEATURE:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80078e2:	4b18      	ldr	r3, [pc, #96]	; (8007944 <CDC_Control_FS+0x16c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 80078ec:	4b15      	ldr	r3, [pc, #84]	; (8007944 <CDC_Control_FS+0x16c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	0a1a      	lsrs	r2, r3, #8
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	3301      	adds	r3, #1
 80078f6:	b2d2      	uxtb	r2, r2
 80078f8:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 80078fa:	4b12      	ldr	r3, [pc, #72]	; (8007944 <CDC_Control_FS+0x16c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	0c1a      	lsrs	r2, r3, #16
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	3302      	adds	r3, #2
 8007904:	b2d2      	uxtb	r2, r2
 8007906:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8007908:	4b0e      	ldr	r3, [pc, #56]	; (8007944 <CDC_Control_FS+0x16c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	0e1a      	lsrs	r2, r3, #24
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	3303      	adds	r3, #3
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	3304      	adds	r3, #4
 800791a:	4a0a      	ldr	r2, [pc, #40]	; (8007944 <CDC_Control_FS+0x16c>)
 800791c:	7912      	ldrb	r2, [r2, #4]
 800791e:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	3305      	adds	r3, #5
 8007924:	4a07      	ldr	r2, [pc, #28]	; (8007944 <CDC_Control_FS+0x16c>)
 8007926:	7952      	ldrb	r2, [r2, #5]
 8007928:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	3306      	adds	r3, #6
 800792e:	4a05      	ldr	r2, [pc, #20]	; (8007944 <CDC_Control_FS+0x16c>)
 8007930:	7992      	ldrb	r2, [r2, #6]
 8007932:	701a      	strb	r2, [r3, #0]
    break;
 8007934:	e000      	b.n	8007938 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007936:	bf00      	nop
  }

  return (USBD_OK);
 8007938:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800793a:	4618      	mov	r0, r3
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	bc80      	pop	{r7}
 8007942:	4770      	bx	lr
 8007944:	20000124 	.word	0x20000124

08007948 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	480e      	ldr	r0, [pc, #56]	; (8007990 <CDC_Receive_FS+0x48>)
 8007956:	f7fe fdf2 	bl	800653e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800795a:	480d      	ldr	r0, [pc, #52]	; (8007990 <CDC_Receive_FS+0x48>)
 800795c:	f7fe fe02 	bl	8006564 <USBD_CDC_ReceivePacket>

  for ( int i = 0; i < *Len; i++)
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	e009      	b.n	800797a <CDC_Receive_FS+0x32>
  {
    cdcDataIn(Buf[i]);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	4413      	add	r3, r2
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff feec 	bl	800774c <cdcDataIn>
  for ( int i = 0; i < *Len; i++)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	3301      	adds	r3, #1
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	429a      	cmp	r2, r3
 8007982:	d8f0      	bhi.n	8007966 <CDC_Receive_FS+0x1e>
  }
  return (USBD_OK);
 8007984:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	200001d0 	.word	0x200001d0

08007994 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	6039      	str	r1, [r7, #0]
 800799e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2212      	movs	r2, #18
 80079a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80079a6:	4b03      	ldr	r3, [pc, #12]	; (80079b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bc80      	pop	{r7}
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	2000015c 	.word	0x2000015c

080079b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	6039      	str	r1, [r7, #0]
 80079c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2204      	movs	r2, #4
 80079c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80079ca:	4b03      	ldr	r3, [pc, #12]	; (80079d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bc80      	pop	{r7}
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	20000170 	.word	0x20000170

080079dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	4603      	mov	r3, r0
 80079e4:	6039      	str	r1, [r7, #0]
 80079e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079e8:	79fb      	ldrb	r3, [r7, #7]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d105      	bne.n	80079fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	4907      	ldr	r1, [pc, #28]	; (8007a10 <USBD_FS_ProductStrDescriptor+0x34>)
 80079f2:	4808      	ldr	r0, [pc, #32]	; (8007a14 <USBD_FS_ProductStrDescriptor+0x38>)
 80079f4:	f7ff fd9c 	bl	8007530 <USBD_GetString>
 80079f8:	e004      	b.n	8007a04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	4904      	ldr	r1, [pc, #16]	; (8007a10 <USBD_FS_ProductStrDescriptor+0x34>)
 80079fe:	4805      	ldr	r0, [pc, #20]	; (8007a14 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a00:	f7ff fd96 	bl	8007530 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a04:	4b02      	ldr	r3, [pc, #8]	; (8007a10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000a9c 	.word	0x20000a9c
 8007a14:	080081ac 	.word	0x080081ac

08007a18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	6039      	str	r1, [r7, #0]
 8007a22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	4904      	ldr	r1, [pc, #16]	; (8007a38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a28:	4804      	ldr	r0, [pc, #16]	; (8007a3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a2a:	f7ff fd81 	bl	8007530 <USBD_GetString>
  return USBD_StrDesc;
 8007a2e:	4b02      	ldr	r3, [pc, #8]	; (8007a38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	20000a9c 	.word	0x20000a9c
 8007a3c:	080081c4 	.word	0x080081c4

08007a40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	6039      	str	r1, [r7, #0]
 8007a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	221a      	movs	r2, #26
 8007a50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a52:	f000 f843 	bl	8007adc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a56:	4b02      	ldr	r3, [pc, #8]	; (8007a60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20000174 	.word	0x20000174

08007a64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	6039      	str	r1, [r7, #0]
 8007a6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a70:	79fb      	ldrb	r3, [r7, #7]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d105      	bne.n	8007a82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	4907      	ldr	r1, [pc, #28]	; (8007a98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a7a:	4808      	ldr	r0, [pc, #32]	; (8007a9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a7c:	f7ff fd58 	bl	8007530 <USBD_GetString>
 8007a80:	e004      	b.n	8007a8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	4904      	ldr	r1, [pc, #16]	; (8007a98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a86:	4805      	ldr	r0, [pc, #20]	; (8007a9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a88:	f7ff fd52 	bl	8007530 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a8c:	4b02      	ldr	r3, [pc, #8]	; (8007a98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	20000a9c 	.word	0x20000a9c
 8007a9c:	080081d8 	.word	0x080081d8

08007aa0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	6039      	str	r1, [r7, #0]
 8007aaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007aac:	79fb      	ldrb	r3, [r7, #7]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d105      	bne.n	8007abe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	4907      	ldr	r1, [pc, #28]	; (8007ad4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ab6:	4808      	ldr	r0, [pc, #32]	; (8007ad8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ab8:	f7ff fd3a 	bl	8007530 <USBD_GetString>
 8007abc:	e004      	b.n	8007ac8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	4904      	ldr	r1, [pc, #16]	; (8007ad4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ac2:	4805      	ldr	r0, [pc, #20]	; (8007ad8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ac4:	f7ff fd34 	bl	8007530 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ac8:	4b02      	ldr	r3, [pc, #8]	; (8007ad4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000a9c 	.word	0x20000a9c
 8007ad8:	080081e4 	.word	0x080081e4

08007adc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007ae2:	4b0f      	ldr	r3, [pc, #60]	; (8007b20 <Get_SerialNum+0x44>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007ae8:	4b0e      	ldr	r3, [pc, #56]	; (8007b24 <Get_SerialNum+0x48>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007aee:	4b0e      	ldr	r3, [pc, #56]	; (8007b28 <Get_SerialNum+0x4c>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4413      	add	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d009      	beq.n	8007b16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b02:	2208      	movs	r2, #8
 8007b04:	4909      	ldr	r1, [pc, #36]	; (8007b2c <Get_SerialNum+0x50>)
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 f814 	bl	8007b34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b0c:	2204      	movs	r2, #4
 8007b0e:	4908      	ldr	r1, [pc, #32]	; (8007b30 <Get_SerialNum+0x54>)
 8007b10:	68b8      	ldr	r0, [r7, #8]
 8007b12:	f000 f80f 	bl	8007b34 <IntToUnicode>
  }
}
 8007b16:	bf00      	nop
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	1ffff7e8 	.word	0x1ffff7e8
 8007b24:	1ffff7ec 	.word	0x1ffff7ec
 8007b28:	1ffff7f0 	.word	0x1ffff7f0
 8007b2c:	20000176 	.word	0x20000176
 8007b30:	20000186 	.word	0x20000186

08007b34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b46:	2300      	movs	r3, #0
 8007b48:	75fb      	strb	r3, [r7, #23]
 8007b4a:	e027      	b.n	8007b9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	0f1b      	lsrs	r3, r3, #28
 8007b50:	2b09      	cmp	r3, #9
 8007b52:	d80b      	bhi.n	8007b6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	0f1b      	lsrs	r3, r3, #28
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	7dfb      	ldrb	r3, [r7, #23]
 8007b5c:	005b      	lsls	r3, r3, #1
 8007b5e:	4619      	mov	r1, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	440b      	add	r3, r1
 8007b64:	3230      	adds	r2, #48	; 0x30
 8007b66:	b2d2      	uxtb	r2, r2
 8007b68:	701a      	strb	r2, [r3, #0]
 8007b6a:	e00a      	b.n	8007b82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	0f1b      	lsrs	r3, r3, #28
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	4619      	mov	r1, r3
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	440b      	add	r3, r1
 8007b7c:	3237      	adds	r2, #55	; 0x37
 8007b7e:	b2d2      	uxtb	r2, r2
 8007b80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	011b      	lsls	r3, r3, #4
 8007b86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b88:	7dfb      	ldrb	r3, [r7, #23]
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	4413      	add	r3, r2
 8007b92:	2200      	movs	r2, #0
 8007b94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	75fb      	strb	r3, [r7, #23]
 8007b9c:	7dfa      	ldrb	r2, [r7, #23]
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d3d3      	bcc.n	8007b4c <IntToUnicode+0x18>
  }
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bc80      	pop	{r7}
 8007bae:	4770      	bx	lr

08007bb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a0d      	ldr	r2, [pc, #52]	; (8007bf4 <HAL_PCD_MspInit+0x44>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d113      	bne.n	8007bea <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007bc2:	4b0d      	ldr	r3, [pc, #52]	; (8007bf8 <HAL_PCD_MspInit+0x48>)
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	4a0c      	ldr	r2, [pc, #48]	; (8007bf8 <HAL_PCD_MspInit+0x48>)
 8007bc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007bcc:	61d3      	str	r3, [r2, #28]
 8007bce:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <HAL_PCD_MspInit+0x48>)
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2100      	movs	r1, #0
 8007bde:	2014      	movs	r0, #20
 8007be0:	f7f8 fef7 	bl	80009d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007be4:	2014      	movs	r0, #20
 8007be6:	f7f8 ff10 	bl	8000a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007bea:	bf00      	nop
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	40005c00 	.word	0x40005c00
 8007bf8:	40021000 	.word	0x40021000

08007bfc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007c10:	4619      	mov	r1, r3
 8007c12:	4610      	mov	r0, r2
 8007c14:	f7fe fd5c 	bl	80066d0 <USBD_LL_SetupStage>
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007c32:	78fa      	ldrb	r2, [r7, #3]
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	00db      	lsls	r3, r3, #3
 8007c3e:	440b      	add	r3, r1
 8007c40:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	f7fe fd8e 	bl	800676a <USBD_LL_DataOutStage>
}
 8007c4e:	bf00      	nop
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b082      	sub	sp, #8
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	460b      	mov	r3, r1
 8007c60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007c68:	78fa      	ldrb	r2, [r7, #3]
 8007c6a:	6879      	ldr	r1, [r7, #4]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	440b      	add	r3, r1
 8007c76:	333c      	adds	r3, #60	; 0x3c
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	f7fe fde5 	bl	800684c <USBD_LL_DataInStage>
}
 8007c82:	bf00      	nop
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7fe fef5 	bl	8006a88 <USBD_LL_SOF>
}
 8007c9e:	bf00      	nop
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d001      	beq.n	8007cbe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007cba:	f7f8 fafa 	bl	80002b2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007cc4:	7bfa      	ldrb	r2, [r7, #15]
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fe fea5 	bl	8006a18 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fe fe5e 	bl	8006996 <USBD_LL_Reset>
}
 8007cda:	bf00      	nop
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe fe9f 	bl	8006a36 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d005      	beq.n	8007d0c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d00:	4b04      	ldr	r3, [pc, #16]	; (8007d14 <HAL_PCD_SuspendCallback+0x30>)
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	4a03      	ldr	r2, [pc, #12]	; (8007d14 <HAL_PCD_SuspendCallback+0x30>)
 8007d06:	f043 0306 	orr.w	r3, r3, #6
 8007d0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d0c:	bf00      	nop
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	e000ed00 	.word	0xe000ed00

08007d18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fe99 	bl	8006a5e <USBD_LL_Resume>
}
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007d3c:	4a28      	ldr	r2, [pc, #160]	; (8007de0 <USBD_LL_Init+0xac>)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a26      	ldr	r2, [pc, #152]	; (8007de0 <USBD_LL_Init+0xac>)
 8007d48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007d4c:	4b24      	ldr	r3, [pc, #144]	; (8007de0 <USBD_LL_Init+0xac>)
 8007d4e:	4a25      	ldr	r2, [pc, #148]	; (8007de4 <USBD_LL_Init+0xb0>)
 8007d50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007d52:	4b23      	ldr	r3, [pc, #140]	; (8007de0 <USBD_LL_Init+0xac>)
 8007d54:	2208      	movs	r2, #8
 8007d56:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007d58:	4b21      	ldr	r3, [pc, #132]	; (8007de0 <USBD_LL_Init+0xac>)
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007d5e:	4b20      	ldr	r3, [pc, #128]	; (8007de0 <USBD_LL_Init+0xac>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007d64:	4b1e      	ldr	r3, [pc, #120]	; (8007de0 <USBD_LL_Init+0xac>)
 8007d66:	2200      	movs	r2, #0
 8007d68:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007d6a:	4b1d      	ldr	r3, [pc, #116]	; (8007de0 <USBD_LL_Init+0xac>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007d70:	481b      	ldr	r0, [pc, #108]	; (8007de0 <USBD_LL_Init+0xac>)
 8007d72:	f7f9 f81a 	bl	8000daa <HAL_PCD_Init>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007d7c:	f7f8 fa99 	bl	80002b2 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d86:	2318      	movs	r3, #24
 8007d88:	2200      	movs	r2, #0
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	f7fa fc8e 	bl	80026ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d96:	2358      	movs	r3, #88	; 0x58
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2180      	movs	r1, #128	; 0x80
 8007d9c:	f7fa fc86 	bl	80026ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007da6:	23c0      	movs	r3, #192	; 0xc0
 8007da8:	2200      	movs	r2, #0
 8007daa:	2181      	movs	r1, #129	; 0x81
 8007dac:	f7fa fc7e 	bl	80026ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007db6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	f7fa fc75 	bl	80026ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2182      	movs	r1, #130	; 0x82
 8007dd0:	f7fa fc6c 	bl	80026ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000c9c 	.word	0x20000c9c
 8007de4:	40005c00 	.word	0x40005c00

08007de8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7f9 f8de 	bl	8000fc0 <HAL_PCD_Start>
 8007e04:	4603      	mov	r3, r0
 8007e06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 f94e 	bl	80080ac <USBD_Get_USB_Status>
 8007e10:	4603      	mov	r3, r0
 8007e12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	4608      	mov	r0, r1
 8007e28:	4611      	mov	r1, r2
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	70fb      	strb	r3, [r7, #3]
 8007e30:	460b      	mov	r3, r1
 8007e32:	70bb      	strb	r3, [r7, #2]
 8007e34:	4613      	mov	r3, r2
 8007e36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e46:	78bb      	ldrb	r3, [r7, #2]
 8007e48:	883a      	ldrh	r2, [r7, #0]
 8007e4a:	78f9      	ldrb	r1, [r7, #3]
 8007e4c:	f7f9 fa56 	bl	80012fc <HAL_PCD_EP_Open>
 8007e50:	4603      	mov	r3, r0
 8007e52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 f928 	bl	80080ac <USBD_Get_USB_Status>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	460b      	mov	r3, r1
 8007e74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e84:	78fa      	ldrb	r2, [r7, #3]
 8007e86:	4611      	mov	r1, r2
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7f9 fa9d 	bl	80013c8 <HAL_PCD_EP_Close>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 f909 	bl	80080ac <USBD_Get_USB_Status>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ec2:	78fa      	ldrb	r2, [r7, #3]
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7f9 fb5d 	bl	8001586 <HAL_PCD_EP_SetStall>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 f8ea 	bl	80080ac <USBD_Get_USB_Status>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	460b      	mov	r3, r1
 8007ef0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f00:	78fa      	ldrb	r2, [r7, #3]
 8007f02:	4611      	mov	r1, r2
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7f9 fb9e 	bl	8001646 <HAL_PCD_EP_ClrStall>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f000 f8cb 	bl	80080ac <USBD_Get_USB_Status>
 8007f16:	4603      	mov	r3, r0
 8007f18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	da0c      	bge.n	8007f5a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f40:	78fb      	ldrb	r3, [r7, #3]
 8007f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f46:	68f9      	ldr	r1, [r7, #12]
 8007f48:	1c5a      	adds	r2, r3, #1
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	440b      	add	r3, r1
 8007f54:	3302      	adds	r3, #2
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	e00b      	b.n	8007f72 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f60:	68f9      	ldr	r1, [r7, #12]
 8007f62:	4613      	mov	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	00db      	lsls	r3, r3, #3
 8007f6a:	440b      	add	r3, r1
 8007f6c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007f70:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bc80      	pop	{r7}
 8007f7a:	4770      	bx	lr

08007f7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f96:	78fa      	ldrb	r2, [r7, #3]
 8007f98:	4611      	mov	r1, r2
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7f9 f989 	bl	80012b2 <HAL_PCD_SetAddress>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 f880 	bl	80080ac <USBD_Get_USB_Status>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b086      	sub	sp, #24
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	72fb      	strb	r3, [r7, #11]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fdc:	893b      	ldrh	r3, [r7, #8]
 8007fde:	7af9      	ldrb	r1, [r7, #11]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	f7f9 fa8d 	bl	8001500 <HAL_PCD_EP_Transmit>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 f85d 	bl	80080ac <USBD_Get_USB_Status>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ff6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	607a      	str	r2, [r7, #4]
 800800a:	461a      	mov	r2, r3
 800800c:	460b      	mov	r3, r1
 800800e:	72fb      	strb	r3, [r7, #11]
 8008010:	4613      	mov	r3, r2
 8008012:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008022:	893b      	ldrh	r3, [r7, #8]
 8008024:	7af9      	ldrb	r1, [r7, #11]
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	f7f9 fa16 	bl	8001458 <HAL_PCD_EP_Receive>
 800802c:	4603      	mov	r3, r0
 800802e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	4618      	mov	r0, r3
 8008034:	f000 f83a 	bl	80080ac <USBD_Get_USB_Status>
 8008038:	4603      	mov	r3, r0
 800803a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800803c:	7dbb      	ldrb	r3, [r7, #22]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3718      	adds	r7, #24
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b082      	sub	sp, #8
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	460b      	mov	r3, r1
 8008050:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008058:	78fa      	ldrb	r2, [r7, #3]
 800805a:	4611      	mov	r1, r2
 800805c:	4618      	mov	r0, r3
 800805e:	f7f9 fa38 	bl	80014d2 <HAL_PCD_EP_GetRxCount>
 8008062:	4603      	mov	r3, r0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008074:	4b02      	ldr	r3, [pc, #8]	; (8008080 <USBD_static_malloc+0x14>)
}
 8008076:	4618      	mov	r0, r3
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr
 8008080:	20000f88 	.word	0x20000f88

08008084 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]

}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	bc80      	pop	{r7}
 8008094:	4770      	bx	lr

08008096 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80080a2:	bf00      	nop
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bc80      	pop	{r7}
 80080aa:	4770      	bx	lr

080080ac <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	4603      	mov	r3, r0
 80080b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080ba:	79fb      	ldrb	r3, [r7, #7]
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d817      	bhi.n	80080f0 <USBD_Get_USB_Status+0x44>
 80080c0:	a201      	add	r2, pc, #4	; (adr r2, 80080c8 <USBD_Get_USB_Status+0x1c>)
 80080c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c6:	bf00      	nop
 80080c8:	080080d9 	.word	0x080080d9
 80080cc:	080080df 	.word	0x080080df
 80080d0:	080080e5 	.word	0x080080e5
 80080d4:	080080eb 	.word	0x080080eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	73fb      	strb	r3, [r7, #15]
    break;
 80080dc:	e00b      	b.n	80080f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080de:	2302      	movs	r3, #2
 80080e0:	73fb      	strb	r3, [r7, #15]
    break;
 80080e2:	e008      	b.n	80080f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080e4:	2301      	movs	r3, #1
 80080e6:	73fb      	strb	r3, [r7, #15]
    break;
 80080e8:	e005      	b.n	80080f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080ea:	2302      	movs	r3, #2
 80080ec:	73fb      	strb	r3, [r7, #15]
    break;
 80080ee:	e002      	b.n	80080f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80080f0:	2302      	movs	r3, #2
 80080f2:	73fb      	strb	r3, [r7, #15]
    break;
 80080f4:	bf00      	nop
  }
  return usb_status;
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bc80      	pop	{r7}
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop

08008104 <main>:

#include "main.h"


int main(void)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	af00      	add	r7, sp, #0
  hwInit();
 8008108:	f7f8 faf6 	bl	80006f8 <hwInit>
  apInit();
 800810c:	f7f8 f81e 	bl	800014c <apInit>

  apMain();
 8008110:	f7f8 f825 	bl	800015e <apMain>

  return 0;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <__libc_init_array>:
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	2600      	movs	r6, #0
 8008120:	4d0c      	ldr	r5, [pc, #48]	; (8008154 <__libc_init_array+0x38>)
 8008122:	4c0d      	ldr	r4, [pc, #52]	; (8008158 <__libc_init_array+0x3c>)
 8008124:	1b64      	subs	r4, r4, r5
 8008126:	10a4      	asrs	r4, r4, #2
 8008128:	42a6      	cmp	r6, r4
 800812a:	d109      	bne.n	8008140 <__libc_init_array+0x24>
 800812c:	f000 f822 	bl	8008174 <_init>
 8008130:	2600      	movs	r6, #0
 8008132:	4d0a      	ldr	r5, [pc, #40]	; (800815c <__libc_init_array+0x40>)
 8008134:	4c0a      	ldr	r4, [pc, #40]	; (8008160 <__libc_init_array+0x44>)
 8008136:	1b64      	subs	r4, r4, r5
 8008138:	10a4      	asrs	r4, r4, #2
 800813a:	42a6      	cmp	r6, r4
 800813c:	d105      	bne.n	800814a <__libc_init_array+0x2e>
 800813e:	bd70      	pop	{r4, r5, r6, pc}
 8008140:	f855 3b04 	ldr.w	r3, [r5], #4
 8008144:	4798      	blx	r3
 8008146:	3601      	adds	r6, #1
 8008148:	e7ee      	b.n	8008128 <__libc_init_array+0xc>
 800814a:	f855 3b04 	ldr.w	r3, [r5], #4
 800814e:	4798      	blx	r3
 8008150:	3601      	adds	r6, #1
 8008152:	e7f2      	b.n	800813a <__libc_init_array+0x1e>
 8008154:	0800820c 	.word	0x0800820c
 8008158:	0800820c 	.word	0x0800820c
 800815c:	0800820c 	.word	0x0800820c
 8008160:	08008210 	.word	0x08008210

08008164 <memset>:
 8008164:	4603      	mov	r3, r0
 8008166:	4402      	add	r2, r0
 8008168:	4293      	cmp	r3, r2
 800816a:	d100      	bne.n	800816e <memset+0xa>
 800816c:	4770      	bx	lr
 800816e:	f803 1b01 	strb.w	r1, [r3], #1
 8008172:	e7f9      	b.n	8008168 <memset+0x4>

08008174 <_init>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	bf00      	nop
 8008178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817a:	bc08      	pop	{r3}
 800817c:	469e      	mov	lr, r3
 800817e:	4770      	bx	lr

08008180 <_fini>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	bf00      	nop
 8008184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008186:	bc08      	pop	{r3}
 8008188:	469e      	mov	lr, r3
 800818a:	4770      	bx	lr
