
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bf0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08009cfc  08009cfc  00019cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dc0  08009dc0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08009dc0  08009dc0  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009dc0  08009dc0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dc0  08009dc0  00019dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dc4  08009dc4  00019dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001194  200001f4  08009fbc  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001388  08009fbc  00021388  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012420  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f28  00000000  00000000  0003263d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00036568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  000376a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ceb2  00000000  00000000  000385e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c361  00000000  00000000  00055492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a1ca  00000000  00000000  000717f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb9bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004624  00000000  00000000  000fba10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f4 	.word	0x200001f4
 8000128:	00000000 	.word	0x00000000
 800012c:	08009ce4 	.word	0x08009ce4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f8 	.word	0x200001f8
 8000148:	08009ce4 	.word	0x08009ce4

0800014c <apInit>:
#include "ap.h"



void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 57600);
 8000150:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fb7f 	bl	8000858 <uartOpen>
  uartOpen(_DEF_UART2, 57600);
 800015a:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800015e:	2001      	movs	r0, #1
 8000160:	f000 fb7a 	bl	8000858 <uartOpen>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <apMain>:

void apMain(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0

  uint32_t pre_time;

  while(1)
  {
    if (miliis() - pre_time >= 500)
 800016e:	f000 f852 	bl	8000216 <miliis>
 8000172:	4602      	mov	r2, r0
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	1ad3      	subs	r3, r2, r3
 8000178:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800017c:	d305      	bcc.n	800018a <apMain+0x22>
    {
      pre_time = miliis();
 800017e:	f000 f84a 	bl	8000216 <miliis>
 8000182:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
 8000184:	2000      	movs	r0, #0
 8000186:	f000 fa91 	bl	80006ac <ledToggle>
    }

    if(uartAvailable(_DEF_UART2) > 0)
 800018a:	2001      	movs	r0, #1
 800018c:	f000 fbc2 	bl	8000914 <uartAvailable>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d0eb      	beq.n	800016e <apMain+0x6>
    {
      uint8_t rx_data;

      rx_data = uartRead(_DEF_UART2);
 8000196:	2001      	movs	r0, #1
 8000198:	f000 fbda 	bl	8000950 <uartRead>
 800019c:	4603      	mov	r3, r0
 800019e:	70fb      	strb	r3, [r7, #3]
      uartPrintf(_DEF_UART2,"Uart Rx %c %X\n", rx_data, rx_data);
 80001a0:	78fa      	ldrb	r2, [r7, #3]
 80001a2:	78fb      	ldrb	r3, [r7, #3]
 80001a4:	4902      	ldr	r1, [pc, #8]	; (80001b0 <apMain+0x48>)
 80001a6:	2001      	movs	r0, #1
 80001a8:	f000 fc20 	bl	80009ec <uartPrintf>
    if (miliis() - pre_time >= 500)
 80001ac:	e7df      	b.n	800016e <apMain+0x6>
 80001ae:	bf00      	nop
 80001b0:	08009cfc 	.word	0x08009cfc

080001b4 <bspInit>:


void SystemClock_Config(void);

void bspInit(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
  HAL_Init();
 80001ba:	f000 fd15 	bl	8000be8 <HAL_Init>

  SystemClock_Config();
 80001be:	f000 f831 	bl	8000224 <SystemClock_Config>

  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001c2:	4b0e      	ldr	r3, [pc, #56]	; (80001fc <bspInit+0x48>)
 80001c4:	699b      	ldr	r3, [r3, #24]
 80001c6:	4a0d      	ldr	r2, [pc, #52]	; (80001fc <bspInit+0x48>)
 80001c8:	f043 0320 	orr.w	r3, r3, #32
 80001cc:	6193      	str	r3, [r2, #24]
 80001ce:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <bspInit+0x48>)
 80001d0:	699b      	ldr	r3, [r3, #24]
 80001d2:	f003 0320 	and.w	r3, r3, #32
 80001d6:	607b      	str	r3, [r7, #4]
 80001d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001da:	4b08      	ldr	r3, [pc, #32]	; (80001fc <bspInit+0x48>)
 80001dc:	699b      	ldr	r3, [r3, #24]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <bspInit+0x48>)
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	6193      	str	r3, [r2, #24]
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <bspInit+0x48>)
 80001e8:	699b      	ldr	r3, [r3, #24]
 80001ea:	f003 0304 	and.w	r3, r3, #4
 80001ee:	603b      	str	r3, [r7, #0]
 80001f0:	683b      	ldr	r3, [r7, #0]


}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40021000 	.word	0x40021000

08000200 <delay>:

void delay(uint32_t ms)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f000 fd4f 	bl	8000cac <HAL_Delay>
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}

08000216 <miliis>:

uint32_t miliis(void)
{
 8000216:	b580      	push	{r7, lr}
 8000218:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800021a:	f000 fd3d 	bl	8000c98 <HAL_GetTick>
 800021e:	4603      	mov	r3, r0
}
 8000220:	4618      	mov	r0, r3
 8000222:	bd80      	pop	{r7, pc}

08000224 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b094      	sub	sp, #80	; 0x50
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f009 f8ba 	bl	80093ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000254:	2305      	movs	r3, #5
 8000256:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000262:	2301      	movs	r3, #1
 8000264:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026a:	2302      	movs	r3, #2
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000274:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fd7a 	bl	8002d78 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800028a:	f000 f82a 	bl	80002e2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2302      	movs	r3, #2
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 ffe6 	bl	800327c <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002b6:	f000 f814 	bl	80002e2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80002ba:	2311      	movs	r3, #17
 80002bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80002be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002c2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002c4:	2300      	movs	r3, #0
 80002c6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	4618      	mov	r0, r3
 80002cc:	f003 f96e 	bl	80035ac <HAL_RCCEx_PeriphCLKConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002d6:	f000 f804 	bl	80002e2 <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3750      	adds	r7, #80	; 0x50
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e2:	b480      	push	{r7}
 80002e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e6:	b672      	cpsid	i
}
 80002e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ea:	e7fe      	b.n	80002ea <Error_Handler+0x8>

080002ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002f2:	4b15      	ldr	r3, [pc, #84]	; (8000348 <HAL_MspInit+0x5c>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	4a14      	ldr	r2, [pc, #80]	; (8000348 <HAL_MspInit+0x5c>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6193      	str	r3, [r2, #24]
 80002fe:	4b12      	ldr	r3, [pc, #72]	; (8000348 <HAL_MspInit+0x5c>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	60bb      	str	r3, [r7, #8]
 8000308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <HAL_MspInit+0x5c>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	4a0e      	ldr	r2, [pc, #56]	; (8000348 <HAL_MspInit+0x5c>)
 8000310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000314:	61d3      	str	r3, [r2, #28]
 8000316:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <HAL_MspInit+0x5c>)
 8000318:	69db      	ldr	r3, [r3, #28]
 800031a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000322:	4b0a      	ldr	r3, [pc, #40]	; (800034c <HAL_MspInit+0x60>)
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <HAL_MspInit+0x60>)
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033e:	bf00      	nop
 8000340:	3714      	adds	r7, #20
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000
 800034c:	40010000 	.word	0x40010000

08000350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000354:	e7fe      	b.n	8000354 <NMI_Handler+0x4>

08000356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800035a:	e7fe      	b.n	800035a <HardFault_Handler+0x4>

0800035c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000360:	e7fe      	b.n	8000360 <MemManage_Handler+0x4>

08000362 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000366:	e7fe      	b.n	8000366 <BusFault_Handler+0x4>

08000368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800036c:	e7fe      	b.n	800036c <UsageFault_Handler+0x4>

0800036e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr

0800037a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr

08000386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr

08000392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000396:	f000 fc6d 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003a4:	4802      	ldr	r0, [pc, #8]	; (80003b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80003a6:	f001 f949 	bl	800163c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000e6c 	.word	0x20000e6c

080003b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80003b8:	4802      	ldr	r0, [pc, #8]	; (80003c4 <USART1_IRQHandler+0x10>)
 80003ba:	f003 fcc7 	bl	8003d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000354 	.word	0x20000354

080003c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003d0:	4a14      	ldr	r2, [pc, #80]	; (8000424 <_sbrk+0x5c>)
 80003d2:	4b15      	ldr	r3, [pc, #84]	; (8000428 <_sbrk+0x60>)
 80003d4:	1ad3      	subs	r3, r2, r3
 80003d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003dc:	4b13      	ldr	r3, [pc, #76]	; (800042c <_sbrk+0x64>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d102      	bne.n	80003ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003e4:	4b11      	ldr	r3, [pc, #68]	; (800042c <_sbrk+0x64>)
 80003e6:	4a12      	ldr	r2, [pc, #72]	; (8000430 <_sbrk+0x68>)
 80003e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <_sbrk+0x64>)
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4413      	add	r3, r2
 80003f2:	693a      	ldr	r2, [r7, #16]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d207      	bcs.n	8000408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003f8:	f008 ffae 	bl	8009358 <__errno>
 80003fc:	4603      	mov	r3, r0
 80003fe:	220c      	movs	r2, #12
 8000400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000402:	f04f 33ff 	mov.w	r3, #4294967295
 8000406:	e009      	b.n	800041c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <_sbrk+0x64>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800040e:	4b07      	ldr	r3, [pc, #28]	; (800042c <_sbrk+0x64>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4413      	add	r3, r2
 8000416:	4a05      	ldr	r2, [pc, #20]	; (800042c <_sbrk+0x64>)
 8000418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800041a:	68fb      	ldr	r3, [r7, #12]
}
 800041c:	4618      	mov	r0, r3
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20005000 	.word	0x20005000
 8000428:	00000400 	.word	0x00000400
 800042c:	20000210 	.word	0x20000210
 8000430:	20001388 	.word	0x20001388

08000434 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000440:	480c      	ldr	r0, [pc, #48]	; (8000474 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000442:	490d      	ldr	r1, [pc, #52]	; (8000478 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000444:	4a0d      	ldr	r2, [pc, #52]	; (800047c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000448:	e002      	b.n	8000450 <LoopCopyDataInit>

0800044a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800044c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044e:	3304      	adds	r3, #4

08000450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000454:	d3f9      	bcc.n	800044a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000456:	4a0a      	ldr	r2, [pc, #40]	; (8000480 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000458:	4c0a      	ldr	r4, [pc, #40]	; (8000484 <LoopFillZerobss+0x22>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800045c:	e001      	b.n	8000462 <LoopFillZerobss>

0800045e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000460:	3204      	adds	r2, #4

08000462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000464:	d3fb      	bcc.n	800045e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000466:	f7ff ffe5 	bl	8000434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800046a:	f008 ff7b 	bl	8009364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046e:	f008 ff67 	bl	8009340 <main>
  bx lr
 8000472:	4770      	bx	lr
  ldr r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000478:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800047c:	08009dc8 	.word	0x08009dc8
  ldr r2, =_sbss
 8000480:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8000484:	20001388 	.word	0x20001388

08000488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000488:	e7fe      	b.n	8000488 <ADC1_2_IRQHandler>

0800048a <qbufferCreate>:
void qbufferInit(void)
{

}
bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800048a:	b480      	push	{r7}
 800048c:	b087      	sub	sp, #28
 800048e:	af00      	add	r7, sp, #0
 8000490:	60f8      	str	r0, [r7, #12]
 8000492:	60b9      	str	r1, [r7, #8]
 8000494:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000496:	2301      	movs	r3, #1
 8000498:	75fb      	strb	r3, [r7, #23]

  p_node->in = 0;
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	2200      	movs	r2, #0
 80004a4:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	68ba      	ldr	r2, [r7, #8]
 80004b0:	60da      	str	r2, [r3, #12]
  return ret;
 80004b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	371c      	adds	r7, #28
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr

080004be <qbufferWrite>:
bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80004be:	b480      	push	{r7}
 80004c0:	b089      	sub	sp, #36	; 0x24
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	60f8      	str	r0, [r7, #12]
 80004c6:	60b9      	str	r1, [r7, #8]
 80004c8:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80004ca:	2301      	movs	r3, #1
 80004cc:	77fb      	strb	r3, [r7, #31]

  uint32_t next_in;

  for(int i = 0; i < length; i++)
 80004ce:	2300      	movs	r3, #0
 80004d0:	61bb      	str	r3, [r7, #24]
 80004d2:	e027      	b.n	8000524 <qbufferWrite+0x66>
  {
    next_in = (p_node->in + 1)%p_node->len;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	6892      	ldr	r2, [r2, #8]
 80004de:	fbb3 f1f2 	udiv	r1, r3, r2
 80004e2:	fb01 f202 	mul.w	r2, r1, r2
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	617b      	str	r3, [r7, #20]

    if(next_in != p_node->out)
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	697a      	ldr	r2, [r7, #20]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d011      	beq.n	8000518 <qbufferWrite+0x5a>
    {
      if(p_node->p_buf != NULL)
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d009      	beq.n	8000510 <qbufferWrite+0x52>
      {
        p_node->p_buf[p_node->in] = p_data[i];
 80004fc:	69bb      	ldr	r3, [r7, #24]
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	441a      	add	r2, r3
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	68d9      	ldr	r1, [r3, #12]
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	440b      	add	r3, r1
 800050c:	7812      	ldrb	r2, [r2, #0]
 800050e:	701a      	strb	r2, [r3, #0]
      }
      p_node->in = next_in;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	697a      	ldr	r2, [r7, #20]
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	e002      	b.n	800051e <qbufferWrite+0x60>
    }
    else
    {
      ret = false;
 8000518:	2300      	movs	r3, #0
 800051a:	77fb      	strb	r3, [r7, #31]
      break;
 800051c:	e006      	b.n	800052c <qbufferWrite+0x6e>
  for(int i = 0; i < length; i++)
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	3301      	adds	r3, #1
 8000522:	61bb      	str	r3, [r7, #24]
 8000524:	69bb      	ldr	r3, [r7, #24]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	429a      	cmp	r2, r3
 800052a:	d8d3      	bhi.n	80004d4 <qbufferWrite+0x16>
    }
  }
  return ret;
 800052c:	7ffb      	ldrb	r3, [r7, #31]
}
 800052e:	4618      	mov	r0, r3
 8000530:	3724      	adds	r7, #36	; 0x24
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <qbufferRead>:
bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000538:	b480      	push	{r7}
 800053a:	b087      	sub	sp, #28
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000544:	2301      	movs	r3, #1
 8000546:	75fb      	strb	r3, [r7, #23]

  for( int i = 0; i<length; i++)
 8000548:	2300      	movs	r3, #0
 800054a:	613b      	str	r3, [r7, #16]
 800054c:	e026      	b.n	800059c <qbufferRead+0x64>
  {
    if(p_node->p_buf != NULL)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d009      	beq.n	800056a <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	68da      	ldr	r2, [r3, #12]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	441a      	add	r2, r3
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	68b9      	ldr	r1, [r7, #8]
 8000564:	440b      	add	r3, r1
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	701a      	strb	r2, [r3, #0]
    }
    if(p_node->out != p_node->in)
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	685a      	ldr	r2, [r3, #4]
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	429a      	cmp	r2, r3
 8000574:	d00c      	beq.n	8000590 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1)%p_node->len;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	3301      	adds	r3, #1
 800057c:	68fa      	ldr	r2, [r7, #12]
 800057e:	6892      	ldr	r2, [r2, #8]
 8000580:	fbb3 f1f2 	udiv	r1, r3, r2
 8000584:	fb01 f202 	mul.w	r2, r1, r2
 8000588:	1a9a      	subs	r2, r3, r2
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	e002      	b.n	8000596 <qbufferRead+0x5e>
    }
    else
    {
      ret=false;
 8000590:	2300      	movs	r3, #0
 8000592:	75fb      	strb	r3, [r7, #23]
      break;
 8000594:	e006      	b.n	80005a4 <qbufferRead+0x6c>
  for( int i = 0; i<length; i++)
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	3301      	adds	r3, #1
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d8d4      	bhi.n	800054e <qbufferRead+0x16>
    }
  }
  return ret;
 80005a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	371c      	adds	r7, #28
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <qbufferAvailable>:
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  uint32_t ret;

  ret = (p_node->in - p_node->out)%p_node->len;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	6892      	ldr	r2, [r2, #8]
 80005c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80005ca:	fb01 f202 	mul.w	r2, r1, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]

  return ret;
 80005d2:	68fb      	ldr	r3, [r7, #12]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
	...

080005e0 <ledInit>:
    {
        {GPIOB, GPIO_PIN_12, GPIO_PIN_RESET, GPIO_PIN_SET},
    };

bool ledInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  bool ret = true;
 80005e6:	2301      	movs	r3, #1
 80005e8:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f8:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <ledInit+0x84>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a19      	ldr	r2, [pc, #100]	; (8000664 <ledInit+0x84>)
 80005fe:	f043 0308 	orr.w	r3, r3, #8
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <ledInit+0x84>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0308 	and.w	r3, r3, #8
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB12 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2302      	movs	r3, #2
 800061a:	617b      	str	r3, [r7, #20]

  for ( int i = 0; i < LED_MAX_CH; i ++)
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]
 8000620:	e017      	b.n	8000652 <ledInit+0x72>
  {
    GPIO_InitStruct.Pin =led_tbl[i].pin;
 8000622:	4a11      	ldr	r2, [pc, #68]	; (8000668 <ledInit+0x88>)
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	4413      	add	r3, r2
 800062a:	889b      	ldrh	r3, [r3, #4]
 800062c:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800062e:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <ledInit+0x88>)
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000636:	f107 0208 	add.w	r2, r7, #8
 800063a:	4611      	mov	r1, r2
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fd17 	bl	8001070 <HAL_GPIO_Init>
    ledOff(i);
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f810 	bl	800066c <ledOff>
  for ( int i = 0; i < LED_MAX_CH; i ++)
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	3301      	adds	r3, #1
 8000650:	61fb      	str	r3, [r7, #28]
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	2b00      	cmp	r3, #0
 8000656:	dde4      	ble.n	8000622 <ledInit+0x42>
  }

  return ret;
 8000658:	7efb      	ldrb	r3, [r7, #27]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3720      	adds	r7, #32
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000
 8000668:	20000004 	.word	0x20000004

0800066c <ledOff>:
  if ( ch >= LED_MAX_CH ) return;
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  if ( ch >= LED_MAX_CH ) return;
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d111      	bne.n	80006a0 <ledOff+0x34>
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <ledOff+0x3c>)
 8000680:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <ledOff+0x3c>)
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	4413      	add	r3, r2
 800068c:	8899      	ldrh	r1, [r3, #4]
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <ledOff+0x3c>)
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	4413      	add	r3, r2
 8000696:	79db      	ldrb	r3, [r3, #7]
 8000698:	461a      	mov	r2, r3
 800069a:	f000 fe6d 	bl	8001378 <HAL_GPIO_WritePin>
 800069e:	e000      	b.n	80006a2 <ledOff+0x36>
  if ( ch >= LED_MAX_CH ) return;
 80006a0:	bf00      	nop
}
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000004 	.word	0x20000004

080006ac <ledToggle>:

void ledToggle(uint8_t ch)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  if ( ch >= LED_MAX_CH ) return;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d10d      	bne.n	80006d8 <ledToggle+0x2c>
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <ledToggle+0x34>)
 80006c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	4906      	ldr	r1, [pc, #24]	; (80006e0 <ledToggle+0x34>)
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	440b      	add	r3, r1
 80006cc:	889b      	ldrh	r3, [r3, #4]
 80006ce:	4619      	mov	r1, r3
 80006d0:	4610      	mov	r0, r2
 80006d2:	f000 fe69 	bl	80013a8 <HAL_GPIO_TogglePin>
 80006d6:	e000      	b.n	80006da <ledToggle+0x2e>
  if ( ch >= LED_MAX_CH ) return;
 80006d8:	bf00      	nop
}
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000004 	.word	0x20000004

080006e4 <resetInit>:

static uint32_t reset_count = 0;


bool resetInit(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
  bool ret = true;
 80006ea:	2301      	movs	r3, #1
 80006ec:	71fb      	strb	r3, [r7, #7]

  // 만약 Reset 핀이 눌렸다면

  if( RCC->CSR & (1<<26))
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <resetInit+0x50>)
 80006f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d012      	beq.n	8000720 <resetInit+0x3c>
  {
    rtcBackupRegWrite(1,rtcBackupRegRead(1) + 1);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 f84e 	bl	800079c <rtcBackupRegRead>
 8000700:	4603      	mov	r3, r0
 8000702:	3301      	adds	r3, #1
 8000704:	4619      	mov	r1, r3
 8000706:	2001      	movs	r0, #1
 8000708:	f000 f858 	bl	80007bc <rtcBackupRegWrite>
    delay(500);
 800070c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000710:	f7ff fd76 	bl	8000200 <delay>
    reset_count = rtcBackupRegRead(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f000 f841 	bl	800079c <rtcBackupRegRead>
 800071a:	4603      	mov	r3, r0
 800071c:	4a06      	ldr	r2, [pc, #24]	; (8000738 <resetInit+0x54>)
 800071e:	6013      	str	r3, [r2, #0]
  }

  rtcBackupRegWrite(1,0);
 8000720:	2100      	movs	r1, #0
 8000722:	2001      	movs	r0, #1
 8000724:	f000 f84a 	bl	80007bc <rtcBackupRegWrite>

  return ret;
 8000728:	79fb      	ldrb	r3, [r7, #7]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000
 8000738:	20000214 	.word	0x20000214

0800073c <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
  bool ret = true;
 8000742:	2301      	movs	r3, #1
 8000744:	71fb      	strb	r3, [r7, #7]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <rtcInit+0x54>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4a11      	ldr	r2, [pc, #68]	; (8000790 <rtcInit+0x54>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <rtcInit+0x54>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f003 0310 	and.w	r3, r3, #16
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  hrtc.Instance = RTC;
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <rtcInit+0x58>)
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <rtcInit+0x5c>)
 8000762:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <rtcInit+0x58>)
 8000766:	f04f 32ff 	mov.w	r2, #4294967295
 800076a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <rtcInit+0x58>)
 800076e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000772:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <rtcInit+0x58>)
 8000776:	f003 f88f 	bl	8003898 <HAL_RTC_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <rtcInit+0x48>
  {
    Error_Handler();
 8000780:	f7ff fdaf 	bl	80002e2 <Error_Handler>
  }

  return ret;
 8000784:	79fb      	ldrb	r3, [r7, #7]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000
 8000794:	20000218 	.word	0x20000218
 8000798:	40002800 	.word	0x40002800

0800079c <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	4804      	ldr	r0, [pc, #16]	; (80007b8 <rtcBackupRegRead+0x1c>)
 80007a8:	f003 f9a4 	bl	8003af4 <HAL_RTCEx_BKUPRead>
 80007ac:	4603      	mov	r3, r0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000218 	.word	0x20000218

080007bc <rtcBackupRegWrite>:


void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	6879      	ldr	r1, [r7, #4]
 80007ca:	4803      	ldr	r0, [pc, #12]	; (80007d8 <rtcBackupRegWrite+0x1c>)
 80007cc:	f003 f978 	bl	8003ac0 <HAL_RTCEx_BKUPWrite>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000218 	.word	0x20000218

080007dc <HAL_RTC_MspInit>:



void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <HAL_RTC_MspInit+0x3c>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d110      	bne.n	8000810 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80007ee:	f002 fab7 	bl	8002d60 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_RTC_MspInit+0x40>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a09      	ldr	r2, [pc, #36]	; (800081c <HAL_RTC_MspInit+0x40>)
 80007f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <HAL_RTC_MspInit+0x40>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_RTC_MspInit+0x44>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40002800 	.word	0x40002800
 800081c:	40021000 	.word	0x40021000
 8000820:	4242043c 	.word	0x4242043c

08000824 <uartInit>:


UART_HandleTypeDef huart1;

bool uartInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  for( int i = 0; i < UART_MAX_CH; i++)
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	e007      	b.n	8000840 <uartInit+0x1c>
  {
    is_open[i] = false;
 8000830:	4a08      	ldr	r2, [pc, #32]	; (8000854 <uartInit+0x30>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
  for( int i = 0; i < UART_MAX_CH; i++)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3301      	adds	r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b01      	cmp	r3, #1
 8000844:	ddf4      	ble.n	8000830 <uartInit+0xc>
  }

  return true;
 8000846:	2301      	movs	r3, #1
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	2000022c 	.word	0x2000022c

08000858 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	6039      	str	r1, [r7, #0]
 8000862:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8000864:	2300      	movs	r3, #0
 8000866:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <uartOpen+0x1c>
 800086e:	2b01      	cmp	r3, #1
 8000870:	d007      	beq.n	8000882 <uartOpen+0x2a>
 8000872:	e03e      	b.n	80008f2 <uartOpen+0x9a>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	4a21      	ldr	r2, [pc, #132]	; (80008fc <uartOpen+0xa4>)
 8000878:	2101      	movs	r1, #1
 800087a:	54d1      	strb	r1, [r2, r3]
      ret = true;
 800087c:	2301      	movs	r3, #1
 800087e:	73fb      	strb	r3, [r7, #15]
      break;
 8000880:	e037      	b.n	80008f2 <uartOpen+0x9a>

    case _DEF_UART2:
      huart1.Instance = USART1;
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <uartOpen+0xa8>)
 8000884:	4a1f      	ldr	r2, [pc, #124]	; (8000904 <uartOpen+0xac>)
 8000886:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 8000888:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <uartOpen+0xa8>)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <uartOpen+0xa8>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <uartOpen+0xa8>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <uartOpen+0xa8>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <uartOpen+0xa8>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <uartOpen+0xa8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <uartOpen+0xa8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]


      qbufferCreate(&qbuffer[_DEF_UART2], &rx_buf[0], 256);
 80008b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b6:	4914      	ldr	r1, [pc, #80]	; (8000908 <uartOpen+0xb0>)
 80008b8:	4814      	ldr	r0, [pc, #80]	; (800090c <uartOpen+0xb4>)
 80008ba:	f7ff fde6 	bl	800048a <qbufferCreate>

      if (HAL_UART_Init(&huart1) != HAL_OK)
 80008be:	4810      	ldr	r0, [pc, #64]	; (8000900 <uartOpen+0xa8>)
 80008c0:	f003 f934 	bl	8003b2c <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d002      	beq.n	80008d0 <uartOpen+0x78>
      {
        ret = false;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]
        if(HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1) != HAL_OK)
        {
          ret = false;
        }
      }
      break;
 80008ce:	e00f      	b.n	80008f0 <uartOpen+0x98>
        ret = true;
 80008d0:	2301      	movs	r3, #1
 80008d2:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	4a09      	ldr	r2, [pc, #36]	; (80008fc <uartOpen+0xa4>)
 80008d8:	2101      	movs	r1, #1
 80008da:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1) != HAL_OK)
 80008dc:	2201      	movs	r2, #1
 80008de:	490c      	ldr	r1, [pc, #48]	; (8000910 <uartOpen+0xb8>)
 80008e0:	4807      	ldr	r0, [pc, #28]	; (8000900 <uartOpen+0xa8>)
 80008e2:	f003 fa02 	bl	8003cea <HAL_UART_Receive_IT>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <uartOpen+0x98>
          ret = false;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]
      break;
 80008f0:	bf00      	nop
  }

  return ret;
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000022c 	.word	0x2000022c
 8000900:	20000354 	.word	0x20000354
 8000904:	40013800 	.word	0x40013800
 8000908:	20000250 	.word	0x20000250
 800090c:	20000240 	.word	0x20000240
 8000910:	20000351 	.word	0x20000351

08000914 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d002      	beq.n	800092e <uartAvailable+0x1a>
 8000928:	2b01      	cmp	r3, #1
 800092a:	d004      	beq.n	8000936 <uartAvailable+0x22>
 800092c:	e008      	b.n	8000940 <uartAvailable+0x2c>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 800092e:	f007 ff99 	bl	8008864 <cdcAvailable>
 8000932:	60f8      	str	r0, [r7, #12]
      break;
 8000934:	e004      	b.n	8000940 <uartAvailable+0x2c>

    case _DEF_UART2:
      ret = qbufferAvailable(&qbuffer[_DEF_UART2]);
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <uartAvailable+0x38>)
 8000938:	f7ff fe3a 	bl	80005b0 <qbufferAvailable>
 800093c:	60f8      	str	r0, [r7, #12]
      break;
 800093e:	bf00      	nop
  }
  return ret;
 8000940:	68fb      	ldr	r3, [r7, #12]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000240 	.word	0x20000240

08000950 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <uartRead+0x1a>
 8000964:	2b01      	cmp	r3, #1
 8000966:	d005      	beq.n	8000974 <uartRead+0x24>
 8000968:	e00c      	b.n	8000984 <uartRead+0x34>
  {
    case _DEF_UART1:
      ret = cdcRead();
 800096a:	f007 ff97 	bl	800889c <cdcRead>
 800096e:	4603      	mov	r3, r0
 8000970:	73fb      	strb	r3, [r7, #15]
      break;
 8000972:	e007      	b.n	8000984 <uartRead+0x34>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8000974:	f107 030f 	add.w	r3, r7, #15
 8000978:	2201      	movs	r2, #1
 800097a:	4619      	mov	r1, r3
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <uartRead+0x40>)
 800097e:	f7ff fddb 	bl	8000538 <qbufferRead>
      break;
 8000982:	bf00      	nop
  }

  return ret;
 8000984:	7bfb      	ldrb	r3, [r7, #15]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000240 	.word	0x20000240

08000994 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d002      	beq.n	80009b2 <uartWrite+0x1e>
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d006      	beq.n	80009be <uartWrite+0x2a>
 80009b0:	e014      	b.n	80009dc <uartWrite+0x48>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	68b8      	ldr	r0, [r7, #8]
 80009b6:	f007 ffc3 	bl	8008940 <cdcWrite>
 80009ba:	6178      	str	r0, [r7, #20]
      break;
 80009bc:	e00e      	b.n	80009dc <uartWrite+0x48>

    case _DEF_UART2:
      status =  HAL_UART_Transmit(&huart1, p_data, length, 100);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	2364      	movs	r3, #100	; 0x64
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	4808      	ldr	r0, [pc, #32]	; (80009e8 <uartWrite+0x54>)
 80009c8:	f003 f8fd 	bl	8003bc6 <HAL_UART_Transmit>
 80009cc:	4603      	mov	r3, r0
 80009ce:	74fb      	strb	r3, [r7, #19]

      if(status == HAL_OK)
 80009d0:	7cfb      	ldrb	r3, [r7, #19]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d101      	bne.n	80009da <uartWrite+0x46>
      {
        ret = length;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	617b      	str	r3, [r7, #20]
      }
      break;
 80009da:	bf00      	nop
  }

  return ret;
 80009dc:	697b      	ldr	r3, [r7, #20]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000354 	.word	0x20000354

080009ec <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80009ec:	b40e      	push	{r1, r2, r3}
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b0c7      	sub	sp, #284	; 0x11c
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4602      	mov	r2, r0
 80009f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009fa:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80009fe:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8000a00:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000a04:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a0c:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8000a0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a16:	f107 0010 	add.w	r0, r7, #16
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000a20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a24:	f008 fcf6 	bl	8009414 <vsniprintf>
 8000a28:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8000a2c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000a30:	f107 0110 	add.w	r1, r7, #16
 8000a34:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a38:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ffa8 	bl	8000994 <uartWrite>
 8000a44:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8000a48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000a52:	46bd      	mov	sp, r7
 8000a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a58:	b003      	add	sp, #12
 8000a5a:	4770      	bx	lr

08000a5c <HAL_UART_ErrorCallback>:
  }
  return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
  {

  }
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
	...

08000a70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_UART_RxCpltCallback+0x30>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d109      	bne.n	8000a96 <HAL_UART_RxCpltCallback+0x26>
  {
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
 8000a82:	2201      	movs	r2, #1
 8000a84:	4907      	ldr	r1, [pc, #28]	; (8000aa4 <HAL_UART_RxCpltCallback+0x34>)
 8000a86:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <HAL_UART_RxCpltCallback+0x38>)
 8000a88:	f7ff fd19 	bl	80004be <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4905      	ldr	r1, [pc, #20]	; (8000aa4 <HAL_UART_RxCpltCallback+0x34>)
 8000a90:	4806      	ldr	r0, [pc, #24]	; (8000aac <HAL_UART_RxCpltCallback+0x3c>)
 8000a92:	f003 f92a 	bl	8003cea <HAL_UART_Receive_IT>
  }
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40013800 	.word	0x40013800
 8000aa4:	20000351 	.word	0x20000351
 8000aa8:	20000240 	.word	0x20000240
 8000aac:	20000354 	.word	0x20000354

08000ab0 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a20      	ldr	r2, [pc, #128]	; (8000b4c <HAL_UART_MspInit+0x9c>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d139      	bne.n	8000b44 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <HAL_UART_MspInit+0xa0>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <HAL_UART_MspInit+0xa0>)
 8000ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_UART_MspInit+0xa0>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_UART_MspInit+0xa0>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <HAL_UART_MspInit+0xa0>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_UART_MspInit+0xa0>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4619      	mov	r1, r3
 8000b14:	480f      	ldr	r0, [pc, #60]	; (8000b54 <HAL_UART_MspInit+0xa4>)
 8000b16:	f000 faab 	bl	8001070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4809      	ldr	r0, [pc, #36]	; (8000b54 <HAL_UART_MspInit+0xa4>)
 8000b30:	f000 fa9e 	bl	8001070 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	2025      	movs	r0, #37	; 0x25
 8000b3a:	f000 f9b2 	bl	8000ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b3e:	2025      	movs	r0, #37	; 0x25
 8000b40:	f000 f9cb 	bl	8000eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40013800 	.word	0x40013800
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010800 	.word	0x40010800

08000b58 <usbInit>:

#include "usb.h"
#include "usb_device.h"

bool usbInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
  bool ret = true;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	75fb      	strb	r3, [r7, #23]


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b74:	2311      	movs	r3, #17
 8000b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	480f      	ldr	r0, [pc, #60]	; (8000bc4 <usbInit+0x6c>)
 8000b86:	f000 fa73 	bl	8001070 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <usbInit+0x6c>)
 8000b92:	f000 fbf1 	bl	8001378 <HAL_GPIO_WritePin>
  delay(100);
 8000b96:	2064      	movs	r0, #100	; 0x64
 8000b98:	f7ff fb32 	bl	8000200 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba2:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <usbInit+0x6c>)
 8000ba4:	f000 fbe8 	bl	8001378 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <usbInit+0x6c>)
 8000bb2:	f000 fa5d 	bl	8001070 <HAL_GPIO_Init>

  MX_USB_DEVICE_Init();
 8000bb6:	f007 fe25 	bl	8008804 <MX_USB_DEVICE_Init>


  return ret;
 8000bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40010800 	.word	0x40010800

08000bc8 <hwInit>:


#include "hw.h"

void hwInit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  bspInit();
 8000bcc:	f7ff faf2 	bl	80001b4 <bspInit>
  rtcInit();
 8000bd0:	f7ff fdb4 	bl	800073c <rtcInit>

  resetInit();
 8000bd4:	f7ff fd86 	bl	80006e4 <resetInit>
  ledInit();
 8000bd8:	f7ff fd02 	bl	80005e0 <ledInit>
  usbInit();
 8000bdc:	f7ff ffbc 	bl	8000b58 <usbInit>
  uartInit();
 8000be0:	f7ff fe20 	bl	8000824 <uartInit>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_Init+0x28>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_Init+0x28>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 f947 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 f808 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff fb72 	bl	80002ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40022000 	.word	0x40022000

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x54>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f95f 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f000 f927 	bl	8000ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_InitTick+0x5c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000010 	.word	0x20000010
 8000c70:	2000000c 	.word	0x2000000c

08000c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_IncTick+0x1c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x20>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a03      	ldr	r2, [pc, #12]	; (8000c94 <HAL_IncTick+0x20>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	20000010 	.word	0x20000010
 8000c94:	20000398 	.word	0x20000398

08000c98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <HAL_GetTick+0x10>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	20000398 	.word	0x20000398

08000cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff fff0 	bl	8000c98 <HAL_GetTick>
 8000cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc4:	d005      	beq.n	8000cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_Delay+0x44>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd2:	bf00      	nop
 8000cd4:	f7ff ffe0 	bl	8000c98 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d8f7      	bhi.n	8000cd4 <HAL_Delay+0x28>
  {
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000010 	.word	0x20000010

08000cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d26:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_GetPriorityGrouping+0x18>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 0307 	and.w	r3, r3, #7
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	db0b      	blt.n	8000d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f003 021f 	and.w	r2, r3, #31
 8000d70:	4906      	ldr	r1, [pc, #24]	; (8000d8c <__NVIC_EnableIRQ+0x34>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	2001      	movs	r0, #1
 8000d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	; (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	; (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	210f      	movs	r1, #15
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f7ff ff90 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff2d 	bl	8000cf4 <__NVIC_SetPriorityGrouping>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff42 	bl	8000d3c <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff90 	bl	8000de4 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5f 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff35 	bl	8000d58 <__NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffa2 	bl	8000e48 <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b085      	sub	sp, #20
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d008      	beq.n	8000f36 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2204      	movs	r2, #4
 8000f28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e020      	b.n	8000f78 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 020e 	bic.w	r2, r2, #14
 8000f44:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 0201 	bic.w	r2, r2, #1
 8000f54:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f5e:	2101      	movs	r1, #1
 8000f60:	fa01 f202 	lsl.w	r2, r1, r2
 8000f64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
	...

08000f84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d005      	beq.n	8000fa6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e051      	b.n	800104a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 020e 	bic.w	r2, r2, #14
 8000fb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0201 	bic.w	r2, r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a22      	ldr	r2, [pc, #136]	; (8001054 <HAL_DMA_Abort_IT+0xd0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d029      	beq.n	8001024 <HAL_DMA_Abort_IT+0xa0>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a20      	ldr	r2, [pc, #128]	; (8001058 <HAL_DMA_Abort_IT+0xd4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d022      	beq.n	8001020 <HAL_DMA_Abort_IT+0x9c>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a1f      	ldr	r2, [pc, #124]	; (800105c <HAL_DMA_Abort_IT+0xd8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d01a      	beq.n	800101a <HAL_DMA_Abort_IT+0x96>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <HAL_DMA_Abort_IT+0xdc>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d012      	beq.n	8001014 <HAL_DMA_Abort_IT+0x90>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <HAL_DMA_Abort_IT+0xe0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d00a      	beq.n	800100e <HAL_DMA_Abort_IT+0x8a>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <HAL_DMA_Abort_IT+0xe4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d102      	bne.n	8001008 <HAL_DMA_Abort_IT+0x84>
 8001002:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001006:	e00e      	b.n	8001026 <HAL_DMA_Abort_IT+0xa2>
 8001008:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800100c:	e00b      	b.n	8001026 <HAL_DMA_Abort_IT+0xa2>
 800100e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001012:	e008      	b.n	8001026 <HAL_DMA_Abort_IT+0xa2>
 8001014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001018:	e005      	b.n	8001026 <HAL_DMA_Abort_IT+0xa2>
 800101a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101e:	e002      	b.n	8001026 <HAL_DMA_Abort_IT+0xa2>
 8001020:	2310      	movs	r3, #16
 8001022:	e000      	b.n	8001026 <HAL_DMA_Abort_IT+0xa2>
 8001024:	2301      	movs	r3, #1
 8001026:	4a11      	ldr	r2, [pc, #68]	; (800106c <HAL_DMA_Abort_IT+0xe8>)
 8001028:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	4798      	blx	r3
    } 
  }
  return status;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40020008 	.word	0x40020008
 8001058:	4002001c 	.word	0x4002001c
 800105c:	40020030 	.word	0x40020030
 8001060:	40020044 	.word	0x40020044
 8001064:	40020058 	.word	0x40020058
 8001068:	4002006c 	.word	0x4002006c
 800106c:	40020000 	.word	0x40020000

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b08b      	sub	sp, #44	; 0x2c
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001082:	e169      	b.n	8001358 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001084:	2201      	movs	r2, #1
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	429a      	cmp	r2, r3
 800109e:	f040 8158 	bne.w	8001352 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4a9a      	ldr	r2, [pc, #616]	; (8001310 <HAL_GPIO_Init+0x2a0>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d05e      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010ac:	4a98      	ldr	r2, [pc, #608]	; (8001310 <HAL_GPIO_Init+0x2a0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d875      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010b2:	4a98      	ldr	r2, [pc, #608]	; (8001314 <HAL_GPIO_Init+0x2a4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d058      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010b8:	4a96      	ldr	r2, [pc, #600]	; (8001314 <HAL_GPIO_Init+0x2a4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d86f      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010be:	4a96      	ldr	r2, [pc, #600]	; (8001318 <HAL_GPIO_Init+0x2a8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d052      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010c4:	4a94      	ldr	r2, [pc, #592]	; (8001318 <HAL_GPIO_Init+0x2a8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d869      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010ca:	4a94      	ldr	r2, [pc, #592]	; (800131c <HAL_GPIO_Init+0x2ac>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d04c      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010d0:	4a92      	ldr	r2, [pc, #584]	; (800131c <HAL_GPIO_Init+0x2ac>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d863      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010d6:	4a92      	ldr	r2, [pc, #584]	; (8001320 <HAL_GPIO_Init+0x2b0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d046      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010dc:	4a90      	ldr	r2, [pc, #576]	; (8001320 <HAL_GPIO_Init+0x2b0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d85d      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010e2:	2b12      	cmp	r3, #18
 80010e4:	d82a      	bhi.n	800113c <HAL_GPIO_Init+0xcc>
 80010e6:	2b12      	cmp	r3, #18
 80010e8:	d859      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <HAL_GPIO_Init+0x80>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	0800116b 	.word	0x0800116b
 80010f4:	08001145 	.word	0x08001145
 80010f8:	08001157 	.word	0x08001157
 80010fc:	08001199 	.word	0x08001199
 8001100:	0800119f 	.word	0x0800119f
 8001104:	0800119f 	.word	0x0800119f
 8001108:	0800119f 	.word	0x0800119f
 800110c:	0800119f 	.word	0x0800119f
 8001110:	0800119f 	.word	0x0800119f
 8001114:	0800119f 	.word	0x0800119f
 8001118:	0800119f 	.word	0x0800119f
 800111c:	0800119f 	.word	0x0800119f
 8001120:	0800119f 	.word	0x0800119f
 8001124:	0800119f 	.word	0x0800119f
 8001128:	0800119f 	.word	0x0800119f
 800112c:	0800119f 	.word	0x0800119f
 8001130:	0800119f 	.word	0x0800119f
 8001134:	0800114d 	.word	0x0800114d
 8001138:	08001161 	.word	0x08001161
 800113c:	4a79      	ldr	r2, [pc, #484]	; (8001324 <HAL_GPIO_Init+0x2b4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001142:	e02c      	b.n	800119e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	623b      	str	r3, [r7, #32]
          break;
 800114a:	e029      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	3304      	adds	r3, #4
 8001152:	623b      	str	r3, [r7, #32]
          break;
 8001154:	e024      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	3308      	adds	r3, #8
 800115c:	623b      	str	r3, [r7, #32]
          break;
 800115e:	e01f      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	330c      	adds	r3, #12
 8001166:	623b      	str	r3, [r7, #32]
          break;
 8001168:	e01a      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d102      	bne.n	8001178 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001172:	2304      	movs	r3, #4
 8001174:	623b      	str	r3, [r7, #32]
          break;
 8001176:	e013      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d105      	bne.n	800118c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001180:	2308      	movs	r3, #8
 8001182:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	611a      	str	r2, [r3, #16]
          break;
 800118a:	e009      	b.n	80011a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800118c:	2308      	movs	r3, #8
 800118e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	615a      	str	r2, [r3, #20]
          break;
 8001196:	e003      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
          break;
 800119c:	e000      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          break;
 800119e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2bff      	cmp	r3, #255	; 0xff
 80011a4:	d801      	bhi.n	80011aa <HAL_GPIO_Init+0x13a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	e001      	b.n	80011ae <HAL_GPIO_Init+0x13e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3304      	adds	r3, #4
 80011ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	2bff      	cmp	r3, #255	; 0xff
 80011b4:	d802      	bhi.n	80011bc <HAL_GPIO_Init+0x14c>
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	e002      	b.n	80011c2 <HAL_GPIO_Init+0x152>
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	3b08      	subs	r3, #8
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	210f      	movs	r1, #15
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	6a39      	ldr	r1, [r7, #32]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	431a      	orrs	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 80b1 	beq.w	8001352 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011f0:	4b4d      	ldr	r3, [pc, #308]	; (8001328 <HAL_GPIO_Init+0x2b8>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	; (8001328 <HAL_GPIO_Init+0x2b8>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b4a      	ldr	r3, [pc, #296]	; (8001328 <HAL_GPIO_Init+0x2b8>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001208:	4a48      	ldr	r2, [pc, #288]	; (800132c <HAL_GPIO_Init+0x2bc>)
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001214:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a40      	ldr	r2, [pc, #256]	; (8001330 <HAL_GPIO_Init+0x2c0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d013      	beq.n	800125c <HAL_GPIO_Init+0x1ec>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a3f      	ldr	r2, [pc, #252]	; (8001334 <HAL_GPIO_Init+0x2c4>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d00d      	beq.n	8001258 <HAL_GPIO_Init+0x1e8>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a3e      	ldr	r2, [pc, #248]	; (8001338 <HAL_GPIO_Init+0x2c8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d007      	beq.n	8001254 <HAL_GPIO_Init+0x1e4>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a3d      	ldr	r2, [pc, #244]	; (800133c <HAL_GPIO_Init+0x2cc>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d101      	bne.n	8001250 <HAL_GPIO_Init+0x1e0>
 800124c:	2303      	movs	r3, #3
 800124e:	e006      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 8001250:	2304      	movs	r3, #4
 8001252:	e004      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 8001254:	2302      	movs	r3, #2
 8001256:	e002      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 800125c:	2300      	movs	r3, #0
 800125e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001260:	f002 0203 	and.w	r2, r2, #3
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	4093      	lsls	r3, r2
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800126e:	492f      	ldr	r1, [pc, #188]	; (800132c <HAL_GPIO_Init+0x2bc>)
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001288:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	492c      	ldr	r1, [pc, #176]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	600b      	str	r3, [r1, #0]
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	43db      	mvns	r3, r3
 800129e:	4928      	ldr	r1, [pc, #160]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	4922      	ldr	r1, [pc, #136]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	491e      	ldr	r1, [pc, #120]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	4918      	ldr	r1, [pc, #96]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	608b      	str	r3, [r1, #8]
 80012e4:	e006      	b.n	80012f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4914      	ldr	r1, [pc, #80]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d021      	beq.n	8001344 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	490e      	ldr	r1, [pc, #56]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	60cb      	str	r3, [r1, #12]
 800130c:	e021      	b.n	8001352 <HAL_GPIO_Init+0x2e2>
 800130e:	bf00      	nop
 8001310:	10320000 	.word	0x10320000
 8001314:	10310000 	.word	0x10310000
 8001318:	10220000 	.word	0x10220000
 800131c:	10210000 	.word	0x10210000
 8001320:	10120000 	.word	0x10120000
 8001324:	10110000 	.word	0x10110000
 8001328:	40021000 	.word	0x40021000
 800132c:	40010000 	.word	0x40010000
 8001330:	40010800 	.word	0x40010800
 8001334:	40010c00 	.word	0x40010c00
 8001338:	40011000 	.word	0x40011000
 800133c:	40011400 	.word	0x40011400
 8001340:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_GPIO_Init+0x304>)
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	43db      	mvns	r3, r3
 800134c:	4909      	ldr	r1, [pc, #36]	; (8001374 <HAL_GPIO_Init+0x304>)
 800134e:	4013      	ands	r3, r2
 8001350:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	3301      	adds	r3, #1
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	fa22 f303 	lsr.w	r3, r2, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	f47f ae8e 	bne.w	8001084 <HAL_GPIO_Init+0x14>
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	372c      	adds	r7, #44	; 0x2c
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	40010400 	.word	0x40010400

08001378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
 8001384:	4613      	mov	r3, r2
 8001386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001388:	787b      	ldrb	r3, [r7, #1]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001394:	e003      	b.n	800139e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	041a      	lsls	r2, r3, #16
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	611a      	str	r2, [r3, #16]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4013      	ands	r3, r2
 80013c0:	041a      	lsls	r2, r3, #16
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43d9      	mvns	r1, r3
 80013c6:	887b      	ldrh	r3, [r7, #2]
 80013c8:	400b      	ands	r3, r1
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	611a      	str	r2, [r3, #16]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013dc:	b08b      	sub	sp, #44	; 0x2c
 80013de:	af06      	add	r7, sp, #24
 80013e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0fd      	b.n	80015e8 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d106      	bne.n	8001406 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f007 fcf3 	bl	8008dec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2203      	movs	r2, #3
 800140a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f003 f8e0 	bl	80045d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	687e      	ldr	r6, [r7, #4]
 8001420:	466d      	mov	r5, sp
 8001422:	f106 0410 	add.w	r4, r6, #16
 8001426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142a:	6823      	ldr	r3, [r4, #0]
 800142c:	602b      	str	r3, [r5, #0]
 800142e:	1d33      	adds	r3, r6, #4
 8001430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001432:	6838      	ldr	r0, [r7, #0]
 8001434:	f003 f8aa 	bl	800458c <USB_CoreInit>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2202      	movs	r2, #2
 8001442:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e0ce      	b.n	80015e8 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f003 f8db 	bl	800460c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
 800145a:	e04c      	b.n	80014f6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	3301      	adds	r3, #1
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	b298      	uxth	r0, r3
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	3336      	adds	r3, #54	; 0x36
 800149a:	4602      	mov	r2, r0
 800149c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	3303      	adds	r3, #3
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	440b      	add	r3, r1
 80014c2:	3338      	adds	r3, #56	; 0x38
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	440b      	add	r3, r1
 80014d6:	333c      	adds	r3, #60	; 0x3c
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	440b      	add	r3, r1
 80014ea:	3340      	adds	r3, #64	; 0x40
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	3301      	adds	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d3ad      	bcc.n	800145c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e044      	b.n	8001590 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	440b      	add	r3, r1
 8001514:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	440b      	add	r3, r1
 800152a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	440b      	add	r3, r1
 8001540:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	440b      	add	r3, r1
 8001556:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	440b      	add	r3, r1
 800156c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001574:	7bfa      	ldrb	r2, [r7, #15]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	3301      	adds	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	d3b5      	bcc.n	8001506 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	687e      	ldr	r6, [r7, #4]
 80015a2:	466d      	mov	r5, sp
 80015a4:	f106 0410 	add.w	r4, r6, #16
 80015a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ac:	6823      	ldr	r3, [r4, #0]
 80015ae:	602b      	str	r3, [r5, #0]
 80015b0:	1d33      	adds	r3, r6, #4
 80015b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b4:	6838      	ldr	r0, [r7, #0]
 80015b6:	f003 f835 	bl	8004624 <USB_DevInit>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2202      	movs	r2, #2
 80015c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e00d      	b.n	80015e8 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f005 fce7 	bl	8006fb4 <USB_DevDisconnect>

  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <HAL_PCD_Start+0x16>
 8001602:	2302      	movs	r3, #2
 8001604:	e016      	b.n	8001634 <HAL_PCD_Start+0x44>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f002 ffca 	bl	80045ac <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001618:	2101      	movs	r1, #1
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f007 fe59 	bl	80092d2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f005 fcbb 	bl	8006fa0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f005 fcbd 	bl	8006fc8 <USB_ReadInterrupts>
 800164e:	4603      	mov	r3, r0
 8001650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001658:	d102      	bne.n	8001660 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fb5f 	bl	8001d1e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f005 fcaf 	bl	8006fc8 <USB_ReadInterrupts>
 800166a:	4603      	mov	r3, r0
 800166c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001674:	d112      	bne.n	800169c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800167e:	b29a      	uxth	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001688:	b292      	uxth	r2, r2
 800168a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f007 fc27 	bl	8008ee2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001694:	2100      	movs	r1, #0
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f923 	bl	80018e2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f005 fc91 	bl	8006fc8 <USB_ReadInterrupts>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016b0:	d10b      	bne.n	80016ca <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016c4:	b292      	uxth	r2, r2
 80016c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f005 fc7a 	bl	8006fc8 <USB_ReadInterrupts>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016de:	d10b      	bne.n	80016f8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016f2:	b292      	uxth	r2, r2
 80016f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f005 fc63 	bl	8006fc8 <USB_ReadInterrupts>
 8001702:	4603      	mov	r3, r0
 8001704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800170c:	d126      	bne.n	800175c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001716:	b29a      	uxth	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0204 	bic.w	r2, r2, #4
 8001720:	b292      	uxth	r2, r2
 8001722:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800172e:	b29a      	uxth	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0208 	bic.w	r2, r2, #8
 8001738:	b292      	uxth	r2, r2
 800173a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f007 fc08 	bl	8008f54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800174c:	b29a      	uxth	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001756:	b292      	uxth	r2, r2
 8001758:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f005 fc31 	bl	8006fc8 <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800176c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001770:	f040 8082 	bne.w	8001878 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001774:	2300      	movs	r3, #0
 8001776:	77fb      	strb	r3, [r7, #31]
 8001778:	e010      	b.n	800179c <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	7ffb      	ldrb	r3, [r7, #31]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	441a      	add	r2, r3
 8001786:	7ffb      	ldrb	r3, [r7, #31]
 8001788:	8812      	ldrh	r2, [r2, #0]
 800178a:	b292      	uxth	r2, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	3320      	adds	r3, #32
 8001790:	443b      	add	r3, r7
 8001792:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001796:	7ffb      	ldrb	r3, [r7, #31]
 8001798:	3301      	adds	r3, #1
 800179a:	77fb      	strb	r3, [r7, #31]
 800179c:	7ffb      	ldrb	r3, [r7, #31]
 800179e:	2b07      	cmp	r3, #7
 80017a0:	d9eb      	bls.n	800177a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0201 	orr.w	r2, r2, #1
 80017b4:	b292      	uxth	r2, r2
 80017b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0201 	bic.w	r2, r2, #1
 80017cc:	b292      	uxth	r2, r2
 80017ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80017d2:	bf00      	nop
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017dc:	b29b      	uxth	r3, r3
 80017de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f6      	beq.n	80017d4 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017f8:	b292      	uxth	r2, r2
 80017fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	77fb      	strb	r3, [r7, #31]
 8001802:	e00f      	b.n	8001824 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001804:	7ffb      	ldrb	r3, [r7, #31]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	4611      	mov	r1, r2
 800180c:	7ffa      	ldrb	r2, [r7, #31]
 800180e:	0092      	lsls	r2, r2, #2
 8001810:	440a      	add	r2, r1
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	3320      	adds	r3, #32
 8001816:	443b      	add	r3, r7
 8001818:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800181c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800181e:	7ffb      	ldrb	r3, [r7, #31]
 8001820:	3301      	adds	r3, #1
 8001822:	77fb      	strb	r3, [r7, #31]
 8001824:	7ffb      	ldrb	r3, [r7, #31]
 8001826:	2b07      	cmp	r3, #7
 8001828:	d9ec      	bls.n	8001804 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001832:	b29a      	uxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0208 	orr.w	r2, r2, #8
 800183c:	b292      	uxth	r2, r2
 800183e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800184a:	b29a      	uxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001854:	b292      	uxth	r2, r2
 8001856:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001862:	b29a      	uxth	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0204 	orr.w	r2, r2, #4
 800186c:	b292      	uxth	r2, r2
 800186e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f007 fb54 	bl	8008f20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f005 fba3 	bl	8006fc8 <USB_ReadInterrupts>
 8001882:	4603      	mov	r3, r0
 8001884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800188c:	d10e      	bne.n	80018ac <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001896:	b29a      	uxth	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018a0:	b292      	uxth	r2, r2
 80018a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f007 fb0d 	bl	8008ec6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f005 fb89 	bl	8006fc8 <USB_ReadInterrupts>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c0:	d10b      	bne.n	80018da <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018d4:	b292      	uxth	r2, r2
 80018d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80018da:	bf00      	nop
 80018dc:	3720      	adds	r7, #32
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	460b      	mov	r3, r1
 80018ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_PCD_SetAddress+0x1a>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e013      	b.n	8001924 <HAL_PCD_SetAddress+0x42>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	78fa      	ldrb	r2, [r7, #3]
 8001908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f005 fb30 	bl	8006f7a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	4608      	mov	r0, r1
 8001936:	4611      	mov	r1, r2
 8001938:	461a      	mov	r2, r3
 800193a:	4603      	mov	r3, r0
 800193c:	70fb      	strb	r3, [r7, #3]
 800193e:	460b      	mov	r3, r1
 8001940:	803b      	strh	r3, [r7, #0]
 8001942:	4613      	mov	r3, r2
 8001944:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800194a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800194e:	2b00      	cmp	r3, #0
 8001950:	da0e      	bge.n	8001970 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	705a      	strb	r2, [r3, #1]
 800196e:	e00e      	b.n	800198e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	f003 0207 	and.w	r2, r3, #7
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	b2da      	uxtb	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800199a:	883a      	ldrh	r2, [r7, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	78ba      	ldrb	r2, [r7, #2]
 80019a4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	785b      	ldrb	r3, [r3, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d004      	beq.n	80019b8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019b8:	78bb      	ldrb	r3, [r7, #2]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d102      	bne.n	80019c4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_PCD_EP_Open+0xa6>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e00e      	b.n	80019f0 <HAL_PCD_EP_Open+0xc4>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68f9      	ldr	r1, [r7, #12]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 fe3f 	bl	8004664 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80019ee:	7afb      	ldrb	r3, [r7, #11]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	da0e      	bge.n	8001a2a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2201      	movs	r2, #1
 8001a26:	705a      	strb	r2, [r3, #1]
 8001a28:	e00e      	b.n	8001a48 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	f003 0207 	and.w	r2, r3, #7
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_PCD_EP_Close+0x6a>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e00e      	b.n	8001a80 <HAL_PCD_EP_Close+0x88>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68f9      	ldr	r1, [r7, #12]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 f961 	bl	8004d38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	460b      	mov	r3, r1
 8001a96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a98:	7afb      	ldrb	r3, [r7, #11]
 8001a9a:	f003 0207 	and.w	r2, r3, #7
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4413      	add	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ac8:	7afb      	ldrb	r3, [r7, #11]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6979      	ldr	r1, [r7, #20]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 fb13 	bl	8005110 <USB_EPStartXfer>
 8001aea:	e005      	b.n	8001af8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6979      	ldr	r1, [r7, #20]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 fb0c 	bl	8005110 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	f003 0207 	and.w	r2, r3, #7
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001b24:	681b      	ldr	r3, [r3, #0]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b40:	7afb      	ldrb	r3, [r7, #11]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b7c:	7afb      	ldrb	r3, [r7, #11]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b88:	7afb      	ldrb	r3, [r7, #11]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6979      	ldr	r1, [r7, #20]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 fab9 	bl	8005110 <USB_EPStartXfer>
 8001b9e:	e005      	b.n	8001bac <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6979      	ldr	r1, [r7, #20]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 fab2 	bl	8005110 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	f003 0207 	and.w	r2, r3, #7
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d901      	bls.n	8001bd4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e04c      	b.n	8001c6e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	da0e      	bge.n	8001bfa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	705a      	strb	r2, [r3, #1]
 8001bf8:	e00c      	b.n	8001c14 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bfa:	78fa      	ldrb	r2, [r7, #3]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_PCD_EP_SetStall+0x7e>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e01c      	b.n	8001c6e <HAL_PCD_EP_SetStall+0xb8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68f9      	ldr	r1, [r7, #12]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f005 f89c 	bl	8006d80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d108      	bne.n	8001c64 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4610      	mov	r0, r2
 8001c60:	f005 f9c1 	bl	8006fe6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b084      	sub	sp, #16
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	f003 020f 	and.w	r2, r3, #15
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d901      	bls.n	8001c94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e040      	b.n	8001d16 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da0e      	bge.n	8001cba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	705a      	strb	r2, [r3, #1]
 8001cb8:	e00e      	b.n	8001cd8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	f003 0207 	and.w	r2, r3, #7
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_PCD_EP_ClrStall+0x82>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e00e      	b.n	8001d16 <HAL_PCD_EP_ClrStall+0xa0>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68f9      	ldr	r1, [r7, #12]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f005 f88a 	bl	8006e20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b08e      	sub	sp, #56	; 0x38
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d26:	e2ec      	b.n	8002302 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d30:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001d3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 8161 	bne.w	800200a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d152      	bne.n	8001df8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d62:	81fb      	strh	r3, [r7, #14]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	89fb      	ldrh	r3, [r7, #14]
 8001d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3328      	adds	r3, #40	; 0x28
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	3302      	adds	r3, #2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	695a      	ldr	r2, [r3, #20]
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	441a      	add	r2, r3
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001db6:	2100      	movs	r1, #0
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f007 f86a 	bl	8008e92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 829b 	beq.w	8002302 <PCD_EP_ISR_Handler+0x5e4>
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f040 8296 	bne.w	8002302 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	b292      	uxth	r2, r2
 8001dea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001df6:	e284      	b.n	8002302 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d034      	beq.n	8001e7c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4413      	add	r3, r2
 8001e26:	3306      	adds	r3, #6
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	f005 f918 	bl	8007086 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e62:	4013      	ands	r3, r2
 8001e64:	823b      	strh	r3, [r7, #16]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	8a3a      	ldrh	r2, [r7, #16]
 8001e6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e70:	b292      	uxth	r2, r2
 8001e72:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f006 ffdf 	bl	8008e38 <HAL_PCD_SetupStageCallback>
 8001e7a:	e242      	b.n	8002302 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e7c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f280 823e 	bge.w	8002302 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e92:	4013      	ands	r3, r2
 8001e94:	83bb      	strh	r3, [r7, #28]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	8bba      	ldrh	r2, [r7, #28]
 8001e9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ea0:	b292      	uxth	r2, r2
 8001ea2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3306      	adds	r3, #6
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d019      	beq.n	8001f0c <PCD_EP_ISR_Handler+0x1ee>
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d015      	beq.n	8001f0c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	6959      	ldr	r1, [r3, #20]
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	f005 f8c8 	bl	8007086 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	441a      	add	r2, r3
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f04:	2100      	movs	r1, #0
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f006 ffa8 	bl	8008e5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f040 81f2 	bne.w	8002302 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	4413      	add	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d112      	bne.n	8001f6c <PCD_EP_ISR_Handler+0x24e>
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	801a      	strh	r2, [r3, #0]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	801a      	strh	r2, [r3, #0]
 8001f6a:	e02f      	b.n	8001fcc <PCD_EP_ISR_Handler+0x2ae>
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	2b3e      	cmp	r3, #62	; 0x3e
 8001f72:	d813      	bhi.n	8001f9c <PCD_EP_ISR_Handler+0x27e>
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	085b      	lsrs	r3, r3, #1
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d002      	beq.n	8001f8e <PCD_EP_ISR_Handler+0x270>
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	029b      	lsls	r3, r3, #10
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	801a      	strh	r2, [r3, #0]
 8001f9a:	e017      	b.n	8001fcc <PCD_EP_ISR_Handler+0x2ae>
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	095b      	lsrs	r3, r3, #5
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d102      	bne.n	8001fb6 <PCD_EP_ISR_Handler+0x298>
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	029b      	lsls	r3, r3, #10
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fdc:	827b      	strh	r3, [r7, #18]
 8001fde:	8a7b      	ldrh	r3, [r7, #18]
 8001fe0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001fe4:	827b      	strh	r3, [r7, #18]
 8001fe6:	8a7b      	ldrh	r3, [r7, #18]
 8001fe8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fec:	827b      	strh	r3, [r7, #18]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	8a7b      	ldrh	r3, [r7, #18]
 8001ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002004:	b29b      	uxth	r3, r3
 8002006:	8013      	strh	r3, [r2, #0]
 8002008:	e17b      	b.n	8002302 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800201c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002020:	2b00      	cmp	r3, #0
 8002022:	f280 80ea 	bge.w	80021fa <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b29a      	uxth	r2, r3
 8002038:	f640 738f 	movw	r3, #3983	; 0xf8f
 800203c:	4013      	ands	r3, r2
 800203e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002050:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002054:	b292      	uxth	r2, r2
 8002056:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002058:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	7b1b      	ldrb	r3, [r3, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d122      	bne.n	80020bc <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800207e:	b29b      	uxth	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4413      	add	r3, r2
 800208a:	3306      	adds	r3, #6
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	4413      	add	r3, r2
 8002094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800209e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80020a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 8087 	beq.w	80021b6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	6959      	ldr	r1, [r3, #20]
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	88da      	ldrh	r2, [r3, #6]
 80020b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020b6:	f004 ffe6 	bl	8007086 <USB_ReadPMA>
 80020ba:	e07c      	b.n	80021b6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	78db      	ldrb	r3, [r3, #3]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d108      	bne.n	80020d6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80020c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020c6:	461a      	mov	r2, r3
 80020c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f927 	bl	800231e <HAL_PCD_EP_DB_Receive>
 80020d0:	4603      	mov	r3, r0
 80020d2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80020d4:	e06f      	b.n	80021b6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	441a      	add	r2, r3
 8002100:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800210a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800210e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002112:	b29b      	uxth	r3, r3
 8002114:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d021      	beq.n	8002174 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002138:	b29b      	uxth	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	3302      	adds	r3, #2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	4413      	add	r3, r2
 800214e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002158:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800215a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800215c:	2b00      	cmp	r3, #0
 800215e:	d02a      	beq.n	80021b6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	6959      	ldr	r1, [r3, #20]
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	891a      	ldrh	r2, [r3, #8]
 800216c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800216e:	f004 ff8a 	bl	8007086 <USB_ReadPMA>
 8002172:	e020      	b.n	80021b6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800217c:	b29b      	uxth	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	3306      	adds	r3, #6
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	4413      	add	r3, r2
 8002192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800219c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800219e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	6959      	ldr	r1, [r3, #20]
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	895a      	ldrh	r2, [r3, #10]
 80021b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021b2:	f004 ff68 	bl	8007086 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	69da      	ldr	r2, [r3, #28]
 80021ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021bc:	441a      	add	r2, r3
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021c8:	441a      	add	r2, r3
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d004      	beq.n	80021e0 <PCD_EP_ISR_Handler+0x4c2>
 80021d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d206      	bcs.n	80021ee <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f006 fe38 	bl	8008e5c <HAL_PCD_DataOutStageCallback>
 80021ec:	e005      	b.n	80021fa <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021f4:	4618      	mov	r0, r3
 80021f6:	f002 ff8b 	bl	8005110 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002200:	2b00      	cmp	r3, #0
 8002202:	d07e      	beq.n	8002302 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002204:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800222e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002232:	843b      	strh	r3, [r7, #32]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	441a      	add	r2, r3
 8002242:	8c3b      	ldrh	r3, [r7, #32]
 8002244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800224c:	b29b      	uxth	r3, r3
 800224e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	78db      	ldrb	r3, [r3, #3]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d00c      	beq.n	8002272 <PCD_EP_ISR_Handler+0x554>
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	78db      	ldrb	r3, [r3, #3]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002264:	2b02      	cmp	r3, #2
 8002266:	d146      	bne.n	80022f6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002268:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d141      	bne.n	80022f6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800227a:	b29b      	uxth	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	3302      	adds	r3, #2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	4413      	add	r3, r2
 8002290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800229a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	699a      	ldr	r2, [r3, #24]
 80022a0:	8bfb      	ldrh	r3, [r7, #30]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d906      	bls.n	80022b4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	8bfb      	ldrh	r3, [r7, #30]
 80022ac:	1ad2      	subs	r2, r2, r3
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	619a      	str	r2, [r3, #24]
 80022b2:	e002      	b.n	80022ba <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	2200      	movs	r2, #0
 80022b8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f006 fde2 	bl	8008e92 <HAL_PCD_DataInStageCallback>
 80022ce:	e018      	b.n	8002302 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	8bfb      	ldrh	r3, [r7, #30]
 80022d6:	441a      	add	r2, r3
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	8bfb      	ldrh	r3, [r7, #30]
 80022e2:	441a      	add	r2, r3
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ee:	4618      	mov	r0, r3
 80022f0:	f002 ff0e 	bl	8005110 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80022f4:	e005      	b.n	8002302 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80022f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022f8:	461a      	mov	r2, r3
 80022fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f91b 	bl	8002538 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800230a:	b29b      	uxth	r3, r3
 800230c:	b21b      	sxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	f6ff ad0a 	blt.w	8001d28 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3738      	adds	r7, #56	; 0x38
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b088      	sub	sp, #32
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	4613      	mov	r3, r2
 800232a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d07e      	beq.n	8002434 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233e:	b29b      	uxth	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	3302      	adds	r3, #2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	4413      	add	r3, r2
 8002354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800235e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	8b7b      	ldrh	r3, [r7, #26]
 8002366:	429a      	cmp	r2, r3
 8002368:	d306      	bcc.n	8002378 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	8b7b      	ldrh	r3, [r7, #26]
 8002370:	1ad2      	subs	r2, r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	619a      	str	r2, [r3, #24]
 8002376:	e002      	b.n	800237e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2200      	movs	r2, #0
 800237c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d123      	bne.n	80023ce <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800239c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a0:	833b      	strh	r3, [r7, #24]
 80023a2:	8b3b      	ldrh	r3, [r7, #24]
 80023a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023a8:	833b      	strh	r3, [r7, #24]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	441a      	add	r2, r3
 80023b8:	8b3b      	ldrh	r3, [r7, #24]
 80023ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01f      	beq.n	8002418 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f2:	82fb      	strh	r3, [r7, #22]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	441a      	add	r2, r3
 8002402:	8afb      	ldrh	r3, [r7, #22]
 8002404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800240c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002410:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002414:	b29b      	uxth	r3, r3
 8002416:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002418:	8b7b      	ldrh	r3, [r7, #26]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8087 	beq.w	800252e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	6959      	ldr	r1, [r3, #20]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	891a      	ldrh	r2, [r3, #8]
 800242c:	8b7b      	ldrh	r3, [r7, #26]
 800242e:	f004 fe2a 	bl	8007086 <USB_ReadPMA>
 8002432:	e07c      	b.n	800252e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800243c:	b29b      	uxth	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	3306      	adds	r3, #6
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	4413      	add	r3, r2
 8002452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800245c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	8b7b      	ldrh	r3, [r7, #26]
 8002464:	429a      	cmp	r2, r3
 8002466:	d306      	bcc.n	8002476 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	8b7b      	ldrh	r3, [r7, #26]
 800246e:	1ad2      	subs	r2, r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	619a      	str	r2, [r3, #24]
 8002474:	e002      	b.n	800247c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d123      	bne.n	80024cc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	b29b      	uxth	r3, r3
 8002496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800249a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249e:	83fb      	strh	r3, [r7, #30]
 80024a0:	8bfb      	ldrh	r3, [r7, #30]
 80024a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024a6:	83fb      	strh	r3, [r7, #30]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	441a      	add	r2, r3
 80024b6:	8bfb      	ldrh	r3, [r7, #30]
 80024b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d11f      	bne.n	8002516 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f0:	83bb      	strh	r3, [r7, #28]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	441a      	add	r2, r3
 8002500:	8bbb      	ldrh	r3, [r7, #28]
 8002502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800250a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002512:	b29b      	uxth	r3, r3
 8002514:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002516:	8b7b      	ldrh	r3, [r7, #26]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	6959      	ldr	r1, [r3, #20]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	895a      	ldrh	r2, [r3, #10]
 8002528:	8b7b      	ldrh	r3, [r7, #26]
 800252a:	f004 fdac 	bl	8007086 <USB_ReadPMA>
    }
  }

  return count;
 800252e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3720      	adds	r7, #32
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b0a2      	sub	sp, #136	; 0x88
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	4613      	mov	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 81c7 	beq.w	80028e0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255a:	b29b      	uxth	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	3302      	adds	r3, #2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	4413      	add	r3, r2
 8002570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800257a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002586:	429a      	cmp	r2, r3
 8002588:	d907      	bls.n	800259a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002592:	1ad2      	subs	r2, r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	619a      	str	r2, [r3, #24]
 8002598:	e002      	b.n	80025a0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f040 80b9 	bne.w	800271c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	785b      	ldrb	r3, [r3, #1]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d126      	bne.n	8002600 <HAL_PCD_EP_DB_Transmit+0xc8>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	4413      	add	r3, r2
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	011a      	lsls	r2, r3, #4
 80025d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d2:	4413      	add	r3, r2
 80025d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	801a      	strh	r2, [r3, #0]
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	801a      	strh	r2, [r3, #0]
 80025fe:	e01a      	b.n	8002636 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	785b      	ldrb	r3, [r3, #1]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d116      	bne.n	8002636 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	633b      	str	r3, [r7, #48]	; 0x30
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002616:	b29b      	uxth	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	4413      	add	r3, r2
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	011a      	lsls	r2, r3, #4
 8002626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002628:	4413      	add	r3, r2
 800262a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	2200      	movs	r2, #0
 8002634:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	623b      	str	r3, [r7, #32]
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	785b      	ldrb	r3, [r3, #1]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d126      	bne.n	8002692 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002652:	b29b      	uxth	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	4413      	add	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	011a      	lsls	r2, r3, #4
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	4413      	add	r3, r2
 8002666:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002676:	b29a      	uxth	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	801a      	strh	r2, [r3, #0]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800268a:	b29a      	uxth	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	801a      	strh	r2, [r3, #0]
 8002690:	e017      	b.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	785b      	ldrb	r3, [r3, #1]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d113      	bne.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x18a>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	4413      	add	r3, r2
 80026aa:	623b      	str	r3, [r7, #32]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	011a      	lsls	r2, r3, #4
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	4413      	add	r3, r2
 80026b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2200      	movs	r2, #0
 80026c0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	4619      	mov	r1, r3
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f006 fbe2 	bl	8008e92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 82d4 	beq.w	8002c82 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f4:	827b      	strh	r3, [r7, #18]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	441a      	add	r2, r3
 8002704:	8a7b      	ldrh	r3, [r7, #18]
 8002706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800270a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800270e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002716:	b29b      	uxth	r3, r3
 8002718:	8013      	strh	r3, [r2, #0]
 800271a:	e2b2      	b.n	8002c82 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d021      	beq.n	800276a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	b29b      	uxth	r3, r3
 8002738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800273c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002740:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	441a      	add	r2, r3
 8002752:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800275a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800275e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002766:	b29b      	uxth	r3, r3
 8002768:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002770:	2b01      	cmp	r3, #1
 8002772:	f040 8286 	bne.w	8002c82 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800277e:	441a      	add	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800278c:	441a      	add	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	6a1a      	ldr	r2, [r3, #32]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	429a      	cmp	r2, r3
 800279c:	d309      	bcc.n	80027b2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	6a1a      	ldr	r2, [r3, #32]
 80027a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027aa:	1ad2      	subs	r2, r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	621a      	str	r2, [r3, #32]
 80027b0:	e015      	b.n	80027de <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d107      	bne.n	80027ca <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80027ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027be:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027c8:	e009      	b.n	80027de <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2200      	movs	r2, #0
 80027dc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	785b      	ldrb	r3, [r3, #1]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d155      	bne.n	8002892 <HAL_PCD_EP_DB_Transmit+0x35a>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fa:	4413      	add	r3, r2
 80027fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	011a      	lsls	r2, r3, #4
 8002804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002806:	4413      	add	r3, r2
 8002808:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
 800280e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002810:	2b00      	cmp	r3, #0
 8002812:	d112      	bne.n	800283a <HAL_PCD_EP_DB_Transmit+0x302>
 8002814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800281e:	b29a      	uxth	r2, r3
 8002820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002822:	801a      	strh	r2, [r3, #0]
 8002824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800282e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002832:	b29a      	uxth	r2, r3
 8002834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002836:	801a      	strh	r2, [r3, #0]
 8002838:	e047      	b.n	80028ca <HAL_PCD_EP_DB_Transmit+0x392>
 800283a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800283c:	2b3e      	cmp	r3, #62	; 0x3e
 800283e:	d811      	bhi.n	8002864 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002842:	085b      	lsrs	r3, r3, #1
 8002844:	64bb      	str	r3, [r7, #72]	; 0x48
 8002846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002852:	3301      	adds	r3, #1
 8002854:	64bb      	str	r3, [r7, #72]	; 0x48
 8002856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002858:	b29b      	uxth	r3, r3
 800285a:	029b      	lsls	r3, r3, #10
 800285c:	b29a      	uxth	r2, r3
 800285e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002860:	801a      	strh	r2, [r3, #0]
 8002862:	e032      	b.n	80028ca <HAL_PCD_EP_DB_Transmit+0x392>
 8002864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	64bb      	str	r3, [r7, #72]	; 0x48
 800286a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <HAL_PCD_EP_DB_Transmit+0x342>
 8002874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002876:	3b01      	subs	r3, #1
 8002878:	64bb      	str	r3, [r7, #72]	; 0x48
 800287a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287c:	b29b      	uxth	r3, r3
 800287e:	029b      	lsls	r3, r3, #10
 8002880:	b29b      	uxth	r3, r3
 8002882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800288a:	b29a      	uxth	r2, r3
 800288c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288e:	801a      	strh	r2, [r3, #0]
 8002890:	e01b      	b.n	80028ca <HAL_PCD_EP_DB_Transmit+0x392>
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	785b      	ldrb	r3, [r3, #1]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d117      	bne.n	80028ca <HAL_PCD_EP_DB_Transmit+0x392>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	643b      	str	r3, [r7, #64]	; 0x40
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ae:	4413      	add	r3, r2
 80028b0:	643b      	str	r3, [r7, #64]	; 0x40
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	011a      	lsls	r2, r3, #4
 80028b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ba:	4413      	add	r3, r2
 80028bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	6959      	ldr	r1, [r3, #20]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	891a      	ldrh	r2, [r3, #8]
 80028d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f004 fb8f 	bl	8006ffc <USB_WritePMA>
 80028de:	e1d0      	b.n	8002c82 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	3306      	adds	r3, #6
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002908:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002914:	429a      	cmp	r2, r3
 8002916:	d307      	bcc.n	8002928 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	699a      	ldr	r2, [r3, #24]
 800291c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002920:	1ad2      	subs	r2, r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	619a      	str	r2, [r3, #24]
 8002926:	e002      	b.n	800292e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2200      	movs	r2, #0
 800292c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f040 80c4 	bne.w	8002ac0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d126      	bne.n	800298e <HAL_PCD_EP_DB_Transmit+0x456>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294e:	b29b      	uxth	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002954:	4413      	add	r3, r2
 8002956:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	011a      	lsls	r2, r3, #4
 800295e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002960:	4413      	add	r3, r2
 8002962:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002966:	66bb      	str	r3, [r7, #104]	; 0x68
 8002968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002972:	b29a      	uxth	r2, r3
 8002974:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002976:	801a      	strh	r2, [r3, #0]
 8002978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002986:	b29a      	uxth	r2, r3
 8002988:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800298a:	801a      	strh	r2, [r3, #0]
 800298c:	e01a      	b.n	80029c4 <HAL_PCD_EP_DB_Transmit+0x48c>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	785b      	ldrb	r3, [r3, #1]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d116      	bne.n	80029c4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	677b      	str	r3, [r7, #116]	; 0x74
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029aa:	4413      	add	r3, r2
 80029ac:	677b      	str	r3, [r7, #116]	; 0x74
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	011a      	lsls	r2, r3, #4
 80029b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b6:	4413      	add	r3, r2
 80029b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029bc:	673b      	str	r3, [r7, #112]	; 0x70
 80029be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029c0:	2200      	movs	r2, #0
 80029c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	785b      	ldrb	r3, [r3, #1]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d12f      	bne.n	8002a32 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029ea:	4413      	add	r3, r2
 80029ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	011a      	lsls	r2, r3, #4
 80029f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029fa:	4413      	add	r3, r2
 80029fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a16:	801a      	strh	r2, [r3, #0]
 8002a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a2e:	801a      	strh	r2, [r3, #0]
 8002a30:	e017      	b.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	785b      	ldrb	r3, [r3, #1]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d113      	bne.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a48:	4413      	add	r3, r2
 8002a4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	011a      	lsls	r2, r3, #4
 8002a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a54:	4413      	add	r3, r2
 8002a56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a5e:	2200      	movs	r2, #0
 8002a60:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	4619      	mov	r1, r3
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f006 fa12 	bl	8008e92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f040 8104 	bne.w	8002c82 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a94:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	441a      	add	r2, r3
 8002aa6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	8013      	strh	r3, [r2, #0]
 8002abe:	e0e0      	b.n	8002c82 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d121      	bne.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	441a      	add	r2, r3
 8002af6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	f040 80b4 	bne.w	8002c82 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b22:	441a      	add	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b30:	441a      	add	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	6a1a      	ldr	r2, [r3, #32]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d309      	bcc.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	6a1a      	ldr	r2, [r3, #32]
 8002b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b4e:	1ad2      	subs	r2, r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	621a      	str	r2, [r3, #32]
 8002b54:	e015      	b.n	8002b82 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d107      	bne.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002b5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b62:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b6c:	e009      	b.n	8002b82 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2200      	movs	r2, #0
 8002b78:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	667b      	str	r3, [r7, #100]	; 0x64
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	785b      	ldrb	r3, [r3, #1]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d155      	bne.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x704>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba4:	4413      	add	r3, r2
 8002ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	011a      	lsls	r2, r3, #4
 8002bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d112      	bne.n	8002be4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bcc:	801a      	strh	r2, [r3, #0]
 8002bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be0:	801a      	strh	r2, [r3, #0]
 8002be2:	e044      	b.n	8002c6e <HAL_PCD_EP_DB_Transmit+0x736>
 8002be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be6:	2b3e      	cmp	r3, #62	; 0x3e
 8002be8:	d811      	bhi.n	8002c0e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bec:	085b      	lsrs	r3, r3, #1
 8002bee:	657b      	str	r3, [r7, #84]	; 0x54
 8002bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	657b      	str	r3, [r7, #84]	; 0x54
 8002c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	029b      	lsls	r3, r3, #10
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c0a:	801a      	strh	r2, [r3, #0]
 8002c0c:	e02f      	b.n	8002c6e <HAL_PCD_EP_DB_Transmit+0x736>
 8002c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	657b      	str	r3, [r7, #84]	; 0x54
 8002c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c20:	3b01      	subs	r3, #1
 8002c22:	657b      	str	r3, [r7, #84]	; 0x54
 8002c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	029b      	lsls	r3, r3, #10
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c38:	801a      	strh	r2, [r3, #0]
 8002c3a:	e018      	b.n	8002c6e <HAL_PCD_EP_DB_Transmit+0x736>
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	785b      	ldrb	r3, [r3, #1]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d114      	bne.n	8002c6e <HAL_PCD_EP_DB_Transmit+0x736>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c52:	4413      	add	r3, r2
 8002c54:	667b      	str	r3, [r7, #100]	; 0x64
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	011a      	lsls	r2, r3, #4
 8002c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c5e:	4413      	add	r3, r2
 8002c60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c64:	663b      	str	r3, [r7, #96]	; 0x60
 8002c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c6c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	6959      	ldr	r1, [r3, #20]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	895a      	ldrh	r2, [r3, #10]
 8002c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f004 f9bd 	bl	8006ffc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c9c:	823b      	strh	r3, [r7, #16]
 8002c9e:	8a3b      	ldrh	r3, [r7, #16]
 8002ca0:	f083 0310 	eor.w	r3, r3, #16
 8002ca4:	823b      	strh	r3, [r7, #16]
 8002ca6:	8a3b      	ldrh	r3, [r7, #16]
 8002ca8:	f083 0320 	eor.w	r3, r3, #32
 8002cac:	823b      	strh	r3, [r7, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	441a      	add	r2, r3
 8002cbc:	8a3b      	ldrh	r3, [r7, #16]
 8002cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3788      	adds	r7, #136	; 0x88
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	607b      	str	r3, [r7, #4]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	817b      	strh	r3, [r7, #10]
 8002cea:	4613      	mov	r3, r2
 8002cec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002cee:	897b      	ldrh	r3, [r7, #10]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cfa:	897b      	ldrh	r3, [r7, #10]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	e009      	b.n	8002d26 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d12:	897a      	ldrh	r2, [r7, #10]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4413      	add	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d26:	893b      	ldrh	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d107      	bne.n	8002d3c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	80da      	strh	r2, [r3, #6]
 8002d3a:	e00b      	b.n	8002d54 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	0c1b      	lsrs	r3, r3, #16
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	420e0020 	.word	0x420e0020

08002d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e272      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 8087 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d98:	4b92      	ldr	r3, [pc, #584]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d00c      	beq.n	8002dbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002da4:	4b8f      	ldr	r3, [pc, #572]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 030c 	and.w	r3, r3, #12
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d112      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x5e>
 8002db0:	4b8c      	ldr	r3, [pc, #560]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dbc:	d10b      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbe:	4b89      	ldr	r3, [pc, #548]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d06c      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x12c>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d168      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e24c      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dde:	d106      	bne.n	8002dee <HAL_RCC_OscConfig+0x76>
 8002de0:	4b80      	ldr	r3, [pc, #512]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a7f      	ldr	r2, [pc, #508]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	e02e      	b.n	8002e4c <HAL_RCC_OscConfig+0xd4>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x98>
 8002df6:	4b7b      	ldr	r3, [pc, #492]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a7a      	ldr	r2, [pc, #488]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	4b78      	ldr	r3, [pc, #480]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a77      	ldr	r2, [pc, #476]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e01d      	b.n	8002e4c <HAL_RCC_OscConfig+0xd4>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCC_OscConfig+0xbc>
 8002e1a:	4b72      	ldr	r3, [pc, #456]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a71      	ldr	r2, [pc, #452]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	4b6f      	ldr	r3, [pc, #444]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a6e      	ldr	r2, [pc, #440]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	e00b      	b.n	8002e4c <HAL_RCC_OscConfig+0xd4>
 8002e34:	4b6b      	ldr	r3, [pc, #428]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a6a      	ldr	r2, [pc, #424]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	4b68      	ldr	r3, [pc, #416]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a67      	ldr	r2, [pc, #412]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d013      	beq.n	8002e7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fd ff20 	bl	8000c98 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7fd ff1c 	bl	8000c98 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e200      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	4b5d      	ldr	r3, [pc, #372]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0xe4>
 8002e7a:	e014      	b.n	8002ea6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fd ff0c 	bl	8000c98 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e84:	f7fd ff08 	bl	8000c98 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	; 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e1ec      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e96:	4b53      	ldr	r3, [pc, #332]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x10c>
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d063      	beq.n	8002f7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eb2:	4b4c      	ldr	r3, [pc, #304]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00b      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ebe:	4b49      	ldr	r3, [pc, #292]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d11c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x18c>
 8002eca:	4b46      	ldr	r3, [pc, #280]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d116      	bne.n	8002f04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed6:	4b43      	ldr	r3, [pc, #268]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <HAL_RCC_OscConfig+0x176>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d001      	beq.n	8002eee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e1c0      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eee:	4b3d      	ldr	r3, [pc, #244]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4939      	ldr	r1, [pc, #228]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f02:	e03a      	b.n	8002f7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d020      	beq.n	8002f4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f0c:	4b36      	ldr	r3, [pc, #216]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f12:	f7fd fec1 	bl	8000c98 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f1a:	f7fd febd 	bl	8000c98 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e1a1      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2c:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f38:	4b2a      	ldr	r3, [pc, #168]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4927      	ldr	r1, [pc, #156]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	600b      	str	r3, [r1, #0]
 8002f4c:	e015      	b.n	8002f7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f4e:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fd fea0 	bl	8000c98 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f5c:	f7fd fe9c 	bl	8000c98 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e180      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d03a      	beq.n	8002ffc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d019      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f8e:	4b17      	ldr	r3, [pc, #92]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f94:	f7fd fe80 	bl	8000c98 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f9c:	f7fd fe7c 	bl	8000c98 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e160      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fae:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f000 fad8 	bl	8003570 <RCC_Delay>
 8002fc0:	e01c      	b.n	8002ffc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc8:	f7fd fe66 	bl	8000c98 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fce:	e00f      	b.n	8002ff0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd0:	f7fd fe62 	bl	8000c98 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d908      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e146      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	42420000 	.word	0x42420000
 8002fec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff0:	4b92      	ldr	r3, [pc, #584]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e9      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80a6 	beq.w	8003156 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800300a:	2300      	movs	r3, #0
 800300c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300e:	4b8b      	ldr	r3, [pc, #556]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10d      	bne.n	8003036 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800301a:	4b88      	ldr	r3, [pc, #544]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	4a87      	ldr	r2, [pc, #540]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003024:	61d3      	str	r3, [r2, #28]
 8003026:	4b85      	ldr	r3, [pc, #532]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003032:	2301      	movs	r3, #1
 8003034:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003036:	4b82      	ldr	r3, [pc, #520]	; (8003240 <HAL_RCC_OscConfig+0x4c8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303e:	2b00      	cmp	r3, #0
 8003040:	d118      	bne.n	8003074 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003042:	4b7f      	ldr	r3, [pc, #508]	; (8003240 <HAL_RCC_OscConfig+0x4c8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7e      	ldr	r2, [pc, #504]	; (8003240 <HAL_RCC_OscConfig+0x4c8>)
 8003048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800304e:	f7fd fe23 	bl	8000c98 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003056:	f7fd fe1f 	bl	8000c98 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b64      	cmp	r3, #100	; 0x64
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e103      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003068:	4b75      	ldr	r3, [pc, #468]	; (8003240 <HAL_RCC_OscConfig+0x4c8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x312>
 800307c:	4b6f      	ldr	r3, [pc, #444]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	4a6e      	ldr	r2, [pc, #440]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6213      	str	r3, [r2, #32]
 8003088:	e02d      	b.n	80030e6 <HAL_RCC_OscConfig+0x36e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10c      	bne.n	80030ac <HAL_RCC_OscConfig+0x334>
 8003092:	4b6a      	ldr	r3, [pc, #424]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	4a69      	ldr	r2, [pc, #420]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003098:	f023 0301 	bic.w	r3, r3, #1
 800309c:	6213      	str	r3, [r2, #32]
 800309e:	4b67      	ldr	r3, [pc, #412]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	4a66      	ldr	r2, [pc, #408]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	f023 0304 	bic.w	r3, r3, #4
 80030a8:	6213      	str	r3, [r2, #32]
 80030aa:	e01c      	b.n	80030e6 <HAL_RCC_OscConfig+0x36e>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	2b05      	cmp	r3, #5
 80030b2:	d10c      	bne.n	80030ce <HAL_RCC_OscConfig+0x356>
 80030b4:	4b61      	ldr	r3, [pc, #388]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	4a60      	ldr	r2, [pc, #384]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80030ba:	f043 0304 	orr.w	r3, r3, #4
 80030be:	6213      	str	r3, [r2, #32]
 80030c0:	4b5e      	ldr	r3, [pc, #376]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	4a5d      	ldr	r2, [pc, #372]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6213      	str	r3, [r2, #32]
 80030cc:	e00b      	b.n	80030e6 <HAL_RCC_OscConfig+0x36e>
 80030ce:	4b5b      	ldr	r3, [pc, #364]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	4a5a      	ldr	r2, [pc, #360]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	f023 0301 	bic.w	r3, r3, #1
 80030d8:	6213      	str	r3, [r2, #32]
 80030da:	4b58      	ldr	r3, [pc, #352]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	4a57      	ldr	r2, [pc, #348]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	f023 0304 	bic.w	r3, r3, #4
 80030e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d015      	beq.n	800311a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ee:	f7fd fdd3 	bl	8000c98 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f6:	f7fd fdcf 	bl	8000c98 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	; 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e0b1      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310c:	4b4b      	ldr	r3, [pc, #300]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0ee      	beq.n	80030f6 <HAL_RCC_OscConfig+0x37e>
 8003118:	e014      	b.n	8003144 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311a:	f7fd fdbd 	bl	8000c98 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003120:	e00a      	b.n	8003138 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003122:	f7fd fdb9 	bl	8000c98 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003130:	4293      	cmp	r3, r2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e09b      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003138:	4b40      	ldr	r3, [pc, #256]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1ee      	bne.n	8003122 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d105      	bne.n	8003156 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800314a:	4b3c      	ldr	r3, [pc, #240]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4a3b      	ldr	r2, [pc, #236]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003154:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8087 	beq.w	800326e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003160:	4b36      	ldr	r3, [pc, #216]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b08      	cmp	r3, #8
 800316a:	d061      	beq.n	8003230 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d146      	bne.n	8003202 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003174:	4b33      	ldr	r3, [pc, #204]	; (8003244 <HAL_RCC_OscConfig+0x4cc>)
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317a:	f7fd fd8d 	bl	8000c98 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003182:	f7fd fd89 	bl	8000c98 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e06d      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003194:	4b29      	ldr	r3, [pc, #164]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f0      	bne.n	8003182 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a8:	d108      	bne.n	80031bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031aa:	4b24      	ldr	r3, [pc, #144]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	4921      	ldr	r1, [pc, #132]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031bc:	4b1f      	ldr	r3, [pc, #124]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a19      	ldr	r1, [r3, #32]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	430b      	orrs	r3, r1
 80031ce:	491b      	ldr	r1, [pc, #108]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <HAL_RCC_OscConfig+0x4cc>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031da:	f7fd fd5d 	bl	8000c98 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e2:	f7fd fd59 	bl	8000c98 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e03d      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x46a>
 8003200:	e035      	b.n	800326e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_RCC_OscConfig+0x4cc>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fd fd46 	bl	8000c98 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003210:	f7fd fd42 	bl	8000c98 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e026      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003222:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x498>
 800322e:	e01e      	b.n	800326e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d107      	bne.n	8003248 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e019      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>
 800323c:	40021000 	.word	0x40021000
 8003240:	40007000 	.word	0x40007000
 8003244:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCC_OscConfig+0x500>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	429a      	cmp	r2, r3
 800325a:	d106      	bne.n	800326a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003266:	429a      	cmp	r2, r3
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000

0800327c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0d0      	b.n	8003432 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003290:	4b6a      	ldr	r3, [pc, #424]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d910      	bls.n	80032c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b67      	ldr	r3, [pc, #412]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 0207 	bic.w	r2, r3, #7
 80032a6:	4965      	ldr	r1, [pc, #404]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b63      	ldr	r3, [pc, #396]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0b8      	b.n	8003432 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d020      	beq.n	800330e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d8:	4b59      	ldr	r3, [pc, #356]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	4a58      	ldr	r2, [pc, #352]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80032de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f0:	4b53      	ldr	r3, [pc, #332]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4a52      	ldr	r2, [pc, #328]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80032f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032fc:	4b50      	ldr	r3, [pc, #320]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	494d      	ldr	r1, [pc, #308]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 800330a:	4313      	orrs	r3, r2
 800330c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d040      	beq.n	800339c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d107      	bne.n	8003332 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	4b47      	ldr	r3, [pc, #284]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d115      	bne.n	800335a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e07f      	b.n	8003432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d107      	bne.n	800334a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333a:	4b41      	ldr	r3, [pc, #260]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e073      	b.n	8003432 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334a:	4b3d      	ldr	r3, [pc, #244]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e06b      	b.n	8003432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800335a:	4b39      	ldr	r3, [pc, #228]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f023 0203 	bic.w	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4936      	ldr	r1, [pc, #216]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800336c:	f7fd fc94 	bl	8000c98 <HAL_GetTick>
 8003370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	e00a      	b.n	800338a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003374:	f7fd fc90 	bl	8000c98 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e053      	b.n	8003432 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338a:	4b2d      	ldr	r3, [pc, #180]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 020c 	and.w	r2, r3, #12
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	429a      	cmp	r2, r3
 800339a:	d1eb      	bne.n	8003374 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800339c:	4b27      	ldr	r3, [pc, #156]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d210      	bcs.n	80033cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b24      	ldr	r3, [pc, #144]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 0207 	bic.w	r2, r3, #7
 80033b2:	4922      	ldr	r1, [pc, #136]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e032      	b.n	8003432 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4916      	ldr	r1, [pc, #88]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033f6:	4b12      	ldr	r3, [pc, #72]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	490e      	ldr	r1, [pc, #56]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800340a:	f000 f821 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 800340e:	4602      	mov	r2, r0
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	490a      	ldr	r1, [pc, #40]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 800341c:	5ccb      	ldrb	r3, [r1, r3]
 800341e:	fa22 f303 	lsr.w	r3, r2, r3
 8003422:	4a09      	ldr	r2, [pc, #36]	; (8003448 <HAL_RCC_ClockConfig+0x1cc>)
 8003424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x1d0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fbf2 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40022000 	.word	0x40022000
 8003440:	40021000 	.word	0x40021000
 8003444:	08009d74 	.word	0x08009d74
 8003448:	20000000 	.word	0x20000000
 800344c:	2000000c 	.word	0x2000000c

08003450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003450:	b490      	push	{r4, r7}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003456:	4b29      	ldr	r3, [pc, #164]	; (80034fc <HAL_RCC_GetSysClockFreq+0xac>)
 8003458:	1d3c      	adds	r4, r7, #4
 800345a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800345c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003460:	f240 2301 	movw	r3, #513	; 0x201
 8003464:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	2300      	movs	r3, #0
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800347a:	4b21      	ldr	r3, [pc, #132]	; (8003500 <HAL_RCC_GetSysClockFreq+0xb0>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b04      	cmp	r3, #4
 8003488:	d002      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x40>
 800348a:	2b08      	cmp	r3, #8
 800348c:	d003      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x46>
 800348e:	e02b      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003490:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003492:	623b      	str	r3, [r7, #32]
      break;
 8003494:	e02b      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	0c9b      	lsrs	r3, r3, #18
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	3328      	adds	r3, #40	; 0x28
 80034a0:	443b      	add	r3, r7
 80034a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d012      	beq.n	80034d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034b2:	4b13      	ldr	r3, [pc, #76]	; (8003500 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	0c5b      	lsrs	r3, r3, #17
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	3328      	adds	r3, #40	; 0x28
 80034be:	443b      	add	r3, r7
 80034c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80034c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	4a0e      	ldr	r2, [pc, #56]	; (8003504 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034ca:	fb03 f202 	mul.w	r2, r3, r2
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
 80034d6:	e004      	b.n	80034e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	4a0b      	ldr	r2, [pc, #44]	; (8003508 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034dc:	fb02 f303 	mul.w	r3, r2, r3
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	623b      	str	r3, [r7, #32]
      break;
 80034e6:	e002      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034ea:	623b      	str	r3, [r7, #32]
      break;
 80034ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ee:	6a3b      	ldr	r3, [r7, #32]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3728      	adds	r7, #40	; 0x28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc90      	pop	{r4, r7}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	08009d0c 	.word	0x08009d0c
 8003500:	40021000 	.word	0x40021000
 8003504:	007a1200 	.word	0x007a1200
 8003508:	003d0900 	.word	0x003d0900

0800350c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003510:	4b02      	ldr	r3, [pc, #8]	; (800351c <HAL_RCC_GetHCLKFreq+0x10>)
 8003512:	681b      	ldr	r3, [r3, #0]
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr
 800351c:	20000000 	.word	0x20000000

08003520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003524:	f7ff fff2 	bl	800350c <HAL_RCC_GetHCLKFreq>
 8003528:	4602      	mov	r2, r0
 800352a:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	4903      	ldr	r1, [pc, #12]	; (8003544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003536:	5ccb      	ldrb	r3, [r1, r3]
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800353c:	4618      	mov	r0, r3
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000
 8003544:	08009d84 	.word	0x08009d84

08003548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800354c:	f7ff ffde 	bl	800350c <HAL_RCC_GetHCLKFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	0adb      	lsrs	r3, r3, #11
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	4903      	ldr	r1, [pc, #12]	; (800356c <HAL_RCC_GetPCLK2Freq+0x24>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	08009d84 	.word	0x08009d84

08003570 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <RCC_Delay+0x34>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <RCC_Delay+0x38>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	0a5b      	lsrs	r3, r3, #9
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	fb02 f303 	mul.w	r3, r2, r3
 800358a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800358c:	bf00      	nop
  }
  while (Delay --);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1e5a      	subs	r2, r3, #1
 8003592:	60fa      	str	r2, [r7, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f9      	bne.n	800358c <RCC_Delay+0x1c>
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr
 80035a4:	20000000 	.word	0x20000000
 80035a8:	10624dd3 	.word	0x10624dd3

080035ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d07d      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80035c8:	2300      	movs	r3, #0
 80035ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035cc:	4b4f      	ldr	r3, [pc, #316]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10d      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d8:	4b4c      	ldr	r3, [pc, #304]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	4a4b      	ldr	r2, [pc, #300]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e2:	61d3      	str	r3, [r2, #28]
 80035e4:	4b49      	ldr	r3, [pc, #292]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f0:	2301      	movs	r3, #1
 80035f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	4b46      	ldr	r3, [pc, #280]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d118      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003600:	4b43      	ldr	r3, [pc, #268]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a42      	ldr	r2, [pc, #264]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360c:	f7fd fb44 	bl	8000c98 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	e008      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003614:	f7fd fb40 	bl	8000c98 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e06d      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003626:	4b3a      	ldr	r3, [pc, #232]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003632:	4b36      	ldr	r3, [pc, #216]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d02e      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	429a      	cmp	r2, r3
 800364e:	d027      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003650:	4b2e      	ldr	r3, [pc, #184]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003658:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800365a:	4b2e      	ldr	r3, [pc, #184]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003660:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003666:	4a29      	ldr	r2, [pc, #164]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d014      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003676:	f7fd fb0f 	bl	8000c98 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367c:	e00a      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367e:	f7fd fb0b 	bl	8000c98 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f241 3288 	movw	r2, #5000	; 0x1388
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e036      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003694:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ee      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	4917      	ldr	r1, [pc, #92]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d105      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b8:	4b14      	ldr	r3, [pc, #80]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	4a13      	ldr	r2, [pc, #76]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036d0:	4b0e      	ldr	r3, [pc, #56]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	490b      	ldr	r1, [pc, #44]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036ee:	4b07      	ldr	r3, [pc, #28]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	4904      	ldr	r1, [pc, #16]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	40007000 	.word	0x40007000
 8003714:	42420440 	.word	0x42420440

08003718 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003718:	b590      	push	{r4, r7, lr}
 800371a:	b08d      	sub	sp, #52	; 0x34
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003720:	4b58      	ldr	r3, [pc, #352]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003722:	f107 040c 	add.w	r4, r7, #12
 8003726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800372c:	f240 2301 	movw	r3, #513	; 0x201
 8003730:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
 8003736:	2300      	movs	r3, #0
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800373a:	2300      	movs	r3, #0
 800373c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	2300      	movs	r3, #0
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b10      	cmp	r3, #16
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b10      	cmp	r3, #16
 8003750:	f200 808e 	bhi.w	8003870 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d049      	beq.n	80037ee <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d079      	beq.n	8003854 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003760:	e086      	b.n	8003870 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003762:	4b49      	ldr	r3, [pc, #292]	; (8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003768:	4b47      	ldr	r3, [pc, #284]	; (8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d07f      	beq.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	0c9b      	lsrs	r3, r3, #18
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	3330      	adds	r3, #48	; 0x30
 800377e:	443b      	add	r3, r7
 8003780:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003784:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d017      	beq.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003790:	4b3d      	ldr	r3, [pc, #244]	; (8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	0c5b      	lsrs	r3, r3, #17
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	3330      	adds	r3, #48	; 0x30
 800379c:	443b      	add	r3, r7
 800379e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00d      	beq.n	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80037ae:	4a37      	ldr	r2, [pc, #220]	; (800388c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037be:	e004      	b.n	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	4a33      	ldr	r2, [pc, #204]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80037c4:	fb02 f303 	mul.w	r3, r2, r3
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80037ca:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037d6:	d102      	bne.n	80037de <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80037dc:	e04a      	b.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80037de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4a2c      	ldr	r2, [pc, #176]	; (8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80037ec:	e042      	b.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80037ee:	4b26      	ldr	r3, [pc, #152]	; (8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037fe:	d108      	bne.n	8003812 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800380a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003810:	e01f      	b.n	8003852 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800381c:	d109      	bne.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800381e:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800382a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003830:	e00f      	b.n	8003852 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800383c:	d11c      	bne.n	8003878 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800383e:	4b12      	ldr	r3, [pc, #72]	; (8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d016      	beq.n	8003878 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800384a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003850:	e012      	b.n	8003878 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003852:	e011      	b.n	8003878 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003854:	f7ff fe78 	bl	8003548 <HAL_RCC_GetPCLK2Freq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	0b9b      	lsrs	r3, r3, #14
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	3301      	adds	r3, #1
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800386e:	e004      	b.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003870:	bf00      	nop
 8003872:	e002      	b.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003874:	bf00      	nop
 8003876:	e000      	b.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003878:	bf00      	nop
    }
  }
  return (frequency);
 800387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800387c:	4618      	mov	r0, r3
 800387e:	3734      	adds	r7, #52	; 0x34
 8003880:	46bd      	mov	sp, r7
 8003882:	bd90      	pop	{r4, r7, pc}
 8003884:	08009d1c 	.word	0x08009d1c
 8003888:	40021000 	.word	0x40021000
 800388c:	007a1200 	.word	0x007a1200
 8003890:	003d0900 	.word	0x003d0900
 8003894:	aaaaaaab 	.word	0xaaaaaaab

08003898 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e084      	b.n	80039b8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	7c5b      	ldrb	r3, [r3, #17]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d105      	bne.n	80038c4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fc ff8c 	bl	80007dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f87a 	bl	80039c4 <HAL_RTC_WaitForSynchro>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2204      	movs	r2, #4
 80038da:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e06b      	b.n	80039b8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f89c 	bl	8003a1e <RTC_EnterInitMode>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d004      	beq.n	80038f6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2204      	movs	r2, #4
 80038f0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e060      	b.n	80039b8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0207 	bic.w	r2, r2, #7
 8003904:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800390e:	4b2c      	ldr	r3, [pc, #176]	; (80039c0 <HAL_RTC_Init+0x128>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	4a2b      	ldr	r2, [pc, #172]	; (80039c0 <HAL_RTC_Init+0x128>)
 8003914:	f023 0301 	bic.w	r3, r3, #1
 8003918:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800391a:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <HAL_RTC_Init+0x128>)
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	4926      	ldr	r1, [pc, #152]	; (80039c0 <HAL_RTC_Init+0x128>)
 8003928:	4313      	orrs	r3, r2
 800392a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d003      	beq.n	800393e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	e00e      	b.n	800395c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800393e:	2001      	movs	r0, #1
 8003940:	f7ff feea 	bl	8003718 <HAL_RCCEx_GetPeriphCLKFreq>
 8003944:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d104      	bne.n	8003956 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2204      	movs	r2, #4
 8003950:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e030      	b.n	80039b8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3b01      	subs	r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f023 010f 	bic.w	r1, r3, #15
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	0c1a      	lsrs	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	041b      	lsls	r3, r3, #16
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	b291      	uxth	r1, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	430b      	orrs	r3, r1
 8003986:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f870 	bl	8003a6e <RTC_ExitInitMode>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d004      	beq.n	800399e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2204      	movs	r2, #4
 8003998:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e00c      	b.n	80039b8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80039b6:	2300      	movs	r3, #0
  }
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40006c00 	.word	0x40006c00

080039c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e01d      	b.n	8003a16 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0208 	bic.w	r2, r2, #8
 80039e8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80039ea:	f7fd f955 	bl	8000c98 <HAL_GetTick>
 80039ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80039f0:	e009      	b.n	8003a06 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80039f2:	f7fd f951 	bl	8000c98 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a00:	d901      	bls.n	8003a06 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e007      	b.n	8003a16 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0ee      	beq.n	80039f2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003a2a:	f7fd f935 	bl	8000c98 <HAL_GetTick>
 8003a2e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a30:	e009      	b.n	8003a46 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a32:	f7fd f931 	bl	8000c98 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a40:	d901      	bls.n	8003a46 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e00f      	b.n	8003a66 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0ee      	beq.n	8003a32 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0210 	orr.w	r2, r2, #16
 8003a62:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0210 	bic.w	r2, r2, #16
 8003a88:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003a8a:	f7fd f905 	bl	8000c98 <HAL_GetTick>
 8003a8e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a90:	e009      	b.n	8003aa6 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a92:	f7fd f901 	bl	8000c98 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aa0:	d901      	bls.n	8003aa6 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e007      	b.n	8003ab6 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0ee      	beq.n	8003a92 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8003ad0:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <HAL_RTCEx_BKUPWrite+0x30>)
 8003ad2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4413      	add	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	b292      	uxth	r2, r2
 8003ae4:	601a      	str	r2, [r3, #0]
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	40006c00 	.word	0x40006c00

08003af4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <HAL_RTCEx_BKUPRead+0x34>)
 8003b08:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr
 8003b28:	40006c00 	.word	0x40006c00

08003b2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e03f      	b.n	8003bbe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fc ffac 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2224      	movs	r2, #36	; 0x24
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fc7d 	bl	8004470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695a      	ldr	r2, [r3, #20]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ba4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b08a      	sub	sp, #40	; 0x28
 8003bca:	af02      	add	r7, sp, #8
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	603b      	str	r3, [r7, #0]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	d17c      	bne.n	8003ce0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_UART_Transmit+0x2c>
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e075      	b.n	8003ce2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_UART_Transmit+0x3e>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e06e      	b.n	8003ce2 <HAL_UART_Transmit+0x11c>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2221      	movs	r2, #33	; 0x21
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c1a:	f7fd f83d 	bl	8000c98 <HAL_GetTick>
 8003c1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	88fa      	ldrh	r2, [r7, #6]
 8003c24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	88fa      	ldrh	r2, [r7, #6]
 8003c2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c34:	d108      	bne.n	8003c48 <HAL_UART_Transmit+0x82>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d104      	bne.n	8003c48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	e003      	b.n	8003c50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c58:	e02a      	b.n	8003cb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2200      	movs	r2, #0
 8003c62:	2180      	movs	r1, #128	; 0x80
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fa2f 	bl	80040c8 <UART_WaitOnFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e036      	b.n	8003ce2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10b      	bne.n	8003c92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	e007      	b.n	8003ca2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	781a      	ldrb	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1cf      	bne.n	8003c5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2140      	movs	r1, #64	; 0x40
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f9ff 	bl	80040c8 <UART_WaitOnFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e006      	b.n	8003ce2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e000      	b.n	8003ce2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
  }
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d11d      	bne.n	8003d40 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <HAL_UART_Receive_IT+0x26>
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e016      	b.n	8003d42 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_UART_Receive_IT+0x38>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e00f      	b.n	8003d42 <HAL_UART_Receive_IT+0x58>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	461a      	mov	r2, r3
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fa10 	bl	800415c <UART_Start_Receive_IT>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	e000      	b.n	8003d42 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
  }
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08a      	sub	sp, #40	; 0x28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10d      	bne.n	8003d9e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_UART_IRQHandler+0x52>
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fac0 	bl	800431c <UART_Receive_IT>
      return;
 8003d9c:	e17b      	b.n	8004096 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80b1 	beq.w	8003f08 <HAL_UART_IRQHandler+0x1bc>
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d105      	bne.n	8003dbc <HAL_UART_IRQHandler+0x70>
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80a6 	beq.w	8003f08 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_UART_IRQHandler+0x90>
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_UART_IRQHandler+0xb0>
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	f043 0202 	orr.w	r2, r3, #2
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_UART_IRQHandler+0xd0>
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f043 0204 	orr.w	r2, r3, #4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00f      	beq.n	8003e46 <HAL_UART_IRQHandler+0xfa>
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d104      	bne.n	8003e3a <HAL_UART_IRQHandler+0xee>
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f043 0208 	orr.w	r2, r3, #8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 811e 	beq.w	800408c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <HAL_UART_IRQHandler+0x11e>
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fa59 	bl	800431c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d102      	bne.n	8003e92 <HAL_UART_IRQHandler+0x146>
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d031      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f99b 	bl	80041ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d023      	beq.n	8003eee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d013      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	4a76      	ldr	r2, [pc, #472]	; (800409c <HAL_UART_IRQHandler+0x350>)
 8003ec4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fd f85a 	bl	8000f84 <HAL_DMA_Abort_IT>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d016      	beq.n	8003f04 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee4:	e00e      	b.n	8003f04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fc fdb8 	bl	8000a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eec:	e00a      	b.n	8003f04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fc fdb4 	bl	8000a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	e006      	b.n	8003f04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fc fdb0 	bl	8000a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f02:	e0c3      	b.n	800408c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f04:	bf00      	nop
    return;
 8003f06:	e0c1      	b.n	800408c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	f040 80a1 	bne.w	8004054 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 809b 	beq.w	8004054 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8095 	beq.w	8004054 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d04e      	beq.n	8003fec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f58:	8a3b      	ldrh	r3, [r7, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 8098 	beq.w	8004090 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f64:	8a3a      	ldrh	r2, [r7, #16]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	f080 8092 	bcs.w	8004090 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8a3a      	ldrh	r2, [r7, #16]
 8003f70:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d02b      	beq.n	8003fd4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f8a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003faa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0210 	bic.w	r2, r2, #16
 8003fc8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fc ff9d 	bl	8000f0e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f864 	bl	80040b2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fea:	e051      	b.n	8004090 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d047      	beq.n	8004094 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004004:	8a7b      	ldrh	r3, [r7, #18]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d044      	beq.n	8004094 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004018:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0201 	bic.w	r2, r2, #1
 8004028:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0210 	bic.w	r2, r2, #16
 8004046:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004048:	8a7b      	ldrh	r3, [r7, #18]
 800404a:	4619      	mov	r1, r3
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f830 	bl	80040b2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004052:	e01f      	b.n	8004094 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	d008      	beq.n	8004070 <HAL_UART_IRQHandler+0x324>
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f8f0 	bl	800424e <UART_Transmit_IT>
    return;
 800406e:	e012      	b.n	8004096 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00d      	beq.n	8004096 <HAL_UART_IRQHandler+0x34a>
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f931 	bl	80042ec <UART_EndTransmit_IT>
    return;
 800408a:	e004      	b.n	8004096 <HAL_UART_IRQHandler+0x34a>
    return;
 800408c:	bf00      	nop
 800408e:	e002      	b.n	8004096 <HAL_UART_IRQHandler+0x34a>
      return;
 8004090:	bf00      	nop
 8004092:	e000      	b.n	8004096 <HAL_UART_IRQHandler+0x34a>
      return;
 8004094:	bf00      	nop
  }
}
 8004096:	3728      	adds	r7, #40	; 0x28
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	08004227 	.word	0x08004227

080040a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d8:	e02c      	b.n	8004134 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d028      	beq.n	8004134 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80040e8:	f7fc fdd6 	bl	8000c98 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d21d      	bcs.n	8004134 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004106:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695a      	ldr	r2, [r3, #20]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0201 	bic.w	r2, r2, #1
 8004116:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e00f      	b.n	8004154 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4013      	ands	r3, r2
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	429a      	cmp	r2, r3
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	461a      	mov	r2, r3
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	429a      	cmp	r2, r3
 8004150:	d0c3      	beq.n	80040da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	4613      	mov	r3, r2
 8004168:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	88fa      	ldrh	r2, [r7, #6]
 8004174:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	88fa      	ldrh	r2, [r7, #6]
 800417a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2222      	movs	r2, #34	; 0x22
 8004186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0201 	orr.w	r2, r2, #1
 80041b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0220 	orr.w	r2, r2, #32
 80041c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d107      	bne.n	800420e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0210 	bic.w	r2, r2, #16
 800420c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f7fc fc0b 	bl	8000a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004246:	bf00      	nop
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b21      	cmp	r3, #33	; 0x21
 8004260:	d13e      	bne.n	80042e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426a:	d114      	bne.n	8004296 <UART_Transmit_IT+0x48>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d110      	bne.n	8004296 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004288:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	1c9a      	adds	r2, r3, #2
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	621a      	str	r2, [r3, #32]
 8004294:	e008      	b.n	80042a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	1c59      	adds	r1, r3, #1
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6211      	str	r1, [r2, #32]
 80042a0:	781a      	ldrb	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	4619      	mov	r1, r3
 80042b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10f      	bne.n	80042dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	e000      	b.n	80042e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042e0:	2302      	movs	r3, #2
  }
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004302:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff fec7 	bl	80040a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b22      	cmp	r3, #34	; 0x22
 800432e:	f040 8099 	bne.w	8004464 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433a:	d117      	bne.n	800436c <UART_Receive_IT+0x50>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d113      	bne.n	800436c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	b29b      	uxth	r3, r3
 8004356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435a:	b29a      	uxth	r2, r3
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	1c9a      	adds	r2, r3, #2
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	629a      	str	r2, [r3, #40]	; 0x28
 800436a:	e026      	b.n	80043ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437e:	d007      	beq.n	8004390 <UART_Receive_IT+0x74>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10a      	bne.n	800439e <UART_Receive_IT+0x82>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d106      	bne.n	800439e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	b2da      	uxtb	r2, r3
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	701a      	strb	r2, [r3, #0]
 800439c:	e008      	b.n	80043b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	4619      	mov	r1, r3
 80043c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d148      	bne.n	8004460 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0220 	bic.w	r2, r2, #32
 80043dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695a      	ldr	r2, [r3, #20]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0201 	bic.w	r2, r2, #1
 80043fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	2b01      	cmp	r3, #1
 800440c:	d123      	bne.n	8004456 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0210 	bic.w	r2, r2, #16
 8004422:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b10      	cmp	r3, #16
 8004430:	d10a      	bne.n	8004448 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800444c:	4619      	mov	r1, r3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff fe2f 	bl	80040b2 <HAL_UARTEx_RxEventCallback>
 8004454:	e002      	b.n	800445c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fc fb0a 	bl	8000a70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e002      	b.n	8004466 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	e000      	b.n	8004466 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004464:	2302      	movs	r3, #2
  }
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044aa:	f023 030c 	bic.w	r3, r3, #12
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	430b      	orrs	r3, r1
 80044b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a2c      	ldr	r2, [pc, #176]	; (8004584 <UART_SetConfig+0x114>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d103      	bne.n	80044e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044d8:	f7ff f836 	bl	8003548 <HAL_RCC_GetPCLK2Freq>
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	e002      	b.n	80044e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044e0:	f7ff f81e 	bl	8003520 <HAL_RCC_GetPCLK1Freq>
 80044e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	009a      	lsls	r2, r3, #2
 80044f0:	441a      	add	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fc:	4a22      	ldr	r2, [pc, #136]	; (8004588 <UART_SetConfig+0x118>)
 80044fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	0119      	lsls	r1, r3, #4
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	009a      	lsls	r2, r3, #2
 8004510:	441a      	add	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	fbb2 f2f3 	udiv	r2, r2, r3
 800451c:	4b1a      	ldr	r3, [pc, #104]	; (8004588 <UART_SetConfig+0x118>)
 800451e:	fba3 0302 	umull	r0, r3, r3, r2
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	2064      	movs	r0, #100	; 0x64
 8004526:	fb00 f303 	mul.w	r3, r0, r3
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	3332      	adds	r3, #50	; 0x32
 8004530:	4a15      	ldr	r2, [pc, #84]	; (8004588 <UART_SetConfig+0x118>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800453c:	4419      	add	r1, r3
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	009a      	lsls	r2, r3, #2
 8004548:	441a      	add	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	fbb2 f2f3 	udiv	r2, r2, r3
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <UART_SetConfig+0x118>)
 8004556:	fba3 0302 	umull	r0, r3, r3, r2
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	2064      	movs	r0, #100	; 0x64
 800455e:	fb00 f303 	mul.w	r3, r0, r3
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	3332      	adds	r3, #50	; 0x32
 8004568:	4a07      	ldr	r2, [pc, #28]	; (8004588 <UART_SetConfig+0x118>)
 800456a:	fba2 2303 	umull	r2, r3, r2, r3
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	f003 020f 	and.w	r2, r3, #15
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	440a      	add	r2, r1
 800457a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40013800 	.word	0x40013800
 8004588:	51eb851f 	.word	0x51eb851f

0800458c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800458c:	b084      	sub	sp, #16
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	f107 0014 	add.w	r0, r7, #20
 800459a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	b004      	add	sp, #16
 80045aa:	4770      	bx	lr

080045ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80045c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr

080045d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80045e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	43db      	mvns	r3, r3
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	4013      	ands	r3, r2
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004624:	b084      	sub	sp, #16
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	f107 0014 	add.w	r0, r7, #20
 8004632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	b004      	add	sp, #16
 8004662:	4770      	bx	lr

08004664 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004664:	b480      	push	{r7}
 8004666:	b09b      	sub	sp, #108	; 0x6c
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	78db      	ldrb	r3, [r3, #3]
 8004692:	2b03      	cmp	r3, #3
 8004694:	d81f      	bhi.n	80046d6 <USB_ActivateEndpoint+0x72>
 8004696:	a201      	add	r2, pc, #4	; (adr r2, 800469c <USB_ActivateEndpoint+0x38>)
 8004698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469c:	080046ad 	.word	0x080046ad
 80046a0:	080046c9 	.word	0x080046c9
 80046a4:	080046df 	.word	0x080046df
 80046a8:	080046bb 	.word	0x080046bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80046ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80046b8:	e012      	b.n	80046e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80046ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046be:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80046c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80046c6:	e00b      	b.n	80046e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80046c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80046d4:	e004      	b.n	80046e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80046dc:	e000      	b.n	80046e0 <USB_ActivateEndpoint+0x7c>
      break;
 80046de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	441a      	add	r2, r3
 80046ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fe:	b29b      	uxth	r3, r3
 8004700:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004718:	b29a      	uxth	r2, r3
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	4313      	orrs	r3, r2
 8004722:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	441a      	add	r2, r3
 8004730:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800473c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004744:	b29b      	uxth	r3, r3
 8004746:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	7b1b      	ldrb	r3, [r3, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f040 8149 	bne.w	80049e4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8084 	beq.w	8004864 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004766:	b29b      	uxth	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	4413      	add	r3, r2
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	011a      	lsls	r2, r3, #4
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	88db      	ldrh	r3, [r3, #6]
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	b29b      	uxth	r3, r3
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	81fb      	strh	r3, [r7, #14]
 800479e:	89fb      	ldrh	r3, [r7, #14]
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01b      	beq.n	80047e0 <USB_ActivateEndpoint+0x17c>
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047be:	81bb      	strh	r3, [r7, #12]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	441a      	add	r2, r3
 80047ca:	89bb      	ldrh	r3, [r7, #12]
 80047cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047dc:	b29b      	uxth	r3, r3
 80047de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	78db      	ldrb	r3, [r3, #3]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d020      	beq.n	800482a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047fe:	813b      	strh	r3, [r7, #8]
 8004800:	893b      	ldrh	r3, [r7, #8]
 8004802:	f083 0320 	eor.w	r3, r3, #32
 8004806:	813b      	strh	r3, [r7, #8]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	441a      	add	r2, r3
 8004812:	893b      	ldrh	r3, [r7, #8]
 8004814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004824:	b29b      	uxth	r3, r3
 8004826:	8013      	strh	r3, [r2, #0]
 8004828:	e27f      	b.n	8004d2a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004840:	817b      	strh	r3, [r7, #10]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	441a      	add	r2, r3
 800484c:	897b      	ldrh	r3, [r7, #10]
 800484e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485e:	b29b      	uxth	r3, r3
 8004860:	8013      	strh	r3, [r2, #0]
 8004862:	e262      	b.n	8004d2a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800486e:	b29b      	uxth	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	4413      	add	r3, r2
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	011a      	lsls	r2, r3, #4
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	4413      	add	r3, r2
 8004882:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	88db      	ldrh	r3, [r3, #6]
 800488c:	085b      	lsrs	r3, r3, #1
 800488e:	b29b      	uxth	r3, r3
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	4413      	add	r3, r2
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	011a      	lsls	r2, r3, #4
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	4413      	add	r3, r2
 80048b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048ba:	623b      	str	r3, [r7, #32]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d112      	bne.n	80048ea <USB_ActivateEndpoint+0x286>
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	801a      	strh	r2, [r3, #0]
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	e02f      	b.n	800494a <USB_ActivateEndpoint+0x2e6>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2b3e      	cmp	r3, #62	; 0x3e
 80048f0:	d813      	bhi.n	800491a <USB_ActivateEndpoint+0x2b6>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	085b      	lsrs	r3, r3, #1
 80048f8:	663b      	str	r3, [r7, #96]	; 0x60
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <USB_ActivateEndpoint+0x2a8>
 8004906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004908:	3301      	adds	r3, #1
 800490a:	663b      	str	r3, [r7, #96]	; 0x60
 800490c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800490e:	b29b      	uxth	r3, r3
 8004910:	029b      	lsls	r3, r3, #10
 8004912:	b29a      	uxth	r2, r3
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	801a      	strh	r2, [r3, #0]
 8004918:	e017      	b.n	800494a <USB_ActivateEndpoint+0x2e6>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	663b      	str	r3, [r7, #96]	; 0x60
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 031f 	and.w	r3, r3, #31
 800492a:	2b00      	cmp	r3, #0
 800492c:	d102      	bne.n	8004934 <USB_ActivateEndpoint+0x2d0>
 800492e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004930:	3b01      	subs	r3, #1
 8004932:	663b      	str	r3, [r7, #96]	; 0x60
 8004934:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004936:	b29b      	uxth	r3, r3
 8004938:	029b      	lsls	r3, r3, #10
 800493a:	b29b      	uxth	r3, r3
 800493c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004944:	b29a      	uxth	r2, r3
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	83fb      	strh	r3, [r7, #30]
 8004958:	8bfb      	ldrh	r3, [r7, #30]
 800495a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d01b      	beq.n	800499a <USB_ActivateEndpoint+0x336>
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004978:	83bb      	strh	r3, [r7, #28]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	441a      	add	r2, r3
 8004984:	8bbb      	ldrh	r3, [r7, #28]
 8004986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004996:	b29b      	uxth	r3, r3
 8004998:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b0:	837b      	strh	r3, [r7, #26]
 80049b2:	8b7b      	ldrh	r3, [r7, #26]
 80049b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049b8:	837b      	strh	r3, [r7, #26]
 80049ba:	8b7b      	ldrh	r3, [r7, #26]
 80049bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049c0:	837b      	strh	r3, [r7, #26]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	8b7b      	ldrh	r3, [r7, #26]
 80049ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049de:	b29b      	uxth	r3, r3
 80049e0:	8013      	strh	r3, [r2, #0]
 80049e2:	e1a2      	b.n	8004d2a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	441a      	add	r2, r3
 8004a08:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a14:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a30:	4413      	add	r3, r2
 8004a32:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	011a      	lsls	r2, r3, #4
 8004a3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a42:	657b      	str	r3, [r7, #84]	; 0x54
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	891b      	ldrh	r3, [r3, #8]
 8004a48:	085b      	lsrs	r3, r3, #1
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a52:	801a      	strh	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	653b      	str	r3, [r7, #80]	; 0x50
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a64:	4413      	add	r3, r2
 8004a66:	653b      	str	r3, [r7, #80]	; 0x50
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	011a      	lsls	r2, r3, #4
 8004a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	895b      	ldrh	r3, [r3, #10]
 8004a7c:	085b      	lsrs	r3, r3, #1
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a86:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f040 8091 	bne.w	8004bb4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004aa0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d01b      	beq.n	8004ae2 <USB_ActivateEndpoint+0x47e>
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	441a      	add	r2, r3
 8004acc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	873b      	strh	r3, [r7, #56]	; 0x38
 8004af0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01b      	beq.n	8004b32 <USB_ActivateEndpoint+0x4ce>
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b10:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	441a      	add	r2, r3
 8004b1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b48:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b50:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b58:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	441a      	add	r2, r3
 8004b64:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b90:	867b      	strh	r3, [r7, #50]	; 0x32
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	441a      	add	r2, r3
 8004b9c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	8013      	strh	r3, [r2, #0]
 8004bb2:	e0ba      	b.n	8004d2a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004bc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01d      	beq.n	8004c0c <USB_ActivateEndpoint+0x5a8>
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	441a      	add	r2, r3
 8004bf4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01d      	beq.n	8004c64 <USB_ActivateEndpoint+0x600>
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	441a      	add	r2, r3
 8004c4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	78db      	ldrb	r3, [r3, #3]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d024      	beq.n	8004cb6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004c86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c8a:	f083 0320 	eor.w	r3, r3, #32
 8004c8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	441a      	add	r2, r3
 8004c9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	8013      	strh	r3, [r2, #0]
 8004cb4:	e01d      	b.n	8004cf2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ccc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	441a      	add	r2, r3
 8004cda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d08:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	441a      	add	r2, r3
 8004d14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004d2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	376c      	adds	r7, #108	; 0x6c
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b08d      	sub	sp, #52	; 0x34
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	7b1b      	ldrb	r3, [r3, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f040 808e 	bne.w	8004e68 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	785b      	ldrb	r3, [r3, #1]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d044      	beq.n	8004dde <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	81bb      	strh	r3, [r7, #12]
 8004d62:	89bb      	ldrh	r3, [r7, #12]
 8004d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d01b      	beq.n	8004da4 <USB_DeactivateEndpoint+0x6c>
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	817b      	strh	r3, [r7, #10]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	441a      	add	r2, r3
 8004d8e:	897b      	ldrh	r3, [r7, #10]
 8004d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dba:	813b      	strh	r3, [r7, #8]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	441a      	add	r2, r3
 8004dc6:	893b      	ldrh	r3, [r7, #8]
 8004dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	8013      	strh	r3, [r2, #0]
 8004ddc:	e192      	b.n	8005104 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	827b      	strh	r3, [r7, #18]
 8004dec:	8a7b      	ldrh	r3, [r7, #18]
 8004dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d01b      	beq.n	8004e2e <USB_DeactivateEndpoint+0xf6>
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0c:	823b      	strh	r3, [r7, #16]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	441a      	add	r2, r3
 8004e18:	8a3b      	ldrh	r3, [r7, #16]
 8004e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e44:	81fb      	strh	r3, [r7, #14]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	441a      	add	r2, r3
 8004e50:	89fb      	ldrh	r3, [r7, #14]
 8004e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	8013      	strh	r3, [r2, #0]
 8004e66:	e14d      	b.n	8005104 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f040 80a5 	bne.w	8004fbc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	843b      	strh	r3, [r7, #32]
 8004e80:	8c3b      	ldrh	r3, [r7, #32]
 8004e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d01b      	beq.n	8004ec2 <USB_DeactivateEndpoint+0x18a>
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea0:	83fb      	strh	r3, [r7, #30]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	441a      	add	r2, r3
 8004eac:	8bfb      	ldrh	r3, [r7, #30]
 8004eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	83bb      	strh	r3, [r7, #28]
 8004ed0:	8bbb      	ldrh	r3, [r7, #28]
 8004ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d01b      	beq.n	8004f12 <USB_DeactivateEndpoint+0x1da>
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef0:	837b      	strh	r3, [r7, #26]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	441a      	add	r2, r3
 8004efc:	8b7b      	ldrh	r3, [r7, #26]
 8004efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f28:	833b      	strh	r3, [r7, #24]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	441a      	add	r2, r3
 8004f34:	8b3b      	ldrh	r3, [r7, #24]
 8004f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f60:	82fb      	strh	r3, [r7, #22]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	441a      	add	r2, r3
 8004f6c:	8afb      	ldrh	r3, [r7, #22]
 8004f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f98:	82bb      	strh	r3, [r7, #20]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	441a      	add	r2, r3
 8004fa4:	8abb      	ldrh	r3, [r7, #20]
 8004fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	8013      	strh	r3, [r2, #0]
 8004fba:	e0a3      	b.n	8005104 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004fca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01b      	beq.n	800500c <USB_DeactivateEndpoint+0x2d4>
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	441a      	add	r2, r3
 8004ff6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005000:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005008:	b29b      	uxth	r3, r3
 800500a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	857b      	strh	r3, [r7, #42]	; 0x2a
 800501a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800501c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01b      	beq.n	800505c <USB_DeactivateEndpoint+0x324>
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	853b      	strh	r3, [r7, #40]	; 0x28
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	441a      	add	r2, r3
 8005046:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005054:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005058:	b29b      	uxth	r3, r3
 800505a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005072:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	441a      	add	r2, r3
 800507e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800508c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005090:	b29b      	uxth	r3, r3
 8005092:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	441a      	add	r2, r3
 80050b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	441a      	add	r2, r3
 80050ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005100:	b29b      	uxth	r3, r3
 8005102:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3734      	adds	r7, #52	; 0x34
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b0cc      	sub	sp, #304	; 0x130
 8005114:	af00      	add	r7, sp, #0
 8005116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800511a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800511e:	6018      	str	r0, [r3, #0]
 8005120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005128:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800512a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800512e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	785b      	ldrb	r3, [r3, #1]
 8005136:	2b01      	cmp	r3, #1
 8005138:	f041 817d 	bne.w	8006436 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800513c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005140:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	429a      	cmp	r2, r3
 8005156:	d908      	bls.n	800516a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005168:	e007      	b.n	800517a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800516a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800517a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	7b1b      	ldrb	r3, [r3, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d152      	bne.n	8005230 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800518a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6959      	ldr	r1, [r3, #20]
 8005196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	88da      	ldrh	r2, [r3, #6]
 80051a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80051ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80051b0:	6800      	ldr	r0, [r0, #0]
 80051b2:	f001 ff23 	bl	8006ffc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80051be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051c2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d8:	b29b      	uxth	r3, r3
 80051da:	4619      	mov	r1, r3
 80051dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80051e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051e8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	440a      	add	r2, r1
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	011a      	lsls	r2, r3, #4
 8005200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005204:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4413      	add	r3, r2
 800520c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005214:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800521e:	b29a      	uxth	r2, r3
 8005220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005224:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	801a      	strh	r2, [r3, #0]
 800522c:	f001 b8b5 	b.w	800639a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005234:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	78db      	ldrb	r3, [r3, #3]
 800523c:	2b02      	cmp	r3, #2
 800523e:	f040 84c6 	bne.w	8005bce <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6a1a      	ldr	r2, [r3, #32]
 800524e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005252:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	429a      	cmp	r2, r3
 800525c:	f240 8443 	bls.w	8005ae6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005264:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800528a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005298:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	441a      	add	r2, r3
 80052a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80052a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80052bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6a1a      	ldr	r2, [r3, #32]
 80052c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052cc:	1ad2      	subs	r2, r2, r3
 80052ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 823e 	beq.w	800577e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005306:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800530a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800530e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	2b00      	cmp	r3, #0
 8005324:	f040 809a 	bne.w	800545c <USB_EPStartXfer+0x34c>
 8005328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800532c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005330:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005334:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005340:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800534a:	b29b      	uxth	r3, r3
 800534c:	4619      	mov	r1, r3
 800534e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005356:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800535a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800535e:	6812      	ldr	r2, [r2, #0]
 8005360:	440a      	add	r2, r1
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	011a      	lsls	r2, r3, #4
 8005372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4413      	add	r3, r2
 800537e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005386:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005390:	2b00      	cmp	r3, #0
 8005392:	d122      	bne.n	80053da <USB_EPStartXfer+0x2ca>
 8005394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005398:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	801a      	strh	r2, [r3, #0]
 80053b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	801a      	strh	r2, [r3, #0]
 80053d8:	e079      	b.n	80054ce <USB_EPStartXfer+0x3be>
 80053da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053de:	2b3e      	cmp	r3, #62	; 0x3e
 80053e0:	d81b      	bhi.n	800541a <USB_EPStartXfer+0x30a>
 80053e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e6:	085b      	lsrs	r3, r3, #1
 80053e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80053ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d004      	beq.n	8005402 <USB_EPStartXfer+0x2f2>
 80053f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053fc:	3301      	adds	r3, #1
 80053fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005402:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005406:	b29b      	uxth	r3, r3
 8005408:	029b      	lsls	r3, r3, #10
 800540a:	b29a      	uxth	r2, r3
 800540c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005410:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	801a      	strh	r2, [r3, #0]
 8005418:	e059      	b.n	80054ce <USB_EPStartXfer+0x3be>
 800541a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005428:	f003 031f 	and.w	r3, r3, #31
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <USB_EPStartXfer+0x32a>
 8005430:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005434:	3b01      	subs	r3, #1
 8005436:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800543a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800543e:	b29b      	uxth	r3, r3
 8005440:	029b      	lsls	r3, r3, #10
 8005442:	b29b      	uxth	r3, r3
 8005444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800544c:	b29a      	uxth	r2, r3
 800544e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005452:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	801a      	strh	r2, [r3, #0]
 800545a:	e038      	b.n	80054ce <USB_EPStartXfer+0x3be>
 800545c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	785b      	ldrb	r3, [r3, #1]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d130      	bne.n	80054ce <USB_EPStartXfer+0x3be>
 800546c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005470:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547a:	b29b      	uxth	r3, r3
 800547c:	4619      	mov	r1, r3
 800547e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005482:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005486:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800548a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	440a      	add	r2, r1
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005498:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	011a      	lsls	r2, r3, #4
 80054a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4413      	add	r3, r2
 80054ae:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80054b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	895b      	ldrh	r3, [r3, #10]
 80054da:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6959      	ldr	r1, [r3, #20]
 80054ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054f4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80054f8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80054fc:	6800      	ldr	r0, [r0, #0]
 80054fe:	f001 fd7d 	bl	8006ffc <USB_WritePMA>
            ep->xfer_buff += len;
 8005502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005512:	441a      	add	r2, r3
 8005514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6a1a      	ldr	r2, [r3, #32]
 800552c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005530:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	429a      	cmp	r2, r3
 800553a:	d90f      	bls.n	800555c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800553c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6a1a      	ldr	r2, [r3, #32]
 8005548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800554c:	1ad2      	subs	r2, r2, r3
 800554e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	621a      	str	r2, [r3, #32]
 800555a:	e00e      	b.n	800557a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800555c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005560:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800556c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005570:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2200      	movs	r2, #0
 8005578:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800557a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800557e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	785b      	ldrb	r3, [r3, #1]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f040 809a 	bne.w	80056c0 <USB_EPStartXfer+0x5b0>
 800558c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005590:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005594:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005598:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800559c:	6812      	ldr	r2, [r2, #0]
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	4619      	mov	r1, r3
 80055b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80055ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055be:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80055c2:	6812      	ldr	r2, [r2, #0]
 80055c4:	440a      	add	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	011a      	lsls	r2, r3, #4
 80055d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055da:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4413      	add	r3, r2
 80055e2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80055e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d122      	bne.n	800563e <USB_EPStartXfer+0x52e>
 80055f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	b29b      	uxth	r3, r3
 8005606:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800560a:	b29a      	uxth	r2, r3
 800560c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005610:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	801a      	strh	r2, [r3, #0]
 8005618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29b      	uxth	r3, r3
 8005626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800562e:	b29a      	uxth	r2, r3
 8005630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005634:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	801a      	strh	r2, [r3, #0]
 800563c:	e083      	b.n	8005746 <USB_EPStartXfer+0x636>
 800563e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005642:	2b3e      	cmp	r3, #62	; 0x3e
 8005644:	d81b      	bhi.n	800567e <USB_EPStartXfer+0x56e>
 8005646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800564a:	085b      	lsrs	r3, r3, #1
 800564c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <USB_EPStartXfer+0x556>
 800565c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005660:	3301      	adds	r3, #1
 8005662:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005666:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800566a:	b29b      	uxth	r3, r3
 800566c:	029b      	lsls	r3, r3, #10
 800566e:	b29a      	uxth	r2, r3
 8005670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005674:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	801a      	strh	r2, [r3, #0]
 800567c:	e063      	b.n	8005746 <USB_EPStartXfer+0x636>
 800567e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005682:	095b      	lsrs	r3, r3, #5
 8005684:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	2b00      	cmp	r3, #0
 8005692:	d104      	bne.n	800569e <USB_EPStartXfer+0x58e>
 8005694:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005698:	3b01      	subs	r3, #1
 800569a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800569e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	029b      	lsls	r3, r3, #10
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	801a      	strh	r2, [r3, #0]
 80056be:	e042      	b.n	8005746 <USB_EPStartXfer+0x636>
 80056c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	785b      	ldrb	r3, [r3, #1]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d13a      	bne.n	8005746 <USB_EPStartXfer+0x636>
 80056d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80056d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056dc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80056e0:	6812      	ldr	r2, [r2, #0]
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	4619      	mov	r1, r3
 80056f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80056fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005702:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005706:	6812      	ldr	r2, [r2, #0]
 8005708:	440a      	add	r2, r1
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	011a      	lsls	r2, r3, #4
 800571a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4413      	add	r3, r2
 8005726:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800572a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005738:	b29a      	uxth	r2, r3
 800573a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	891b      	ldrh	r3, [r3, #8]
 8005752:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6959      	ldr	r1, [r3, #20]
 8005762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005766:	b29b      	uxth	r3, r3
 8005768:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800576c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005770:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005774:	6800      	ldr	r0, [r0, #0]
 8005776:	f001 fc41 	bl	8006ffc <USB_WritePMA>
 800577a:	f000 be0e 	b.w	800639a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800577e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d16d      	bne.n	800586a <USB_EPStartXfer+0x75a>
 800578e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005792:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	64bb      	str	r3, [r7, #72]	; 0x48
 800579a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	461a      	mov	r2, r3
 80057ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ae:	4413      	add	r3, r2
 80057b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80057b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	011a      	lsls	r2, r3, #4
 80057c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057c2:	4413      	add	r3, r2
 80057c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057c8:	647b      	str	r3, [r7, #68]	; 0x44
 80057ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d112      	bne.n	80057f8 <USB_EPStartXfer+0x6e8>
 80057d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057dc:	b29a      	uxth	r2, r3
 80057de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057e0:	801a      	strh	r2, [r3, #0]
 80057e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057f4:	801a      	strh	r2, [r3, #0]
 80057f6:	e063      	b.n	80058c0 <USB_EPStartXfer+0x7b0>
 80057f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057fc:	2b3e      	cmp	r3, #62	; 0x3e
 80057fe:	d817      	bhi.n	8005830 <USB_EPStartXfer+0x720>
 8005800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800580a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d004      	beq.n	8005820 <USB_EPStartXfer+0x710>
 8005816:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800581a:	3301      	adds	r3, #1
 800581c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005820:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005824:	b29b      	uxth	r3, r3
 8005826:	029b      	lsls	r3, r3, #10
 8005828:	b29a      	uxth	r2, r3
 800582a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800582c:	801a      	strh	r2, [r3, #0]
 800582e:	e047      	b.n	80058c0 <USB_EPStartXfer+0x7b0>
 8005830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005834:	095b      	lsrs	r3, r3, #5
 8005836:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800583a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	2b00      	cmp	r3, #0
 8005844:	d104      	bne.n	8005850 <USB_EPStartXfer+0x740>
 8005846:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800584a:	3b01      	subs	r3, #1
 800584c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005850:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005854:	b29b      	uxth	r3, r3
 8005856:	029b      	lsls	r3, r3, #10
 8005858:	b29b      	uxth	r3, r3
 800585a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800585e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005862:	b29a      	uxth	r2, r3
 8005864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005866:	801a      	strh	r2, [r3, #0]
 8005868:	e02a      	b.n	80058c0 <USB_EPStartXfer+0x7b0>
 800586a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	785b      	ldrb	r3, [r3, #1]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d122      	bne.n	80058c0 <USB_EPStartXfer+0x7b0>
 800587a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	653b      	str	r3, [r7, #80]	; 0x50
 8005886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005894:	b29b      	uxth	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800589a:	4413      	add	r3, r2
 800589c:	653b      	str	r3, [r7, #80]	; 0x50
 800589e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	011a      	lsls	r2, r3, #4
 80058ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ae:	4413      	add	r3, r2
 80058b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	891b      	ldrh	r3, [r3, #8]
 80058cc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6959      	ldr	r1, [r3, #20]
 80058dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058e6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058ea:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058ee:	6800      	ldr	r0, [r0, #0]
 80058f0:	f001 fb84 	bl	8006ffc <USB_WritePMA>
            ep->xfer_buff += len;
 80058f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695a      	ldr	r2, [r3, #20]
 8005900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005904:	441a      	add	r2, r3
 8005906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005916:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6a1a      	ldr	r2, [r3, #32]
 800591e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	429a      	cmp	r2, r3
 800592c:	d90f      	bls.n	800594e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800592e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6a1a      	ldr	r2, [r3, #32]
 800593a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593e:	1ad2      	subs	r2, r2, r3
 8005940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	621a      	str	r2, [r3, #32]
 800594c:	e00e      	b.n	800596c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800594e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800595e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005962:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2200      	movs	r2, #0
 800596a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800596c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	643b      	str	r3, [r7, #64]	; 0x40
 8005978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800597c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	785b      	ldrb	r3, [r3, #1]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d16d      	bne.n	8005a64 <USB_EPStartXfer+0x954>
 8005988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	63bb      	str	r3, [r7, #56]	; 0x38
 8005994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005998:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	461a      	mov	r2, r3
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	4413      	add	r3, r2
 80059aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	011a      	lsls	r2, r3, #4
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	4413      	add	r3, r2
 80059be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059c2:	637b      	str	r3, [r7, #52]	; 0x34
 80059c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d112      	bne.n	80059f2 <USB_EPStartXfer+0x8e2>
 80059cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	e05d      	b.n	8005aae <USB_EPStartXfer+0x99e>
 80059f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f6:	2b3e      	cmp	r3, #62	; 0x3e
 80059f8:	d817      	bhi.n	8005a2a <USB_EPStartXfer+0x91a>
 80059fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d004      	beq.n	8005a1a <USB_EPStartXfer+0x90a>
 8005a10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a14:	3301      	adds	r3, #1
 8005a16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	029b      	lsls	r3, r3, #10
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a26:	801a      	strh	r2, [r3, #0]
 8005a28:	e041      	b.n	8005aae <USB_EPStartXfer+0x99e>
 8005a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a38:	f003 031f 	and.w	r3, r3, #31
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <USB_EPStartXfer+0x93a>
 8005a40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a44:	3b01      	subs	r3, #1
 8005a46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	029b      	lsls	r3, r3, #10
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	e024      	b.n	8005aae <USB_EPStartXfer+0x99e>
 8005a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	785b      	ldrb	r3, [r3, #1]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d11c      	bne.n	8005aae <USB_EPStartXfer+0x99e>
 8005a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a88:	4413      	add	r3, r2
 8005a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	011a      	lsls	r2, r3, #4
 8005a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	895b      	ldrh	r3, [r3, #10]
 8005aba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6959      	ldr	r1, [r3, #20]
 8005aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ad4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ad8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005adc:	6800      	ldr	r0, [r0, #0]
 8005ade:	f001 fa8d 	bl	8006ffc <USB_WritePMA>
 8005ae2:	f000 bc5a 	b.w	800639a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	441a      	add	r2, r3
 8005b3a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	461a      	mov	r2, r3
 8005b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b72:	4413      	add	r3, r2
 8005b74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	011a      	lsls	r2, r3, #4
 8005b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b86:	4413      	add	r3, r2
 8005b88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	891b      	ldrh	r3, [r3, #8]
 8005ba4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6959      	ldr	r1, [r3, #20]
 8005bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005bbe:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005bc2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005bc6:	6800      	ldr	r0, [r0, #0]
 8005bc8:	f001 fa18 	bl	8006ffc <USB_WritePMA>
 8005bcc:	e3e5      	b.n	800639a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	441a      	add	r2, r3
 8005c12:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c1e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6a1a      	ldr	r2, [r3, #32]
 8005c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c3a:	1ad2      	subs	r2, r2, r3
 8005c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 81bc 	beq.w	8005fe8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	785b      	ldrb	r3, [r3, #1]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d16d      	bne.n	8005d6a <USB_EPStartXfer+0xc5a>
 8005c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cae:	4413      	add	r3, r2
 8005cb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	011a      	lsls	r2, r3, #4
 8005cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cc8:	677b      	str	r3, [r7, #116]	; 0x74
 8005cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d112      	bne.n	8005cf8 <USB_EPStartXfer+0xbe8>
 8005cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ce0:	801a      	strh	r2, [r3, #0]
 8005ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cf4:	801a      	strh	r2, [r3, #0]
 8005cf6:	e060      	b.n	8005dba <USB_EPStartXfer+0xcaa>
 8005cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cfc:	2b3e      	cmp	r3, #62	; 0x3e
 8005cfe:	d817      	bhi.n	8005d30 <USB_EPStartXfer+0xc20>
 8005d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d04:	085b      	lsrs	r3, r3, #1
 8005d06:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d004      	beq.n	8005d20 <USB_EPStartXfer+0xc10>
 8005d16:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d20:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	029b      	lsls	r3, r3, #10
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	e044      	b.n	8005dba <USB_EPStartXfer+0xcaa>
 8005d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d34:	095b      	lsrs	r3, r3, #5
 8005d36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d3e:	f003 031f 	and.w	r3, r3, #31
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d104      	bne.n	8005d50 <USB_EPStartXfer+0xc40>
 8005d46:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d50:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	029b      	lsls	r3, r3, #10
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d66:	801a      	strh	r2, [r3, #0]
 8005d68:	e027      	b.n	8005dba <USB_EPStartXfer+0xcaa>
 8005d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d11f      	bne.n	8005dba <USB_EPStartXfer+0xcaa>
 8005d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d90:	4413      	add	r3, r2
 8005d92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	011a      	lsls	r2, r3, #4
 8005da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005da8:	4413      	add	r3, r2
 8005daa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005db8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	895b      	ldrh	r3, [r3, #10]
 8005dc6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6959      	ldr	r1, [r3, #20]
 8005dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005de0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005de4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005de8:	6800      	ldr	r0, [r0, #0]
 8005dea:	f001 f907 	bl	8006ffc <USB_WritePMA>
          ep->xfer_buff += len;
 8005dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695a      	ldr	r2, [r3, #20]
 8005dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dfe:	441a      	add	r2, r3
 8005e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6a1a      	ldr	r2, [r3, #32]
 8005e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d90f      	bls.n	8005e48 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6a1a      	ldr	r2, [r3, #32]
 8005e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e38:	1ad2      	subs	r2, r2, r3
 8005e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	621a      	str	r2, [r3, #32]
 8005e46:	e00e      	b.n	8005e66 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2200      	movs	r2, #0
 8005e64:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 8295 	beq.w	800639a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d16d      	bne.n	8005f5c <USB_EPStartXfer+0xe4c>
 8005e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ea0:	4413      	add	r3, r2
 8005ea2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	011a      	lsls	r2, r3, #4
 8005eb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005eba:	667b      	str	r3, [r7, #100]	; 0x64
 8005ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d112      	bne.n	8005eea <USB_EPStartXfer+0xdda>
 8005ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ed2:	801a      	strh	r2, [r3, #0]
 8005ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ee6:	801a      	strh	r2, [r3, #0]
 8005ee8:	e063      	b.n	8005fb2 <USB_EPStartXfer+0xea2>
 8005eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eee:	2b3e      	cmp	r3, #62	; 0x3e
 8005ef0:	d817      	bhi.n	8005f22 <USB_EPStartXfer+0xe12>
 8005ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef6:	085b      	lsrs	r3, r3, #1
 8005ef8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d004      	beq.n	8005f12 <USB_EPStartXfer+0xe02>
 8005f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	029b      	lsls	r3, r3, #10
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f1e:	801a      	strh	r2, [r3, #0]
 8005f20:	e047      	b.n	8005fb2 <USB_EPStartXfer+0xea2>
 8005f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f26:	095b      	lsrs	r3, r3, #5
 8005f28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d104      	bne.n	8005f42 <USB_EPStartXfer+0xe32>
 8005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	029b      	lsls	r3, r3, #10
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f58:	801a      	strh	r2, [r3, #0]
 8005f5a:	e02a      	b.n	8005fb2 <USB_EPStartXfer+0xea2>
 8005f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	785b      	ldrb	r3, [r3, #1]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d122      	bne.n	8005fb2 <USB_EPStartXfer+0xea2>
 8005f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	673b      	str	r3, [r7, #112]	; 0x70
 8005f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f8c:	4413      	add	r3, r2
 8005f8e:	673b      	str	r3, [r7, #112]	; 0x70
 8005f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	011a      	lsls	r2, r3, #4
 8005f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	891b      	ldrh	r3, [r3, #8]
 8005fbe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6959      	ldr	r1, [r3, #20]
 8005fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005fd8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005fdc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005fe0:	6800      	ldr	r0, [r0, #0]
 8005fe2:	f001 f80b 	bl	8006ffc <USB_WritePMA>
 8005fe6:	e1d8      	b.n	800639a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d178      	bne.n	80060ea <USB_EPStartXfer+0xfda>
 8005ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006014:	b29b      	uxth	r3, r3
 8006016:	461a      	mov	r2, r3
 8006018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800601c:	4413      	add	r3, r2
 800601e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	011a      	lsls	r2, r3, #4
 8006030:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006034:	4413      	add	r3, r2
 8006036:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800603a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800603e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d116      	bne.n	8006074 <USB_EPStartXfer+0xf64>
 8006046:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006052:	b29a      	uxth	r2, r3
 8006054:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800606a:	b29a      	uxth	r2, r3
 800606c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	e06b      	b.n	800614c <USB_EPStartXfer+0x103c>
 8006074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006078:	2b3e      	cmp	r3, #62	; 0x3e
 800607a:	d818      	bhi.n	80060ae <USB_EPStartXfer+0xf9e>
 800607c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d004      	beq.n	800609c <USB_EPStartXfer+0xf8c>
 8006092:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006096:	3301      	adds	r3, #1
 8006098:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800609c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	029b      	lsls	r3, r3, #10
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060aa:	801a      	strh	r2, [r3, #0]
 80060ac:	e04e      	b.n	800614c <USB_EPStartXfer+0x103c>
 80060ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80060b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d104      	bne.n	80060ce <USB_EPStartXfer+0xfbe>
 80060c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80060c8:	3b01      	subs	r3, #1
 80060ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80060ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	029b      	lsls	r3, r3, #10
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060e6:	801a      	strh	r2, [r3, #0]
 80060e8:	e030      	b.n	800614c <USB_EPStartXfer+0x103c>
 80060ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	785b      	ldrb	r3, [r3, #1]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d128      	bne.n	800614c <USB_EPStartXfer+0x103c>
 80060fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006116:	b29b      	uxth	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800611e:	4413      	add	r3, r2
 8006120:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	011a      	lsls	r2, r3, #4
 8006132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006136:	4413      	add	r3, r2
 8006138:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800613c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006144:	b29a      	uxth	r2, r3
 8006146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800614a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800614c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006150:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	891b      	ldrh	r3, [r3, #8]
 8006158:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800615c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006160:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6959      	ldr	r1, [r3, #20]
 8006168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800616c:	b29b      	uxth	r3, r3
 800616e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006172:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006176:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800617a:	6800      	ldr	r0, [r0, #0]
 800617c:	f000 ff3e 	bl	8006ffc <USB_WritePMA>
          ep->xfer_buff += len;
 8006180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695a      	ldr	r2, [r3, #20]
 800618c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006190:	441a      	add	r2, r3
 8006192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800619e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6a1a      	ldr	r2, [r3, #32]
 80061aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d90f      	bls.n	80061da <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80061ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6a1a      	ldr	r2, [r3, #32]
 80061c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ca:	1ad2      	subs	r2, r2, r3
 80061cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	621a      	str	r2, [r3, #32]
 80061d8:	e00e      	b.n	80061f8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80061da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80061ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2200      	movs	r2, #0
 80061f6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80061f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 80cc 	beq.w	800639a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006206:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d178      	bne.n	8006312 <USB_EPStartXfer+0x1202>
 8006220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006224:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800622e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800623c:	b29b      	uxth	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006244:	4413      	add	r3, r2
 8006246:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800624a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	011a      	lsls	r2, r3, #4
 8006258:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800625c:	4413      	add	r3, r2
 800625e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006262:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626a:	2b00      	cmp	r3, #0
 800626c:	d116      	bne.n	800629c <USB_EPStartXfer+0x118c>
 800626e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	b29b      	uxth	r3, r3
 8006276:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800627a:	b29a      	uxth	r2, r3
 800627c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006280:	801a      	strh	r2, [r3, #0]
 8006282:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	b29b      	uxth	r3, r3
 800628a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800628e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006292:	b29a      	uxth	r2, r3
 8006294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006298:	801a      	strh	r2, [r3, #0]
 800629a:	e064      	b.n	8006366 <USB_EPStartXfer+0x1256>
 800629c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a0:	2b3e      	cmp	r3, #62	; 0x3e
 80062a2:	d818      	bhi.n	80062d6 <USB_EPStartXfer+0x11c6>
 80062a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a8:	085b      	lsrs	r3, r3, #1
 80062aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80062ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d004      	beq.n	80062c4 <USB_EPStartXfer+0x11b4>
 80062ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062be:	3301      	adds	r3, #1
 80062c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80062c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	029b      	lsls	r3, r3, #10
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062d2:	801a      	strh	r2, [r3, #0]
 80062d4:	e047      	b.n	8006366 <USB_EPStartXfer+0x1256>
 80062d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80062e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <USB_EPStartXfer+0x11e6>
 80062ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062f0:	3b01      	subs	r3, #1
 80062f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80062f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	029b      	lsls	r3, r3, #10
 80062fe:	b29b      	uxth	r3, r3
 8006300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006308:	b29a      	uxth	r2, r3
 800630a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800630e:	801a      	strh	r2, [r3, #0]
 8006310:	e029      	b.n	8006366 <USB_EPStartXfer+0x1256>
 8006312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d121      	bne.n	8006366 <USB_EPStartXfer+0x1256>
 8006322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006326:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006330:	b29b      	uxth	r3, r3
 8006332:	461a      	mov	r2, r3
 8006334:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006338:	4413      	add	r3, r2
 800633a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800633e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	011a      	lsls	r2, r3, #4
 800634c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006350:	4413      	add	r3, r2
 8006352:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800635a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800635e:	b29a      	uxth	r2, r3
 8006360:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006364:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	895b      	ldrh	r3, [r3, #10]
 8006372:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6959      	ldr	r1, [r3, #20]
 8006382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006386:	b29b      	uxth	r3, r3
 8006388:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800638c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006390:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006394:	6800      	ldr	r0, [r0, #0]
 8006396:	f000 fe31 	bl	8006ffc <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800639a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80063bc:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80063c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c8:	8013      	strh	r3, [r2, #0]
 80063ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ce:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80063d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80063d6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80063da:	8812      	ldrh	r2, [r2, #0]
 80063dc:	f082 0210 	eor.w	r2, r2, #16
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80063ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80063ee:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80063f2:	8812      	ldrh	r2, [r2, #0]
 80063f4:	f082 0220 	eor.w	r2, r2, #32
 80063f8:	801a      	strh	r2, [r3, #0]
 80063fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	441a      	add	r2, r3
 8006414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006418:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800642e:	b29b      	uxth	r3, r3
 8006430:	8013      	strh	r3, [r2, #0]
 8006432:	f000 bc9f 	b.w	8006d74 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	7b1b      	ldrb	r3, [r3, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	f040 80ae 	bne.w	80065a4 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800644c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	699a      	ldr	r2, [r3, #24]
 8006454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006458:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	429a      	cmp	r2, r3
 8006462:	d917      	bls.n	8006494 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699a      	ldr	r2, [r3, #24]
 8006480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006484:	1ad2      	subs	r2, r2, r3
 8006486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	619a      	str	r2, [r3, #24]
 8006492:	e00e      	b.n	80064b2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006498:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80064a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2200      	movs	r2, #0
 80064b0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80064b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064d6:	4413      	add	r3, r2
 80064d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	011a      	lsls	r2, r3, #4
 80064ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064ee:	4413      	add	r3, r2
 80064f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d116      	bne.n	800652e <USB_EPStartXfer+0x141e>
 8006500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800650c:	b29a      	uxth	r2, r3
 800650e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006512:	801a      	strh	r2, [r3, #0]
 8006514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29b      	uxth	r3, r3
 800651c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006524:	b29a      	uxth	r2, r3
 8006526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800652a:	801a      	strh	r2, [r3, #0]
 800652c:	e3e8      	b.n	8006d00 <USB_EPStartXfer+0x1bf0>
 800652e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006532:	2b3e      	cmp	r3, #62	; 0x3e
 8006534:	d818      	bhi.n	8006568 <USB_EPStartXfer+0x1458>
 8006536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800653a:	085b      	lsrs	r3, r3, #1
 800653c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d004      	beq.n	8006556 <USB_EPStartXfer+0x1446>
 800654c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006550:	3301      	adds	r3, #1
 8006552:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006556:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800655a:	b29b      	uxth	r3, r3
 800655c:	029b      	lsls	r3, r3, #10
 800655e:	b29a      	uxth	r2, r3
 8006560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	e3cb      	b.n	8006d00 <USB_EPStartXfer+0x1bf0>
 8006568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656c:	095b      	lsrs	r3, r3, #5
 800656e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <USB_EPStartXfer+0x1478>
 800657e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006582:	3b01      	subs	r3, #1
 8006584:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006588:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800658c:	b29b      	uxth	r3, r3
 800658e:	029b      	lsls	r3, r3, #10
 8006590:	b29b      	uxth	r3, r3
 8006592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659a:	b29a      	uxth	r2, r3
 800659c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065a0:	801a      	strh	r2, [r3, #0]
 80065a2:	e3ad      	b.n	8006d00 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80065a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	78db      	ldrb	r3, [r3, #3]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	f040 8200 	bne.w	80069b6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80065b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	785b      	ldrb	r3, [r3, #1]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f040 8091 	bne.w	80066ea <USB_EPStartXfer+0x15da>
 80065c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065ec:	4413      	add	r3, r2
 80065ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	011a      	lsls	r2, r3, #4
 8006600:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006604:	4413      	add	r3, r2
 8006606:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800660a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800660e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d116      	bne.n	800664c <USB_EPStartXfer+0x153c>
 800661e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	b29b      	uxth	r3, r3
 8006626:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800662a:	b29a      	uxth	r2, r3
 800662c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006630:	801a      	strh	r2, [r3, #0]
 8006632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800663e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006642:	b29a      	uxth	r2, r3
 8006644:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006648:	801a      	strh	r2, [r3, #0]
 800664a:	e083      	b.n	8006754 <USB_EPStartXfer+0x1644>
 800664c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b3e      	cmp	r3, #62	; 0x3e
 800665a:	d820      	bhi.n	800669e <USB_EPStartXfer+0x158e>
 800665c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	085b      	lsrs	r3, r3, #1
 800666a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800666e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d004      	beq.n	800668c <USB_EPStartXfer+0x157c>
 8006682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006686:	3301      	adds	r3, #1
 8006688:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800668c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006690:	b29b      	uxth	r3, r3
 8006692:	029b      	lsls	r3, r3, #10
 8006694:	b29a      	uxth	r2, r3
 8006696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800669a:	801a      	strh	r2, [r3, #0]
 800669c:	e05a      	b.n	8006754 <USB_EPStartXfer+0x1644>
 800669e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	095b      	lsrs	r3, r3, #5
 80066ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	f003 031f 	and.w	r3, r3, #31
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d104      	bne.n	80066ce <USB_EPStartXfer+0x15be>
 80066c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c8:	3b01      	subs	r3, #1
 80066ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	029b      	lsls	r3, r3, #10
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066e6:	801a      	strh	r2, [r3, #0]
 80066e8:	e034      	b.n	8006754 <USB_EPStartXfer+0x1644>
 80066ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d12c      	bne.n	8006754 <USB_EPStartXfer+0x1644>
 80066fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006716:	b29b      	uxth	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800671e:	4413      	add	r3, r2
 8006720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006728:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	011a      	lsls	r2, r3, #4
 8006732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006736:	4413      	add	r3, r2
 8006738:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800673c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	b29a      	uxth	r2, r3
 800674e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	785b      	ldrb	r3, [r3, #1]
 800676e:	2b00      	cmp	r3, #0
 8006770:	f040 8091 	bne.w	8006896 <USB_EPStartXfer+0x1786>
 8006774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006778:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006786:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006790:	b29b      	uxth	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006798:	4413      	add	r3, r2
 800679a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800679e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	011a      	lsls	r2, r3, #4
 80067ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067b0:	4413      	add	r3, r2
 80067b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d116      	bne.n	80067f8 <USB_EPStartXfer+0x16e8>
 80067ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067dc:	801a      	strh	r2, [r3, #0]
 80067de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067f4:	801a      	strh	r2, [r3, #0]
 80067f6:	e07c      	b.n	80068f2 <USB_EPStartXfer+0x17e2>
 80067f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	2b3e      	cmp	r3, #62	; 0x3e
 8006806:	d820      	bhi.n	800684a <USB_EPStartXfer+0x173a>
 8006808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	085b      	lsrs	r3, r3, #1
 8006816:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800681a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d004      	beq.n	8006838 <USB_EPStartXfer+0x1728>
 800682e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006832:	3301      	adds	r3, #1
 8006834:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006838:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800683c:	b29b      	uxth	r3, r3
 800683e:	029b      	lsls	r3, r3, #10
 8006840:	b29a      	uxth	r2, r3
 8006842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006846:	801a      	strh	r2, [r3, #0]
 8006848:	e053      	b.n	80068f2 <USB_EPStartXfer+0x17e2>
 800684a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	095b      	lsrs	r3, r3, #5
 8006858:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800685c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006860:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f003 031f 	and.w	r3, r3, #31
 800686c:	2b00      	cmp	r3, #0
 800686e:	d104      	bne.n	800687a <USB_EPStartXfer+0x176a>
 8006870:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006874:	3b01      	subs	r3, #1
 8006876:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800687a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800687e:	b29b      	uxth	r3, r3
 8006880:	029b      	lsls	r3, r3, #10
 8006882:	b29b      	uxth	r3, r3
 8006884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800688c:	b29a      	uxth	r2, r3
 800688e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006892:	801a      	strh	r2, [r3, #0]
 8006894:	e02d      	b.n	80068f2 <USB_EPStartXfer+0x17e2>
 8006896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	785b      	ldrb	r3, [r3, #1]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d125      	bne.n	80068f2 <USB_EPStartXfer+0x17e2>
 80068a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068bc:	4413      	add	r3, r2
 80068be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	011a      	lsls	r2, r3, #4
 80068d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068d4:	4413      	add	r3, r2
 80068d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068f0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80068f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 81fe 	beq.w	8006d00 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006908:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006924:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d005      	beq.n	800693c <USB_EPStartXfer+0x182c>
 8006930:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10d      	bne.n	8006958 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800693c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006944:	2b00      	cmp	r3, #0
 8006946:	f040 81db 	bne.w	8006d00 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800694a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800694e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006952:	2b00      	cmp	r3, #0
 8006954:	f040 81d4 	bne.w	8006d00 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	b29b      	uxth	r3, r3
 8006976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800697a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006986:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006990:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	441a      	add	r2, r3
 800699c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80069a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	8013      	strh	r3, [r2, #0]
 80069b4:	e1a4      	b.n	8006d00 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80069b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	78db      	ldrb	r3, [r3, #3]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	f040 819a 	bne.w	8006cfc <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80069c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	699a      	ldr	r2, [r3, #24]
 80069d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d917      	bls.n	8006a14 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80069e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80069f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	699a      	ldr	r2, [r3, #24]
 8006a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a04:	1ad2      	subs	r2, r2, r3
 8006a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	619a      	str	r2, [r3, #24]
 8006a12:	e00e      	b.n	8006a32 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d178      	bne.n	8006b34 <USB_EPStartXfer+0x1a24>
 8006a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	461a      	mov	r2, r3
 8006a62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a66:	4413      	add	r3, r2
 8006a68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	011a      	lsls	r2, r3, #4
 8006a7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a7e:	4413      	add	r3, r2
 8006a80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d116      	bne.n	8006abe <USB_EPStartXfer+0x19ae>
 8006a90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006aa2:	801a      	strh	r2, [r3, #0]
 8006aa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006aba:	801a      	strh	r2, [r3, #0]
 8006abc:	e06b      	b.n	8006b96 <USB_EPStartXfer+0x1a86>
 8006abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ac4:	d818      	bhi.n	8006af8 <USB_EPStartXfer+0x19e8>
 8006ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d004      	beq.n	8006ae6 <USB_EPStartXfer+0x19d6>
 8006adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	029b      	lsls	r3, r3, #10
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006af4:	801a      	strh	r2, [r3, #0]
 8006af6:	e04e      	b.n	8006b96 <USB_EPStartXfer+0x1a86>
 8006af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006afc:	095b      	lsrs	r3, r3, #5
 8006afe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b06:	f003 031f 	and.w	r3, r3, #31
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d104      	bne.n	8006b18 <USB_EPStartXfer+0x1a08>
 8006b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b12:	3b01      	subs	r3, #1
 8006b14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	029b      	lsls	r3, r3, #10
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b30:	801a      	strh	r2, [r3, #0]
 8006b32:	e030      	b.n	8006b96 <USB_EPStartXfer+0x1a86>
 8006b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	785b      	ldrb	r3, [r3, #1]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d128      	bne.n	8006b96 <USB_EPStartXfer+0x1a86>
 8006b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	461a      	mov	r2, r3
 8006b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b68:	4413      	add	r3, r2
 8006b6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	011a      	lsls	r2, r3, #4
 8006b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b80:	4413      	add	r3, r2
 8006b82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b94:	801a      	strh	r2, [r3, #0]
 8006b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d178      	bne.n	8006ca6 <USB_EPStartXfer+0x1b96>
 8006bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bd8:	4413      	add	r3, r2
 8006bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	011a      	lsls	r2, r3, #4
 8006bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d116      	bne.n	8006c30 <USB_EPStartXfer+0x1b20>
 8006c02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c14:	801a      	strh	r2, [r3, #0]
 8006c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c2c:	801a      	strh	r2, [r3, #0]
 8006c2e:	e067      	b.n	8006d00 <USB_EPStartXfer+0x1bf0>
 8006c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c34:	2b3e      	cmp	r3, #62	; 0x3e
 8006c36:	d818      	bhi.n	8006c6a <USB_EPStartXfer+0x1b5a>
 8006c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c3c:	085b      	lsrs	r3, r3, #1
 8006c3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d004      	beq.n	8006c58 <USB_EPStartXfer+0x1b48>
 8006c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c52:	3301      	adds	r3, #1
 8006c54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	029b      	lsls	r3, r3, #10
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c66:	801a      	strh	r2, [r3, #0]
 8006c68:	e04a      	b.n	8006d00 <USB_EPStartXfer+0x1bf0>
 8006c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c6e:	095b      	lsrs	r3, r3, #5
 8006c70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c78:	f003 031f 	and.w	r3, r3, #31
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d104      	bne.n	8006c8a <USB_EPStartXfer+0x1b7a>
 8006c80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c84:	3b01      	subs	r3, #1
 8006c86:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	029b      	lsls	r3, r3, #10
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	e02c      	b.n	8006d00 <USB_EPStartXfer+0x1bf0>
 8006ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	785b      	ldrb	r3, [r3, #1]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d124      	bne.n	8006d00 <USB_EPStartXfer+0x1bf0>
 8006cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ccc:	4413      	add	r3, r2
 8006cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	011a      	lsls	r2, r3, #4
 8006ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf8:	801a      	strh	r2, [r3, #0]
 8006cfa:	e001      	b.n	8006d00 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e03a      	b.n	8006d76 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d26:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006d2a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006d2e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d32:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006d36:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006d3a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d3e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	441a      	add	r2, r3
 8006d5c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d020      	beq.n	8006dd4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006da8:	81bb      	strh	r3, [r7, #12]
 8006daa:	89bb      	ldrh	r3, [r7, #12]
 8006dac:	f083 0310 	eor.w	r3, r3, #16
 8006db0:	81bb      	strh	r3, [r7, #12]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	441a      	add	r2, r3
 8006dbc:	89bb      	ldrh	r3, [r7, #12]
 8006dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	8013      	strh	r3, [r2, #0]
 8006dd2:	e01f      	b.n	8006e14 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dea:	81fb      	strh	r3, [r7, #14]
 8006dec:	89fb      	ldrh	r3, [r7, #14]
 8006dee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006df2:	81fb      	strh	r3, [r7, #14]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	441a      	add	r2, r3
 8006dfe:	89fb      	ldrh	r3, [r7, #14]
 8006e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr

08006e20 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	7b1b      	ldrb	r3, [r3, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f040 809d 	bne.w	8006f6e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d04c      	beq.n	8006ed6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	823b      	strh	r3, [r7, #16]
 8006e4a:	8a3b      	ldrh	r3, [r7, #16]
 8006e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d01b      	beq.n	8006e8c <USB_EPClearStall+0x6c>
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6a:	81fb      	strh	r3, [r7, #14]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	441a      	add	r2, r3
 8006e76:	89fb      	ldrh	r3, [r7, #14]
 8006e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	78db      	ldrb	r3, [r3, #3]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d06c      	beq.n	8006f6e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eaa:	81bb      	strh	r3, [r7, #12]
 8006eac:	89bb      	ldrh	r3, [r7, #12]
 8006eae:	f083 0320 	eor.w	r3, r3, #32
 8006eb2:	81bb      	strh	r3, [r7, #12]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	441a      	add	r2, r3
 8006ebe:	89bb      	ldrh	r3, [r7, #12]
 8006ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	8013      	strh	r3, [r2, #0]
 8006ed4:	e04b      	b.n	8006f6e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	82fb      	strh	r3, [r7, #22]
 8006ee4:	8afb      	ldrh	r3, [r7, #22]
 8006ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d01b      	beq.n	8006f26 <USB_EPClearStall+0x106>
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f04:	82bb      	strh	r3, [r7, #20]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	441a      	add	r2, r3
 8006f10:	8abb      	ldrh	r3, [r7, #20]
 8006f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3c:	827b      	strh	r3, [r7, #18]
 8006f3e:	8a7b      	ldrh	r3, [r7, #18]
 8006f40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f44:	827b      	strh	r3, [r7, #18]
 8006f46:	8a7b      	ldrh	r3, [r7, #18]
 8006f48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f4c:	827b      	strh	r3, [r7, #18]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	441a      	add	r2, r3
 8006f58:	8a7b      	ldrh	r3, [r7, #18]
 8006f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	371c      	adds	r7, #28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bc80      	pop	{r7}
 8006f78:	4770      	bx	lr

08006f7a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	460b      	mov	r3, r1
 8006f84:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006f86:	78fb      	ldrb	r3, [r7, #3]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d103      	bne.n	8006f94 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2280      	movs	r2, #128	; 0x80
 8006f90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bc80      	pop	{r7}
 8006f9e:	4770      	bx	lr

08006fa0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bc80      	pop	{r7}
 8006fb2:	4770      	bx	lr

08006fb4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr

08006fc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006fda:	68fb      	ldr	r3, [r7, #12]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc80      	pop	{r7}
 8006fe4:	4770      	bx	lr

08006fe6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b083      	sub	sp, #12
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bc80      	pop	{r7}
 8006ffa:	4770      	bx	lr

08006ffc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b08d      	sub	sp, #52	; 0x34
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	4611      	mov	r1, r2
 8007008:	461a      	mov	r2, r3
 800700a:	460b      	mov	r3, r1
 800700c:	80fb      	strh	r3, [r7, #6]
 800700e:	4613      	mov	r3, r2
 8007010:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007012:	88bb      	ldrh	r3, [r7, #4]
 8007014:	3301      	adds	r3, #1
 8007016:	085b      	lsrs	r3, r3, #1
 8007018:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007022:	88fb      	ldrh	r3, [r7, #6]
 8007024:	005a      	lsls	r2, r3, #1
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	4413      	add	r3, r2
 800702a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007034:	e01e      	b.n	8007074 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	3301      	adds	r3, #1
 8007040:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	b29b      	uxth	r3, r3
 8007048:	021b      	lsls	r3, r3, #8
 800704a:	b29b      	uxth	r3, r3
 800704c:	461a      	mov	r2, r3
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	4313      	orrs	r3, r2
 8007052:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	b29a      	uxth	r2, r3
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705e:	3302      	adds	r3, #2
 8007060:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007064:	3302      	adds	r3, #2
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	3301      	adds	r3, #1
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800706e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007070:	3b01      	subs	r3, #1
 8007072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1dd      	bne.n	8007036 <USB_WritePMA+0x3a>
  }
}
 800707a:	bf00      	nop
 800707c:	bf00      	nop
 800707e:	3734      	adds	r7, #52	; 0x34
 8007080:	46bd      	mov	sp, r7
 8007082:	bc80      	pop	{r7}
 8007084:	4770      	bx	lr

08007086 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007086:	b480      	push	{r7}
 8007088:	b08b      	sub	sp, #44	; 0x2c
 800708a:	af00      	add	r7, sp, #0
 800708c:	60f8      	str	r0, [r7, #12]
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	4611      	mov	r1, r2
 8007092:	461a      	mov	r2, r3
 8007094:	460b      	mov	r3, r1
 8007096:	80fb      	strh	r3, [r7, #6]
 8007098:	4613      	mov	r3, r2
 800709a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800709c:	88bb      	ldrh	r3, [r7, #4]
 800709e:	085b      	lsrs	r3, r3, #1
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070ac:	88fb      	ldrh	r3, [r7, #6]
 80070ae:	005a      	lsls	r2, r3, #1
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070b8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
 80070be:	e01b      	b.n	80070f8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	3302      	adds	r3, #2
 80070cc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	3301      	adds	r3, #1
 80070da:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	0a1b      	lsrs	r3, r3, #8
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	3301      	adds	r3, #1
 80070ea:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	3302      	adds	r3, #2
 80070f0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	3b01      	subs	r3, #1
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e0      	bne.n	80070c0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80070fe:	88bb      	ldrh	r3, [r7, #4]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d007      	beq.n	800711a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	b2da      	uxtb	r2, r3
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	701a      	strb	r2, [r3, #0]
  }
}
 800711a:	bf00      	nop
 800711c:	372c      	adds	r7, #44	; 0x2c
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr

08007124 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	7c1b      	ldrb	r3, [r3, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d115      	bne.n	8007168 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800713c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007140:	2202      	movs	r2, #2
 8007142:	2181      	movs	r1, #129	; 0x81
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 ff88 	bl	800905a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007154:	2202      	movs	r2, #2
 8007156:	2101      	movs	r1, #1
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f001 ff7e 	bl	800905a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007166:	e012      	b.n	800718e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007168:	2340      	movs	r3, #64	; 0x40
 800716a:	2202      	movs	r2, #2
 800716c:	2181      	movs	r1, #129	; 0x81
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 ff73 	bl	800905a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800717a:	2340      	movs	r3, #64	; 0x40
 800717c:	2202      	movs	r2, #2
 800717e:	2101      	movs	r1, #1
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 ff6a 	bl	800905a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800718e:	2308      	movs	r3, #8
 8007190:	2203      	movs	r2, #3
 8007192:	2182      	movs	r1, #130	; 0x82
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 ff60 	bl	800905a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80071a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80071a4:	f002 f880 	bl	80092a8 <USBD_static_malloc>
 80071a8:	4602      	mov	r2, r0
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d102      	bne.n	80071c0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80071ba:	2301      	movs	r3, #1
 80071bc:	73fb      	strb	r3, [r7, #15]
 80071be:	e026      	b.n	800720e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2200      	movs	r2, #0
 80071de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	7c1b      	ldrb	r3, [r3, #16]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d109      	bne.n	80071fe <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071f4:	2101      	movs	r1, #1
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f002 f820 	bl	800923c <USBD_LL_PrepareReceive>
 80071fc:	e007      	b.n	800720e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007204:	2340      	movs	r3, #64	; 0x40
 8007206:	2101      	movs	r1, #1
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f002 f817 	bl	800923c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800720e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007228:	2181      	movs	r1, #129	; 0x81
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 ff3b 	bl	80090a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007236:	2101      	movs	r1, #1
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 ff34 	bl	80090a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007246:	2182      	movs	r1, #130	; 0x82
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 ff2c 	bl	80090a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00e      	beq.n	800727c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726e:	4618      	mov	r0, r3
 8007270:	f002 f826 	bl	80092c0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800727c:	7bfb      	ldrb	r3, [r7, #15]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b086      	sub	sp, #24
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007296:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d039      	beq.n	8007324 <USBD_CDC_Setup+0x9e>
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d17f      	bne.n	80073b4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	88db      	ldrh	r3, [r3, #6]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d029      	beq.n	8007310 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	b25b      	sxtb	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	da11      	bge.n	80072ea <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80072d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	88d2      	ldrh	r2, [r2, #6]
 80072d8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80072da:	6939      	ldr	r1, [r7, #16]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	88db      	ldrh	r3, [r3, #6]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 fa09 	bl	80086fa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80072e8:	e06b      	b.n	80073c2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	785a      	ldrb	r2, [r3, #1]
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	88db      	ldrh	r3, [r3, #6]
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007300:	6939      	ldr	r1, [r7, #16]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	88db      	ldrh	r3, [r3, #6]
 8007306:	461a      	mov	r2, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 fa24 	bl	8008756 <USBD_CtlPrepareRx>
      break;
 800730e:	e058      	b.n	80073c2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	7850      	ldrb	r0, [r2, #1]
 800731c:	2200      	movs	r2, #0
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	4798      	blx	r3
      break;
 8007322:	e04e      	b.n	80073c2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	785b      	ldrb	r3, [r3, #1]
 8007328:	2b0b      	cmp	r3, #11
 800732a:	d02e      	beq.n	800738a <USBD_CDC_Setup+0x104>
 800732c:	2b0b      	cmp	r3, #11
 800732e:	dc38      	bgt.n	80073a2 <USBD_CDC_Setup+0x11c>
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <USBD_CDC_Setup+0xb4>
 8007334:	2b0a      	cmp	r3, #10
 8007336:	d014      	beq.n	8007362 <USBD_CDC_Setup+0xdc>
 8007338:	e033      	b.n	80073a2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007340:	2b03      	cmp	r3, #3
 8007342:	d107      	bne.n	8007354 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007344:	f107 030c 	add.w	r3, r7, #12
 8007348:	2202      	movs	r2, #2
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 f9d4 	bl	80086fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007352:	e02e      	b.n	80073b2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 f965 	bl	8008626 <USBD_CtlError>
            ret = USBD_FAIL;
 800735c:	2302      	movs	r3, #2
 800735e:	75fb      	strb	r3, [r7, #23]
          break;
 8007360:	e027      	b.n	80073b2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007368:	2b03      	cmp	r3, #3
 800736a:	d107      	bne.n	800737c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800736c:	f107 030f 	add.w	r3, r7, #15
 8007370:	2201      	movs	r2, #1
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f001 f9c0 	bl	80086fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800737a:	e01a      	b.n	80073b2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 f951 	bl	8008626 <USBD_CtlError>
            ret = USBD_FAIL;
 8007384:	2302      	movs	r3, #2
 8007386:	75fb      	strb	r3, [r7, #23]
          break;
 8007388:	e013      	b.n	80073b2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007390:	2b03      	cmp	r3, #3
 8007392:	d00d      	beq.n	80073b0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 f945 	bl	8008626 <USBD_CtlError>
            ret = USBD_FAIL;
 800739c:	2302      	movs	r3, #2
 800739e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80073a0:	e006      	b.n	80073b0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 f93e 	bl	8008626 <USBD_CtlError>
          ret = USBD_FAIL;
 80073aa:	2302      	movs	r3, #2
 80073ac:	75fb      	strb	r3, [r7, #23]
          break;
 80073ae:	e000      	b.n	80073b2 <USBD_CDC_Setup+0x12c>
          break;
 80073b0:	bf00      	nop
      }
      break;
 80073b2:	e006      	b.n	80073c2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f001 f935 	bl	8008626 <USBD_CtlError>
      ret = USBD_FAIL;
 80073bc:	2302      	movs	r3, #2
 80073be:	75fb      	strb	r3, [r7, #23]
      break;
 80073c0:	bf00      	nop
  }

  return ret;
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073de:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073e6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d03a      	beq.n	8007468 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80073f2:	78fa      	ldrb	r2, [r7, #3]
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	4613      	mov	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	440b      	add	r3, r1
 8007400:	331c      	adds	r3, #28
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d029      	beq.n	800745c <USBD_CDC_DataIn+0x90>
 8007408:	78fa      	ldrb	r2, [r7, #3]
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	4613      	mov	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	440b      	add	r3, r1
 8007416:	331c      	adds	r3, #28
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	78f9      	ldrb	r1, [r7, #3]
 800741c:	68b8      	ldr	r0, [r7, #8]
 800741e:	460b      	mov	r3, r1
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	440b      	add	r3, r1
 8007424:	00db      	lsls	r3, r3, #3
 8007426:	4403      	add	r3, r0
 8007428:	3338      	adds	r3, #56	; 0x38
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007430:	fb01 f303 	mul.w	r3, r1, r3
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d110      	bne.n	800745c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800743a:	78fa      	ldrb	r2, [r7, #3]
 800743c:	6879      	ldr	r1, [r7, #4]
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	440b      	add	r3, r1
 8007448:	331c      	adds	r3, #28
 800744a:	2200      	movs	r2, #0
 800744c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800744e:	78f9      	ldrb	r1, [r7, #3]
 8007450:	2300      	movs	r3, #0
 8007452:	2200      	movs	r2, #0
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 fece 	bl	80091f6 <USBD_LL_Transmit>
 800745a:	e003      	b.n	8007464 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	e000      	b.n	800746a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007468:	2302      	movs	r3, #2
  }
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	460b      	mov	r3, r1
 800747c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007484:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 fef9 	bl	8009282 <USBD_LL_GetRxDataSize>
 8007490:	4602      	mov	r2, r0
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00d      	beq.n	80074be <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80074b6:	4611      	mov	r1, r2
 80074b8:	4798      	blx	r3

    return USBD_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	e000      	b.n	80074c0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80074be:	2302      	movs	r3, #2
  }
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d015      	beq.n	800750e <USBD_CDC_EP0_RxReady+0x46>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80074e8:	2bff      	cmp	r3, #255	; 0xff
 80074ea:	d010      	beq.n	800750e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80074fa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007502:	b292      	uxth	r2, r2
 8007504:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	22ff      	movs	r2, #255	; 0xff
 800750a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2243      	movs	r2, #67	; 0x43
 8007524:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007526:	4b03      	ldr	r3, [pc, #12]	; (8007534 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	bc80      	pop	{r7}
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	2000009c 	.word	0x2000009c

08007538 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2243      	movs	r2, #67	; 0x43
 8007544:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007546:	4b03      	ldr	r3, [pc, #12]	; (8007554 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	20000058 	.word	0x20000058

08007558 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2243      	movs	r2, #67	; 0x43
 8007564:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007566:	4b03      	ldr	r3, [pc, #12]	; (8007574 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007568:	4618      	mov	r0, r3
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	bc80      	pop	{r7}
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	200000e0 	.word	0x200000e0

08007578 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	220a      	movs	r2, #10
 8007584:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007586:	4b03      	ldr	r3, [pc, #12]	; (8007594 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	bc80      	pop	{r7}
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	20000014 	.word	0x20000014

08007598 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80075a2:	2302      	movs	r3, #2
 80075a4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr

080075c4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80075e2:	88fa      	ldrh	r2, [r7, #6]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	371c      	adds	r7, #28
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bc80      	pop	{r7}
 80075f4:	4770      	bx	lr

080075f6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007606:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	bc80      	pop	{r7}
 800761a:	4770      	bx	lr

0800761c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007632:	2b00      	cmp	r3, #0
 8007634:	d01c      	beq.n	8007670 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800763c:	2b00      	cmp	r3, #0
 800763e:	d115      	bne.n	800766c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2201      	movs	r2, #1
 8007644:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800765e:	b29b      	uxth	r3, r3
 8007660:	2181      	movs	r1, #129	; 0x81
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 fdc7 	bl	80091f6 <USBD_LL_Transmit>

      return USBD_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	e002      	b.n	8007672 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800766c:	2301      	movs	r3, #1
 800766e:	e000      	b.n	8007672 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007670:	2302      	movs	r3, #2
  }
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007688:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007690:	2b00      	cmp	r3, #0
 8007692:	d017      	beq.n	80076c4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	7c1b      	ldrb	r3, [r3, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d109      	bne.n	80076b0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076a6:	2101      	movs	r1, #1
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 fdc7 	bl	800923c <USBD_LL_PrepareReceive>
 80076ae:	e007      	b.n	80076c0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076b6:	2340      	movs	r3, #64	; 0x40
 80076b8:	2101      	movs	r1, #1
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 fdbe 	bl	800923c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	e000      	b.n	80076c6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80076c4:	2302      	movs	r3, #2
  }
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	4613      	mov	r3, r2
 80076da:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80076e2:	2302      	movs	r3, #2
 80076e4:	e01a      	b.n	800771c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	79fa      	ldrb	r2, [r7, #7]
 8007712:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f001 fc2b 	bl	8008f70 <USBD_LL_Init>

  return USBD_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d006      	beq.n	8007746 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	73fb      	strb	r3, [r7, #15]
 8007744:	e001      	b.n	800774a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007746:	2302      	movs	r3, #2
 8007748:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800774a:	7bfb      	ldrb	r3, [r7, #15]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	bc80      	pop	{r7}
 8007754:	4770      	bx	lr

08007756 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 fc60 	bl	8009024 <USBD_LL_Start>

  return USBD_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr

08007782 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	460b      	mov	r3, r1
 800778c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800778e:	2302      	movs	r3, #2
 8007790:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00c      	beq.n	80077b6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	78fa      	ldrb	r2, [r7, #3]
 80077a6:	4611      	mov	r1, r2
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	4798      	blx	r3
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80077b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	78fa      	ldrb	r2, [r7, #3]
 80077d6:	4611      	mov	r1, r2
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	4798      	blx	r3

  return USBD_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 fed8 	bl	80085ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800780c:	461a      	mov	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800781a:	f003 031f 	and.w	r3, r3, #31
 800781e:	2b02      	cmp	r3, #2
 8007820:	d016      	beq.n	8007850 <USBD_LL_SetupStage+0x6a>
 8007822:	2b02      	cmp	r3, #2
 8007824:	d81c      	bhi.n	8007860 <USBD_LL_SetupStage+0x7a>
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <USBD_LL_SetupStage+0x4a>
 800782a:	2b01      	cmp	r3, #1
 800782c:	d008      	beq.n	8007840 <USBD_LL_SetupStage+0x5a>
 800782e:	e017      	b.n	8007860 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f9cb 	bl	8007bd4 <USBD_StdDevReq>
      break;
 800783e:	e01a      	b.n	8007876 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fa2d 	bl	8007ca8 <USBD_StdItfReq>
      break;
 800784e:	e012      	b.n	8007876 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fa6d 	bl	8007d38 <USBD_StdEPReq>
      break;
 800785e:	e00a      	b.n	8007876 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007866:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800786a:	b2db      	uxtb	r3, r3
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 fc38 	bl	80090e4 <USBD_LL_StallEP>
      break;
 8007874:	bf00      	nop
  }

  return USBD_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	460b      	mov	r3, r1
 800788a:	607a      	str	r2, [r7, #4]
 800788c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d14b      	bne.n	800792c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800789a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d134      	bne.n	8007910 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d919      	bls.n	80078e6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	1ad2      	subs	r2, r2, r3
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d203      	bcs.n	80078d4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	e002      	b.n	80078da <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80078d8:	b29b      	uxth	r3, r3
 80078da:	461a      	mov	r2, r3
 80078dc:	6879      	ldr	r1, [r7, #4]
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 ff57 	bl	8008792 <USBD_CtlContinueRx>
 80078e4:	e038      	b.n	8007958 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00a      	beq.n	8007908 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d105      	bne.n	8007908 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 ff54 	bl	80087b6 <USBD_CtlSendStatus>
 800790e:	e023      	b.n	8007958 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007916:	2b05      	cmp	r3, #5
 8007918:	d11e      	bne.n	8007958 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007922:	2100      	movs	r1, #0
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f001 fbdd 	bl	80090e4 <USBD_LL_StallEP>
 800792a:	e015      	b.n	8007958 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00d      	beq.n	8007954 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800793e:	2b03      	cmp	r3, #3
 8007940:	d108      	bne.n	8007954 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	7afa      	ldrb	r2, [r7, #11]
 800794c:	4611      	mov	r1, r2
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	4798      	blx	r3
 8007952:	e001      	b.n	8007958 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007954:	2302      	movs	r3, #2
 8007956:	e000      	b.n	800795a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b086      	sub	sp, #24
 8007966:	af00      	add	r7, sp, #0
 8007968:	60f8      	str	r0, [r7, #12]
 800796a:	460b      	mov	r3, r1
 800796c:	607a      	str	r2, [r7, #4]
 800796e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007970:	7afb      	ldrb	r3, [r7, #11]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d17f      	bne.n	8007a76 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3314      	adds	r3, #20
 800797a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007982:	2b02      	cmp	r3, #2
 8007984:	d15c      	bne.n	8007a40 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	68da      	ldr	r2, [r3, #12]
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	429a      	cmp	r2, r3
 8007990:	d915      	bls.n	80079be <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	1ad2      	subs	r2, r2, r3
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	461a      	mov	r2, r3
 80079a8:	6879      	ldr	r1, [r7, #4]
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 fec1 	bl	8008732 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079b0:	2300      	movs	r3, #0
 80079b2:	2200      	movs	r2, #0
 80079b4:	2100      	movs	r1, #0
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f001 fc40 	bl	800923c <USBD_LL_PrepareReceive>
 80079bc:	e04e      	b.n	8007a5c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	6912      	ldr	r2, [r2, #16]
 80079c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80079ca:	fb01 f202 	mul.w	r2, r1, r2
 80079ce:	1a9b      	subs	r3, r3, r2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d11c      	bne.n	8007a0e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80079dc:	429a      	cmp	r2, r3
 80079de:	d316      	bcc.n	8007a0e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d20f      	bcs.n	8007a0e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80079ee:	2200      	movs	r2, #0
 80079f0:	2100      	movs	r1, #0
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 fe9d 	bl	8008732 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a00:	2300      	movs	r3, #0
 8007a02:	2200      	movs	r2, #0
 8007a04:	2100      	movs	r1, #0
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f001 fc18 	bl	800923c <USBD_LL_PrepareReceive>
 8007a0c:	e026      	b.n	8007a5c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d105      	bne.n	8007a30 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007a30:	2180      	movs	r1, #128	; 0x80
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f001 fb56 	bl	80090e4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 fecf 	bl	80087dc <USBD_CtlReceiveStatus>
 8007a3e:	e00d      	b.n	8007a5c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d004      	beq.n	8007a54 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d103      	bne.n	8007a5c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007a54:	2180      	movs	r1, #128	; 0x80
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f001 fb44 	bl	80090e4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d11d      	bne.n	8007aa2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f7ff fe81 	bl	800776e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007a74:	e015      	b.n	8007aa2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00d      	beq.n	8007a9e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d108      	bne.n	8007a9e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	7afa      	ldrb	r2, [r7, #11]
 8007a96:	4611      	mov	r1, r2
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	4798      	blx	r3
 8007a9c:	e001      	b.n	8007aa2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	e000      	b.n	8007aa4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ab4:	2340      	movs	r3, #64	; 0x40
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2100      	movs	r1, #0
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 facd 	bl	800905a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2240      	movs	r2, #64	; 0x40
 8007acc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ad0:	2340      	movs	r3, #64	; 0x40
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	2180      	movs	r1, #128	; 0x80
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 fabf 	bl	800905a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2240      	movs	r2, #64	; 0x40
 8007ae6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d009      	beq.n	8007b24 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6852      	ldr	r2, [r2, #4]
 8007b1c:	b2d2      	uxtb	r2, r2
 8007b1e:	4611      	mov	r1, r2
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	4798      	blx	r3
  }

  return USBD_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	460b      	mov	r3, r1
 8007b38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bc80      	pop	{r7}
 8007b4a:	4770      	bx	lr

08007b4c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2204      	movs	r2, #4
 8007b64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bc80      	pop	{r7}
 8007b72:	4770      	bx	lr

08007b74 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b82:	2b04      	cmp	r3, #4
 8007b84:	d105      	bne.n	8007b92 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bc80      	pop	{r7}
 8007b9c:	4770      	bx	lr

08007b9e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	d10b      	bne.n	8007bc8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d005      	beq.n	8007bc8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bea:	2b40      	cmp	r3, #64	; 0x40
 8007bec:	d005      	beq.n	8007bfa <USBD_StdDevReq+0x26>
 8007bee:	2b40      	cmp	r3, #64	; 0x40
 8007bf0:	d84f      	bhi.n	8007c92 <USBD_StdDevReq+0xbe>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <USBD_StdDevReq+0x36>
 8007bf6:	2b20      	cmp	r3, #32
 8007bf8:	d14b      	bne.n	8007c92 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	4798      	blx	r3
      break;
 8007c08:	e048      	b.n	8007c9c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	785b      	ldrb	r3, [r3, #1]
 8007c0e:	2b09      	cmp	r3, #9
 8007c10:	d839      	bhi.n	8007c86 <USBD_StdDevReq+0xb2>
 8007c12:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <USBD_StdDevReq+0x44>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c69 	.word	0x08007c69
 8007c1c:	08007c7d 	.word	0x08007c7d
 8007c20:	08007c87 	.word	0x08007c87
 8007c24:	08007c73 	.word	0x08007c73
 8007c28:	08007c87 	.word	0x08007c87
 8007c2c:	08007c4b 	.word	0x08007c4b
 8007c30:	08007c41 	.word	0x08007c41
 8007c34:	08007c87 	.word	0x08007c87
 8007c38:	08007c5f 	.word	0x08007c5f
 8007c3c:	08007c55 	.word	0x08007c55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f9dc 	bl	8008000 <USBD_GetDescriptor>
          break;
 8007c48:	e022      	b.n	8007c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fb3f 	bl	80082d0 <USBD_SetAddress>
          break;
 8007c52:	e01d      	b.n	8007c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fb7e 	bl	8008358 <USBD_SetConfig>
          break;
 8007c5c:	e018      	b.n	8007c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fc07 	bl	8008474 <USBD_GetConfig>
          break;
 8007c66:	e013      	b.n	8007c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fc37 	bl	80084de <USBD_GetStatus>
          break;
 8007c70:	e00e      	b.n	8007c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fc65 	bl	8008544 <USBD_SetFeature>
          break;
 8007c7a:	e009      	b.n	8007c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fc74 	bl	800856c <USBD_ClrFeature>
          break;
 8007c84:	e004      	b.n	8007c90 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fccc 	bl	8008626 <USBD_CtlError>
          break;
 8007c8e:	bf00      	nop
      }
      break;
 8007c90:	e004      	b.n	8007c9c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fcc6 	bl	8008626 <USBD_CtlError>
      break;
 8007c9a:	bf00      	nop
  }

  return ret;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop

08007ca8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cbe:	2b40      	cmp	r3, #64	; 0x40
 8007cc0:	d005      	beq.n	8007cce <USBD_StdItfReq+0x26>
 8007cc2:	2b40      	cmp	r3, #64	; 0x40
 8007cc4:	d82e      	bhi.n	8007d24 <USBD_StdItfReq+0x7c>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <USBD_StdItfReq+0x26>
 8007cca:	2b20      	cmp	r3, #32
 8007ccc:	d12a      	bne.n	8007d24 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d81d      	bhi.n	8007d16 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	889b      	ldrh	r3, [r3, #4]
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d813      	bhi.n	8007d0c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	4798      	blx	r3
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	88db      	ldrh	r3, [r3, #6]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d110      	bne.n	8007d20 <USBD_StdItfReq+0x78>
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10d      	bne.n	8007d20 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fd56 	bl	80087b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d0a:	e009      	b.n	8007d20 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fc89 	bl	8008626 <USBD_CtlError>
          break;
 8007d14:	e004      	b.n	8007d20 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fc84 	bl	8008626 <USBD_CtlError>
          break;
 8007d1e:	e000      	b.n	8007d22 <USBD_StdItfReq+0x7a>
          break;
 8007d20:	bf00      	nop
      }
      break;
 8007d22:	e004      	b.n	8007d2e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fc7d 	bl	8008626 <USBD_CtlError>
      break;
 8007d2c:	bf00      	nop
  }

  return USBD_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	889b      	ldrh	r3, [r3, #4]
 8007d4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d54:	2b40      	cmp	r3, #64	; 0x40
 8007d56:	d007      	beq.n	8007d68 <USBD_StdEPReq+0x30>
 8007d58:	2b40      	cmp	r3, #64	; 0x40
 8007d5a:	f200 8146 	bhi.w	8007fea <USBD_StdEPReq+0x2b2>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <USBD_StdEPReq+0x40>
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	f040 8141 	bne.w	8007fea <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	4798      	blx	r3
      break;
 8007d76:	e13d      	b.n	8007ff4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d80:	2b20      	cmp	r3, #32
 8007d82:	d10a      	bne.n	8007d9a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	4798      	blx	r3
 8007d92:	4603      	mov	r3, r0
 8007d94:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	e12d      	b.n	8007ff6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	785b      	ldrb	r3, [r3, #1]
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d007      	beq.n	8007db2 <USBD_StdEPReq+0x7a>
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	f300 811b 	bgt.w	8007fde <USBD_StdEPReq+0x2a6>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d072      	beq.n	8007e92 <USBD_StdEPReq+0x15a>
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d03a      	beq.n	8007e26 <USBD_StdEPReq+0xee>
 8007db0:	e115      	b.n	8007fde <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d002      	beq.n	8007dc2 <USBD_StdEPReq+0x8a>
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d015      	beq.n	8007dec <USBD_StdEPReq+0xb4>
 8007dc0:	e02b      	b.n	8007e1a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00c      	beq.n	8007de2 <USBD_StdEPReq+0xaa>
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	2b80      	cmp	r3, #128	; 0x80
 8007dcc:	d009      	beq.n	8007de2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 f986 	bl	80090e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007dd8:	2180      	movs	r1, #128	; 0x80
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f001 f982 	bl	80090e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007de0:	e020      	b.n	8007e24 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fc1e 	bl	8008626 <USBD_CtlError>
              break;
 8007dea:	e01b      	b.n	8007e24 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	885b      	ldrh	r3, [r3, #2]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10e      	bne.n	8007e12 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00b      	beq.n	8007e12 <USBD_StdEPReq+0xda>
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	2b80      	cmp	r3, #128	; 0x80
 8007dfe:	d008      	beq.n	8007e12 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	88db      	ldrh	r3, [r3, #6]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d104      	bne.n	8007e12 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 f969 	bl	80090e4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fccf 	bl	80087b6 <USBD_CtlSendStatus>

              break;
 8007e18:	e004      	b.n	8007e24 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fc02 	bl	8008626 <USBD_CtlError>
              break;
 8007e22:	bf00      	nop
          }
          break;
 8007e24:	e0e0      	b.n	8007fe8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d002      	beq.n	8007e36 <USBD_StdEPReq+0xfe>
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d015      	beq.n	8007e60 <USBD_StdEPReq+0x128>
 8007e34:	e026      	b.n	8007e84 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00c      	beq.n	8007e56 <USBD_StdEPReq+0x11e>
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	2b80      	cmp	r3, #128	; 0x80
 8007e40:	d009      	beq.n	8007e56 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e42:	7bbb      	ldrb	r3, [r7, #14]
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f001 f94c 	bl	80090e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e4c:	2180      	movs	r1, #128	; 0x80
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 f948 	bl	80090e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e54:	e01c      	b.n	8007e90 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fbe4 	bl	8008626 <USBD_CtlError>
              break;
 8007e5e:	e017      	b.n	8007e90 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	885b      	ldrh	r3, [r3, #2]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d112      	bne.n	8007e8e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d004      	beq.n	8007e7c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 f953 	bl	8009122 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fc9a 	bl	80087b6 <USBD_CtlSendStatus>
              }
              break;
 8007e82:	e004      	b.n	8007e8e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fbcd 	bl	8008626 <USBD_CtlError>
              break;
 8007e8c:	e000      	b.n	8007e90 <USBD_StdEPReq+0x158>
              break;
 8007e8e:	bf00      	nop
          }
          break;
 8007e90:	e0aa      	b.n	8007fe8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d002      	beq.n	8007ea2 <USBD_StdEPReq+0x16a>
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d032      	beq.n	8007f06 <USBD_StdEPReq+0x1ce>
 8007ea0:	e097      	b.n	8007fd2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d007      	beq.n	8007eb8 <USBD_StdEPReq+0x180>
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
 8007eaa:	2b80      	cmp	r3, #128	; 0x80
 8007eac:	d004      	beq.n	8007eb8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fbb8 	bl	8008626 <USBD_CtlError>
                break;
 8007eb6:	e091      	b.n	8007fdc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	da0b      	bge.n	8007ed8 <USBD_StdEPReq+0x1a0>
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	3310      	adds	r3, #16
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	e00b      	b.n	8007ef0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	4413      	add	r3, r2
 8007eee:	3304      	adds	r3, #4
 8007ef0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2202      	movs	r2, #2
 8007efc:	4619      	mov	r1, r3
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fbfb 	bl	80086fa <USBD_CtlSendData>
              break;
 8007f04:	e06a      	b.n	8007fdc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	da11      	bge.n	8007f32 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	f003 020f 	and.w	r2, r3, #15
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	440b      	add	r3, r1
 8007f20:	3318      	adds	r3, #24
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d117      	bne.n	8007f58 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fb7b 	bl	8008626 <USBD_CtlError>
                  break;
 8007f30:	e054      	b.n	8007fdc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f32:	7bbb      	ldrb	r3, [r7, #14]
 8007f34:	f003 020f 	and.w	r2, r3, #15
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	440b      	add	r3, r1
 8007f44:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d104      	bne.n	8007f58 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fb68 	bl	8008626 <USBD_CtlError>
                  break;
 8007f56:	e041      	b.n	8007fdc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	da0b      	bge.n	8007f78 <USBD_StdEPReq+0x240>
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	3310      	adds	r3, #16
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	4413      	add	r3, r2
 8007f74:	3304      	adds	r3, #4
 8007f76:	e00b      	b.n	8007f90 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f7e:	4613      	mov	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	3304      	adds	r3, #4
 8007f90:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f92:	7bbb      	ldrb	r3, [r7, #14]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <USBD_StdEPReq+0x266>
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	2b80      	cmp	r3, #128	; 0x80
 8007f9c:	d103      	bne.n	8007fa6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	e00e      	b.n	8007fc4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f001 f8d8 	bl	8009160 <USBD_LL_IsStallEP>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	e002      	b.n	8007fc4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fb95 	bl	80086fa <USBD_CtlSendData>
              break;
 8007fd0:	e004      	b.n	8007fdc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fb26 	bl	8008626 <USBD_CtlError>
              break;
 8007fda:	bf00      	nop
          }
          break;
 8007fdc:	e004      	b.n	8007fe8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fb20 	bl	8008626 <USBD_CtlError>
          break;
 8007fe6:	bf00      	nop
      }
      break;
 8007fe8:	e004      	b.n	8007ff4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fb1a 	bl	8008626 <USBD_CtlError>
      break;
 8007ff2:	bf00      	nop
  }

  return ret;
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	885b      	ldrh	r3, [r3, #2]
 800801a:	0a1b      	lsrs	r3, r3, #8
 800801c:	b29b      	uxth	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	2b06      	cmp	r3, #6
 8008022:	f200 8128 	bhi.w	8008276 <USBD_GetDescriptor+0x276>
 8008026:	a201      	add	r2, pc, #4	; (adr r2, 800802c <USBD_GetDescriptor+0x2c>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	08008049 	.word	0x08008049
 8008030:	08008061 	.word	0x08008061
 8008034:	080080a1 	.word	0x080080a1
 8008038:	08008277 	.word	0x08008277
 800803c:	08008277 	.word	0x08008277
 8008040:	08008217 	.word	0x08008217
 8008044:	08008243 	.word	0x08008243
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	7c12      	ldrb	r2, [r2, #16]
 8008054:	f107 0108 	add.w	r1, r7, #8
 8008058:	4610      	mov	r0, r2
 800805a:	4798      	blx	r3
 800805c:	60f8      	str	r0, [r7, #12]
      break;
 800805e:	e112      	b.n	8008286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	7c1b      	ldrb	r3, [r3, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10d      	bne.n	8008084 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008070:	f107 0208 	add.w	r2, r7, #8
 8008074:	4610      	mov	r0, r2
 8008076:	4798      	blx	r3
 8008078:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3301      	adds	r3, #1
 800807e:	2202      	movs	r2, #2
 8008080:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008082:	e100      	b.n	8008286 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808c:	f107 0208 	add.w	r2, r7, #8
 8008090:	4610      	mov	r0, r2
 8008092:	4798      	blx	r3
 8008094:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3301      	adds	r3, #1
 800809a:	2202      	movs	r2, #2
 800809c:	701a      	strb	r2, [r3, #0]
      break;
 800809e:	e0f2      	b.n	8008286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	885b      	ldrh	r3, [r3, #2]
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b05      	cmp	r3, #5
 80080a8:	f200 80ac 	bhi.w	8008204 <USBD_GetDescriptor+0x204>
 80080ac:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <USBD_GetDescriptor+0xb4>)
 80080ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b2:	bf00      	nop
 80080b4:	080080cd 	.word	0x080080cd
 80080b8:	08008101 	.word	0x08008101
 80080bc:	08008135 	.word	0x08008135
 80080c0:	08008169 	.word	0x08008169
 80080c4:	0800819d 	.word	0x0800819d
 80080c8:	080081d1 	.word	0x080081d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00b      	beq.n	80080f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	7c12      	ldrb	r2, [r2, #16]
 80080e4:	f107 0108 	add.w	r1, r7, #8
 80080e8:	4610      	mov	r0, r2
 80080ea:	4798      	blx	r3
 80080ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ee:	e091      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fa97 	bl	8008626 <USBD_CtlError>
            err++;
 80080f8:	7afb      	ldrb	r3, [r7, #11]
 80080fa:	3301      	adds	r3, #1
 80080fc:	72fb      	strb	r3, [r7, #11]
          break;
 80080fe:	e089      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00b      	beq.n	8008124 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	7c12      	ldrb	r2, [r2, #16]
 8008118:	f107 0108 	add.w	r1, r7, #8
 800811c:	4610      	mov	r0, r2
 800811e:	4798      	blx	r3
 8008120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008122:	e077      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fa7d 	bl	8008626 <USBD_CtlError>
            err++;
 800812c:	7afb      	ldrb	r3, [r7, #11]
 800812e:	3301      	adds	r3, #1
 8008130:	72fb      	strb	r3, [r7, #11]
          break;
 8008132:	e06f      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00b      	beq.n	8008158 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	7c12      	ldrb	r2, [r2, #16]
 800814c:	f107 0108 	add.w	r1, r7, #8
 8008150:	4610      	mov	r0, r2
 8008152:	4798      	blx	r3
 8008154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008156:	e05d      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fa63 	bl	8008626 <USBD_CtlError>
            err++;
 8008160:	7afb      	ldrb	r3, [r7, #11]
 8008162:	3301      	adds	r3, #1
 8008164:	72fb      	strb	r3, [r7, #11]
          break;
 8008166:	e055      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00b      	beq.n	800818c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	7c12      	ldrb	r2, [r2, #16]
 8008180:	f107 0108 	add.w	r1, r7, #8
 8008184:	4610      	mov	r0, r2
 8008186:	4798      	blx	r3
 8008188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800818a:	e043      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fa49 	bl	8008626 <USBD_CtlError>
            err++;
 8008194:	7afb      	ldrb	r3, [r7, #11]
 8008196:	3301      	adds	r3, #1
 8008198:	72fb      	strb	r3, [r7, #11]
          break;
 800819a:	e03b      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00b      	beq.n	80081c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	7c12      	ldrb	r2, [r2, #16]
 80081b4:	f107 0108 	add.w	r1, r7, #8
 80081b8:	4610      	mov	r0, r2
 80081ba:	4798      	blx	r3
 80081bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081be:	e029      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fa2f 	bl	8008626 <USBD_CtlError>
            err++;
 80081c8:	7afb      	ldrb	r3, [r7, #11]
 80081ca:	3301      	adds	r3, #1
 80081cc:	72fb      	strb	r3, [r7, #11]
          break;
 80081ce:	e021      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00b      	beq.n	80081f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	7c12      	ldrb	r2, [r2, #16]
 80081e8:	f107 0108 	add.w	r1, r7, #8
 80081ec:	4610      	mov	r0, r2
 80081ee:	4798      	blx	r3
 80081f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081f2:	e00f      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fa15 	bl	8008626 <USBD_CtlError>
            err++;
 80081fc:	7afb      	ldrb	r3, [r7, #11]
 80081fe:	3301      	adds	r3, #1
 8008200:	72fb      	strb	r3, [r7, #11]
          break;
 8008202:	e007      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa0d 	bl	8008626 <USBD_CtlError>
          err++;
 800820c:	7afb      	ldrb	r3, [r7, #11]
 800820e:	3301      	adds	r3, #1
 8008210:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008212:	e038      	b.n	8008286 <USBD_GetDescriptor+0x286>
 8008214:	e037      	b.n	8008286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	7c1b      	ldrb	r3, [r3, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d109      	bne.n	8008232 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008226:	f107 0208 	add.w	r2, r7, #8
 800822a:	4610      	mov	r0, r2
 800822c:	4798      	blx	r3
 800822e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008230:	e029      	b.n	8008286 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f9f6 	bl	8008626 <USBD_CtlError>
        err++;
 800823a:	7afb      	ldrb	r3, [r7, #11]
 800823c:	3301      	adds	r3, #1
 800823e:	72fb      	strb	r3, [r7, #11]
      break;
 8008240:	e021      	b.n	8008286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	7c1b      	ldrb	r3, [r3, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10d      	bne.n	8008266 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	f107 0208 	add.w	r2, r7, #8
 8008256:	4610      	mov	r0, r2
 8008258:	4798      	blx	r3
 800825a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	3301      	adds	r3, #1
 8008260:	2207      	movs	r2, #7
 8008262:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008264:	e00f      	b.n	8008286 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f9dc 	bl	8008626 <USBD_CtlError>
        err++;
 800826e:	7afb      	ldrb	r3, [r7, #11]
 8008270:	3301      	adds	r3, #1
 8008272:	72fb      	strb	r3, [r7, #11]
      break;
 8008274:	e007      	b.n	8008286 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f9d4 	bl	8008626 <USBD_CtlError>
      err++;
 800827e:	7afb      	ldrb	r3, [r7, #11]
 8008280:	3301      	adds	r3, #1
 8008282:	72fb      	strb	r3, [r7, #11]
      break;
 8008284:	bf00      	nop
  }

  if (err != 0U)
 8008286:	7afb      	ldrb	r3, [r7, #11]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d11c      	bne.n	80082c6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800828c:	893b      	ldrh	r3, [r7, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d011      	beq.n	80082b6 <USBD_GetDescriptor+0x2b6>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	88db      	ldrh	r3, [r3, #6]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00d      	beq.n	80082b6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	88da      	ldrh	r2, [r3, #6]
 800829e:	893b      	ldrh	r3, [r7, #8]
 80082a0:	4293      	cmp	r3, r2
 80082a2:	bf28      	it	cs
 80082a4:	4613      	movcs	r3, r2
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082aa:	893b      	ldrh	r3, [r7, #8]
 80082ac:	461a      	mov	r2, r3
 80082ae:	68f9      	ldr	r1, [r7, #12]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fa22 	bl	80086fa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	88db      	ldrh	r3, [r3, #6]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d104      	bne.n	80082c8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fa79 	bl	80087b6 <USBD_CtlSendStatus>
 80082c4:	e000      	b.n	80082c8 <USBD_GetDescriptor+0x2c8>
    return;
 80082c6:	bf00      	nop
    }
  }
}
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop

080082d0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	889b      	ldrh	r3, [r3, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d130      	bne.n	8008344 <USBD_SetAddress+0x74>
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	88db      	ldrh	r3, [r3, #6]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d12c      	bne.n	8008344 <USBD_SetAddress+0x74>
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	885b      	ldrh	r3, [r3, #2]
 80082ee:	2b7f      	cmp	r3, #127	; 0x7f
 80082f0:	d828      	bhi.n	8008344 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	885b      	ldrh	r3, [r3, #2]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008304:	2b03      	cmp	r3, #3
 8008306:	d104      	bne.n	8008312 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f98b 	bl	8008626 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008310:	e01d      	b.n	800834e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	7bfa      	ldrb	r2, [r7, #15]
 8008316:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 ff4a 	bl	80091b8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fa46 	bl	80087b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d004      	beq.n	800833a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008338:	e009      	b.n	800834e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008342:	e004      	b.n	800834e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f96d 	bl	8008626 <USBD_CtlError>
  }
}
 800834c:	bf00      	nop
 800834e:	bf00      	nop
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	885b      	ldrh	r3, [r3, #2]
 8008366:	b2da      	uxtb	r2, r3
 8008368:	4b41      	ldr	r3, [pc, #260]	; (8008470 <USBD_SetConfig+0x118>)
 800836a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800836c:	4b40      	ldr	r3, [pc, #256]	; (8008470 <USBD_SetConfig+0x118>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d904      	bls.n	800837e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f955 	bl	8008626 <USBD_CtlError>
 800837c:	e075      	b.n	800846a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008384:	2b02      	cmp	r3, #2
 8008386:	d002      	beq.n	800838e <USBD_SetConfig+0x36>
 8008388:	2b03      	cmp	r3, #3
 800838a:	d023      	beq.n	80083d4 <USBD_SetConfig+0x7c>
 800838c:	e062      	b.n	8008454 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800838e:	4b38      	ldr	r3, [pc, #224]	; (8008470 <USBD_SetConfig+0x118>)
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d01a      	beq.n	80083cc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008396:	4b36      	ldr	r3, [pc, #216]	; (8008470 <USBD_SetConfig+0x118>)
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2203      	movs	r2, #3
 80083a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80083a8:	4b31      	ldr	r3, [pc, #196]	; (8008470 <USBD_SetConfig+0x118>)
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7ff f9e7 	bl	8007782 <USBD_SetClassConfig>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d104      	bne.n	80083c4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f932 	bl	8008626 <USBD_CtlError>
            return;
 80083c2:	e052      	b.n	800846a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f9f6 	bl	80087b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80083ca:	e04e      	b.n	800846a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f9f2 	bl	80087b6 <USBD_CtlSendStatus>
        break;
 80083d2:	e04a      	b.n	800846a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80083d4:	4b26      	ldr	r3, [pc, #152]	; (8008470 <USBD_SetConfig+0x118>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d112      	bne.n	8008402 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2202      	movs	r2, #2
 80083e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80083e4:	4b22      	ldr	r3, [pc, #136]	; (8008470 <USBD_SetConfig+0x118>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80083ee:	4b20      	ldr	r3, [pc, #128]	; (8008470 <USBD_SetConfig+0x118>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7ff f9e3 	bl	80077c0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f9db 	bl	80087b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008400:	e033      	b.n	800846a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008402:	4b1b      	ldr	r3, [pc, #108]	; (8008470 <USBD_SetConfig+0x118>)
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	429a      	cmp	r2, r3
 800840e:	d01d      	beq.n	800844c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	b2db      	uxtb	r3, r3
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff f9d1 	bl	80077c0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800841e:	4b14      	ldr	r3, [pc, #80]	; (8008470 <USBD_SetConfig+0x118>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008428:	4b11      	ldr	r3, [pc, #68]	; (8008470 <USBD_SetConfig+0x118>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f7ff f9a7 	bl	8007782 <USBD_SetClassConfig>
 8008434:	4603      	mov	r3, r0
 8008436:	2b02      	cmp	r3, #2
 8008438:	d104      	bne.n	8008444 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f8f2 	bl	8008626 <USBD_CtlError>
            return;
 8008442:	e012      	b.n	800846a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f9b6 	bl	80087b6 <USBD_CtlSendStatus>
        break;
 800844a:	e00e      	b.n	800846a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f9b2 	bl	80087b6 <USBD_CtlSendStatus>
        break;
 8008452:	e00a      	b.n	800846a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f8e5 	bl	8008626 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800845c:	4b04      	ldr	r3, [pc, #16]	; (8008470 <USBD_SetConfig+0x118>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7ff f9ac 	bl	80077c0 <USBD_ClrClassConfig>
        break;
 8008468:	bf00      	nop
    }
  }
}
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	2000039c 	.word	0x2000039c

08008474 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	88db      	ldrh	r3, [r3, #6]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d004      	beq.n	8008490 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f8cc 	bl	8008626 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800848e:	e022      	b.n	80084d6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008496:	2b02      	cmp	r3, #2
 8008498:	dc02      	bgt.n	80084a0 <USBD_GetConfig+0x2c>
 800849a:	2b00      	cmp	r3, #0
 800849c:	dc03      	bgt.n	80084a6 <USBD_GetConfig+0x32>
 800849e:	e015      	b.n	80084cc <USBD_GetConfig+0x58>
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d00b      	beq.n	80084bc <USBD_GetConfig+0x48>
 80084a4:	e012      	b.n	80084cc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	3308      	adds	r3, #8
 80084b0:	2201      	movs	r2, #1
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f920 	bl	80086fa <USBD_CtlSendData>
        break;
 80084ba:	e00c      	b.n	80084d6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3304      	adds	r3, #4
 80084c0:	2201      	movs	r2, #1
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f918 	bl	80086fa <USBD_CtlSendData>
        break;
 80084ca:	e004      	b.n	80084d6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f8a9 	bl	8008626 <USBD_CtlError>
        break;
 80084d4:	bf00      	nop
}
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ee:	3b01      	subs	r3, #1
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d81e      	bhi.n	8008532 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	88db      	ldrh	r3, [r3, #6]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d004      	beq.n	8008506 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f891 	bl	8008626 <USBD_CtlError>
        break;
 8008504:	e01a      	b.n	800853c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008512:	2b00      	cmp	r3, #0
 8008514:	d005      	beq.n	8008522 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f043 0202 	orr.w	r2, r3, #2
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	330c      	adds	r3, #12
 8008526:	2202      	movs	r2, #2
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f8e5 	bl	80086fa <USBD_CtlSendData>
      break;
 8008530:	e004      	b.n	800853c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f876 	bl	8008626 <USBD_CtlError>
      break;
 800853a:	bf00      	nop
  }
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	885b      	ldrh	r3, [r3, #2]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d106      	bne.n	8008564 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f929 	bl	80087b6 <USBD_CtlSendStatus>
  }
}
 8008564:	bf00      	nop
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857c:	3b01      	subs	r3, #1
 800857e:	2b02      	cmp	r3, #2
 8008580:	d80b      	bhi.n	800859a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	885b      	ldrh	r3, [r3, #2]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d10c      	bne.n	80085a4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f90f 	bl	80087b6 <USBD_CtlSendStatus>
      }
      break;
 8008598:	e004      	b.n	80085a4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f842 	bl	8008626 <USBD_CtlError>
      break;
 80085a2:	e000      	b.n	80085a6 <USBD_ClrFeature+0x3a>
      break;
 80085a4:	bf00      	nop
  }
}
 80085a6:	bf00      	nop
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
 80085b6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	781a      	ldrb	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	785a      	ldrb	r2, [r3, #1]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	3302      	adds	r3, #2
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	3303      	adds	r3, #3
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	021b      	lsls	r3, r3, #8
 80085da:	b29b      	uxth	r3, r3
 80085dc:	4413      	add	r3, r2
 80085de:	b29a      	uxth	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	3304      	adds	r3, #4
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	3305      	adds	r3, #5
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	021b      	lsls	r3, r3, #8
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	4413      	add	r3, r2
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	3306      	adds	r3, #6
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	b29a      	uxth	r2, r3
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	3307      	adds	r3, #7
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	b29b      	uxth	r3, r3
 8008610:	021b      	lsls	r3, r3, #8
 8008612:	b29b      	uxth	r3, r3
 8008614:	4413      	add	r3, r2
 8008616:	b29a      	uxth	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	80da      	strh	r2, [r3, #6]

}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	bc80      	pop	{r7}
 8008624:	4770      	bx	lr

08008626 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b082      	sub	sp, #8
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008630:	2180      	movs	r1, #128	; 0x80
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fd56 	bl	80090e4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008638:	2100      	movs	r1, #0
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fd52 	bl	80090e4 <USBD_LL_StallEP>
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d032      	beq.n	80086c4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 f834 	bl	80086cc <USBD_GetLen>
 8008664:	4603      	mov	r3, r0
 8008666:	3301      	adds	r3, #1
 8008668:	b29b      	uxth	r3, r3
 800866a:	005b      	lsls	r3, r3, #1
 800866c:	b29a      	uxth	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	75fa      	strb	r2, [r7, #23]
 8008678:	461a      	mov	r2, r3
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	4413      	add	r3, r2
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	7812      	ldrb	r2, [r2, #0]
 8008682:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	75fa      	strb	r2, [r7, #23]
 800868a:	461a      	mov	r2, r3
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	4413      	add	r3, r2
 8008690:	2203      	movs	r2, #3
 8008692:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008694:	e012      	b.n	80086bc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	1c5a      	adds	r2, r3, #1
 800869a:	60fa      	str	r2, [r7, #12]
 800869c:	7dfa      	ldrb	r2, [r7, #23]
 800869e:	1c51      	adds	r1, r2, #1
 80086a0:	75f9      	strb	r1, [r7, #23]
 80086a2:	4611      	mov	r1, r2
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	440a      	add	r2, r1
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	75fa      	strb	r2, [r7, #23]
 80086b2:	461a      	mov	r2, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	4413      	add	r3, r2
 80086b8:	2200      	movs	r2, #0
 80086ba:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e8      	bne.n	8008696 <USBD_GetString+0x4e>
    }
  }
}
 80086c4:	bf00      	nop
 80086c6:	3718      	adds	r7, #24
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80086d8:	e005      	b.n	80086e6 <USBD_GetLen+0x1a>
  {
    len++;
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	3301      	adds	r3, #1
 80086de:	73fb      	strb	r3, [r7, #15]
    buf++;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	3301      	adds	r3, #1
 80086e4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1f5      	bne.n	80086da <USBD_GetLen+0xe>
  }

  return len;
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr

080086fa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	60f8      	str	r0, [r7, #12]
 8008702:	60b9      	str	r1, [r7, #8]
 8008704:	4613      	mov	r3, r2
 8008706:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2202      	movs	r2, #2
 800870c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008710:	88fa      	ldrh	r2, [r7, #6]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008716:	88fa      	ldrh	r2, [r7, #6]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800871c:	88fb      	ldrh	r3, [r7, #6]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	2100      	movs	r1, #0
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 fd67 	bl	80091f6 <USBD_LL_Transmit>

  return USBD_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b084      	sub	sp, #16
 8008736:	af00      	add	r7, sp, #0
 8008738:	60f8      	str	r0, [r7, #12]
 800873a:	60b9      	str	r1, [r7, #8]
 800873c:	4613      	mov	r3, r2
 800873e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008740:	88fb      	ldrh	r3, [r7, #6]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	2100      	movs	r1, #0
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 fd55 	bl	80091f6 <USBD_LL_Transmit>

  return USBD_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	60f8      	str	r0, [r7, #12]
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	4613      	mov	r3, r2
 8008762:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2203      	movs	r2, #3
 8008768:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800876c:	88fa      	ldrh	r2, [r7, #6]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008774:	88fa      	ldrh	r2, [r7, #6]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800877c:	88fb      	ldrh	r3, [r7, #6]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	2100      	movs	r1, #0
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f000 fd5a 	bl	800923c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b084      	sub	sp, #16
 8008796:	af00      	add	r7, sp, #0
 8008798:	60f8      	str	r0, [r7, #12]
 800879a:	60b9      	str	r1, [r7, #8]
 800879c:	4613      	mov	r3, r2
 800879e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087a0:	88fb      	ldrh	r3, [r7, #6]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	2100      	movs	r1, #0
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f000 fd48 	bl	800923c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b082      	sub	sp, #8
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2204      	movs	r2, #4
 80087c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087c6:	2300      	movs	r3, #0
 80087c8:	2200      	movs	r2, #0
 80087ca:	2100      	movs	r1, #0
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fd12 	bl	80091f6 <USBD_LL_Transmit>

  return USBD_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2205      	movs	r2, #5
 80087e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087ec:	2300      	movs	r3, #0
 80087ee:	2200      	movs	r2, #0
 80087f0:	2100      	movs	r1, #0
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fd22 	bl	800923c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008808:	2200      	movs	r2, #0
 800880a:	4912      	ldr	r1, [pc, #72]	; (8008854 <MX_USB_DEVICE_Init+0x50>)
 800880c:	4812      	ldr	r0, [pc, #72]	; (8008858 <MX_USB_DEVICE_Init+0x54>)
 800880e:	f7fe ff5e 	bl	80076ce <USBD_Init>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008818:	f7f7 fd63 	bl	80002e2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800881c:	490f      	ldr	r1, [pc, #60]	; (800885c <MX_USB_DEVICE_Init+0x58>)
 800881e:	480e      	ldr	r0, [pc, #56]	; (8008858 <MX_USB_DEVICE_Init+0x54>)
 8008820:	f7fe ff80 	bl	8007724 <USBD_RegisterClass>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800882a:	f7f7 fd5a 	bl	80002e2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800882e:	490c      	ldr	r1, [pc, #48]	; (8008860 <MX_USB_DEVICE_Init+0x5c>)
 8008830:	4809      	ldr	r0, [pc, #36]	; (8008858 <MX_USB_DEVICE_Init+0x54>)
 8008832:	f7fe feb1 	bl	8007598 <USBD_CDC_RegisterInterface>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800883c:	f7f7 fd51 	bl	80002e2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008840:	4805      	ldr	r0, [pc, #20]	; (8008858 <MX_USB_DEVICE_Init+0x54>)
 8008842:	f7fe ff88 	bl	8007756 <USBD_Start>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800884c:	f7f7 fd49 	bl	80002e2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008850:	bf00      	nop
 8008852:	bd80      	pop	{r7, pc}
 8008854:	20000140 	.word	0x20000140
 8008858:	200003a0 	.word	0x200003a0
 800885c:	20000020 	.word	0x20000020
 8008860:	20000130 	.word	0x20000130

08008864 <cdcAvailable>:
uint32_t rx_len = 512;
uint8_t rx_buf[512];


uint32_t cdcAvailable(void)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 800886a:	4b09      	ldr	r3, [pc, #36]	; (8008890 <cdcAvailable+0x2c>)
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	4b09      	ldr	r3, [pc, #36]	; (8008894 <cdcAvailable+0x30>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	4a08      	ldr	r2, [pc, #32]	; (8008898 <cdcAvailable+0x34>)
 8008876:	6812      	ldr	r2, [r2, #0]
 8008878:	fbb3 f1f2 	udiv	r1, r3, r2
 800887c:	fb01 f202 	mul.w	r2, r1, r2
 8008880:	1a9b      	subs	r3, r3, r2
 8008882:	607b      	str	r3, [r7, #4]

  return ret;
 8008884:	687b      	ldr	r3, [r7, #4]
}
 8008886:	4618      	mov	r0, r3
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	bc80      	pop	{r7}
 800888e:	4770      	bx	lr
 8008890:	20000664 	.word	0x20000664
 8008894:	20000668 	.word	0x20000668
 8008898:	2000012c 	.word	0x2000012c

0800889c <cdcRead>:

uint8_t cdcRead(void)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 80088a2:	4b0e      	ldr	r3, [pc, #56]	; (80088dc <cdcRead+0x40>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a0e      	ldr	r2, [pc, #56]	; (80088e0 <cdcRead+0x44>)
 80088a8:	5cd3      	ldrb	r3, [r2, r3]
 80088aa:	71fb      	strb	r3, [r7, #7]

  if (rx_out != rx_in)
 80088ac:	4b0b      	ldr	r3, [pc, #44]	; (80088dc <cdcRead+0x40>)
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	4b0c      	ldr	r3, [pc, #48]	; (80088e4 <cdcRead+0x48>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d00b      	beq.n	80088d0 <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 80088b8:	4b08      	ldr	r3, [pc, #32]	; (80088dc <cdcRead+0x40>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3301      	adds	r3, #1
 80088be:	4a0a      	ldr	r2, [pc, #40]	; (80088e8 <cdcRead+0x4c>)
 80088c0:	6812      	ldr	r2, [r2, #0]
 80088c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80088c6:	fb01 f202 	mul.w	r2, r1, r2
 80088ca:	1a9b      	subs	r3, r3, r2
 80088cc:	4a03      	ldr	r2, [pc, #12]	; (80088dc <cdcRead+0x40>)
 80088ce:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80088d0:	79fb      	ldrb	r3, [r7, #7]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bc80      	pop	{r7}
 80088da:	4770      	bx	lr
 80088dc:	20000668 	.word	0x20000668
 80088e0:	2000066c 	.word	0x2000066c
 80088e4:	20000664 	.word	0x20000664
 80088e8:	2000012c 	.word	0x2000012c

080088ec <cdcDataIn>:


void cdcDataIn(uint8_t rx_data)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	4603      	mov	r3, r0
 80088f4:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 80088f6:	4b0e      	ldr	r3, [pc, #56]	; (8008930 <cdcDataIn+0x44>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	490e      	ldr	r1, [pc, #56]	; (8008934 <cdcDataIn+0x48>)
 80088fc:	79fa      	ldrb	r2, [r7, #7]
 80088fe:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 8008900:	4b0b      	ldr	r3, [pc, #44]	; (8008930 <cdcDataIn+0x44>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3301      	adds	r3, #1
 8008906:	4a0c      	ldr	r2, [pc, #48]	; (8008938 <cdcDataIn+0x4c>)
 8008908:	6812      	ldr	r2, [r2, #0]
 800890a:	fbb3 f1f2 	udiv	r1, r3, r2
 800890e:	fb01 f202 	mul.w	r2, r1, r2
 8008912:	1a9b      	subs	r3, r3, r2
 8008914:	60fb      	str	r3, [r7, #12]

  if (next_rx_in != rx_out)
 8008916:	4b09      	ldr	r3, [pc, #36]	; (800893c <cdcDataIn+0x50>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	429a      	cmp	r2, r3
 800891e:	d002      	beq.n	8008926 <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 8008920:	4a03      	ldr	r2, [pc, #12]	; (8008930 <cdcDataIn+0x44>)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6013      	str	r3, [r2, #0]
  }
}
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	bc80      	pop	{r7}
 800892e:	4770      	bx	lr
 8008930:	20000664 	.word	0x20000664
 8008934:	2000066c 	.word	0x2000066c
 8008938:	2000012c 	.word	0x2000012c
 800893c:	20000668 	.word	0x20000668

08008940 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = miliis();
 800894a:	f7f7 fc64 	bl	8000216 <miliis>
 800894e:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	b29b      	uxth	r3, r3
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f914 	bl	8008b84 <CDC_Transmit_FS>
 800895c:	4603      	mov	r3, r0
 800895e:	72fb      	strb	r3, [r7, #11]
    if(ret == USBD_OK)
 8008960:	7afb      	ldrb	r3, [r7, #11]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <cdcWrite+0x2a>
    {
      return length;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	e00e      	b.n	8008988 <cdcWrite+0x48>
    }
    else if (ret == USBD_FAIL)
 800896a:	7afb      	ldrb	r3, [r7, #11]
 800896c:	2b02      	cmp	r3, #2
 800896e:	d101      	bne.n	8008974 <cdcWrite+0x34>
    {
      return 0;
 8008970:	2300      	movs	r3, #0
 8008972:	e009      	b.n	8008988 <cdcWrite+0x48>
    }

    if (miliis() - pre_time >= 100)
 8008974:	f7f7 fc4f 	bl	8000216 <miliis>
 8008978:	4602      	mov	r2, r0
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b63      	cmp	r3, #99	; 0x63
 8008980:	d800      	bhi.n	8008984 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 8008982:	e7e5      	b.n	8008950 <cdcWrite+0x10>
    {
      break;
 8008984:	bf00      	nop
    }
  }
  return 0;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008994:	2200      	movs	r2, #0
 8008996:	4905      	ldr	r1, [pc, #20]	; (80089ac <CDC_Init_FS+0x1c>)
 8008998:	4805      	ldr	r0, [pc, #20]	; (80089b0 <CDC_Init_FS+0x20>)
 800899a:	f7fe fe13 	bl	80075c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800899e:	4905      	ldr	r1, [pc, #20]	; (80089b4 <CDC_Init_FS+0x24>)
 80089a0:	4803      	ldr	r0, [pc, #12]	; (80089b0 <CDC_Init_FS+0x20>)
 80089a2:	f7fe fe28 	bl	80075f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80089a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	20000a6c 	.word	0x20000a6c
 80089b0:	200003a0 	.word	0x200003a0
 80089b4:	2000086c 	.word	0x2000086c

080089b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80089b8:	b480      	push	{r7}
 80089ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80089bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80089be:	4618      	mov	r0, r3
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bc80      	pop	{r7}
 80089c4:	4770      	bx	lr
	...

080089c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	4603      	mov	r3, r0
 80089d0:	6039      	str	r1, [r7, #0]
 80089d2:	71fb      	strb	r3, [r7, #7]
 80089d4:	4613      	mov	r3, r2
 80089d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80089d8:	79fb      	ldrb	r3, [r7, #7]
 80089da:	2b23      	cmp	r3, #35	; 0x23
 80089dc:	f200 80a3 	bhi.w	8008b26 <CDC_Control_FS+0x15e>
 80089e0:	a201      	add	r2, pc, #4	; (adr r2, 80089e8 <CDC_Control_FS+0x20>)
 80089e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e6:	bf00      	nop
 80089e8:	08008b27 	.word	0x08008b27
 80089ec:	08008b27 	.word	0x08008b27
 80089f0:	08008a79 	.word	0x08008a79
 80089f4:	08008ad3 	.word	0x08008ad3
 80089f8:	08008b27 	.word	0x08008b27
 80089fc:	08008b27 	.word	0x08008b27
 8008a00:	08008b27 	.word	0x08008b27
 8008a04:	08008b27 	.word	0x08008b27
 8008a08:	08008b27 	.word	0x08008b27
 8008a0c:	08008b27 	.word	0x08008b27
 8008a10:	08008b27 	.word	0x08008b27
 8008a14:	08008b27 	.word	0x08008b27
 8008a18:	08008b27 	.word	0x08008b27
 8008a1c:	08008b27 	.word	0x08008b27
 8008a20:	08008b27 	.word	0x08008b27
 8008a24:	08008b27 	.word	0x08008b27
 8008a28:	08008b27 	.word	0x08008b27
 8008a2c:	08008b27 	.word	0x08008b27
 8008a30:	08008b27 	.word	0x08008b27
 8008a34:	08008b27 	.word	0x08008b27
 8008a38:	08008b27 	.word	0x08008b27
 8008a3c:	08008b27 	.word	0x08008b27
 8008a40:	08008b27 	.word	0x08008b27
 8008a44:	08008b27 	.word	0x08008b27
 8008a48:	08008b27 	.word	0x08008b27
 8008a4c:	08008b27 	.word	0x08008b27
 8008a50:	08008b27 	.word	0x08008b27
 8008a54:	08008b27 	.word	0x08008b27
 8008a58:	08008b27 	.word	0x08008b27
 8008a5c:	08008b27 	.word	0x08008b27
 8008a60:	08008b27 	.word	0x08008b27
 8008a64:	08008b27 	.word	0x08008b27
 8008a68:	08008b27 	.word	0x08008b27
 8008a6c:	08008b27 	.word	0x08008b27
 8008a70:	08008b27 	.word	0x08008b27
 8008a74:	08008b27 	.word	0x08008b27
    case CDC_GET_ENCAPSULATED_RESPONSE:

    break;

    case CDC_SET_COMM_FEATURE:
      LineCoding.bitrate = (uint32_t)(pbuf[0]);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	4b2d      	ldr	r3, [pc, #180]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008a80:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 8008a82:	4b2c      	ldr	r3, [pc, #176]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	3201      	adds	r2, #1
 8008a8a:	7812      	ldrb	r2, [r2, #0]
 8008a8c:	0212      	lsls	r2, r2, #8
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	4a28      	ldr	r2, [pc, #160]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008a92:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 8008a94:	4b27      	ldr	r3, [pc, #156]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	3202      	adds	r2, #2
 8008a9c:	7812      	ldrb	r2, [r2, #0]
 8008a9e:	0412      	lsls	r2, r2, #16
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	4a24      	ldr	r2, [pc, #144]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008aa4:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 8008aa6:	4b23      	ldr	r3, [pc, #140]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	3203      	adds	r2, #3
 8008aae:	7812      	ldrb	r2, [r2, #0]
 8008ab0:	0612      	lsls	r2, r2, #24
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	4a1f      	ldr	r2, [pc, #124]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008ab6:	6013      	str	r3, [r2, #0]
      LineCoding.format = pbuf[4];
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	791a      	ldrb	r2, [r3, #4]
 8008abc:	4b1d      	ldr	r3, [pc, #116]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008abe:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	795a      	ldrb	r2, [r3, #5]
 8008ac4:	4b1b      	ldr	r3, [pc, #108]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008ac6:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype = pbuf[6];
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	799a      	ldrb	r2, [r3, #6]
 8008acc:	4b19      	ldr	r3, [pc, #100]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008ace:	719a      	strb	r2, [r3, #6]
    break;
 8008ad0:	e02a      	b.n	8008b28 <CDC_Control_FS+0x160>

    case CDC_GET_COMM_FEATURE:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008ad2:	4b18      	ldr	r3, [pc, #96]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8008adc:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	0a1a      	lsrs	r2, r3, #8
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	b2d2      	uxtb	r2, r2
 8008ae8:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8008aea:	4b12      	ldr	r3, [pc, #72]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	0c1a      	lsrs	r2, r3, #16
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	3302      	adds	r3, #2
 8008af4:	b2d2      	uxtb	r2, r2
 8008af6:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8008af8:	4b0e      	ldr	r3, [pc, #56]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	0e1a      	lsrs	r2, r3, #24
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	3303      	adds	r3, #3
 8008b02:	b2d2      	uxtb	r2, r2
 8008b04:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	3304      	adds	r3, #4
 8008b0a:	4a0a      	ldr	r2, [pc, #40]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008b0c:	7912      	ldrb	r2, [r2, #4]
 8008b0e:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	3305      	adds	r3, #5
 8008b14:	4a07      	ldr	r2, [pc, #28]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008b16:	7952      	ldrb	r2, [r2, #5]
 8008b18:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	3306      	adds	r3, #6
 8008b1e:	4a05      	ldr	r2, [pc, #20]	; (8008b34 <CDC_Control_FS+0x16c>)
 8008b20:	7992      	ldrb	r2, [r2, #6]
 8008b22:	701a      	strb	r2, [r3, #0]
    break;
 8008b24:	e000      	b.n	8008b28 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b26:	bf00      	nop
  }

  return (USBD_OK);
 8008b28:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bc80      	pop	{r7}
 8008b32:	4770      	bx	lr
 8008b34:	20000124 	.word	0x20000124

08008b38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b42:	6879      	ldr	r1, [r7, #4]
 8008b44:	480e      	ldr	r0, [pc, #56]	; (8008b80 <CDC_Receive_FS+0x48>)
 8008b46:	f7fe fd56 	bl	80075f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b4a:	480d      	ldr	r0, [pc, #52]	; (8008b80 <CDC_Receive_FS+0x48>)
 8008b4c:	f7fe fd95 	bl	800767a <USBD_CDC_ReceivePacket>

  for ( int i = 0; i < *Len; i++)
 8008b50:	2300      	movs	r3, #0
 8008b52:	60fb      	str	r3, [r7, #12]
 8008b54:	e009      	b.n	8008b6a <CDC_Receive_FS+0x32>
  {
    cdcDataIn(Buf[i]);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7ff fec4 	bl	80088ec <cdcDataIn>
  for ( int i = 0; i < *Len; i++)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3301      	adds	r3, #1
 8008b68:	60fb      	str	r3, [r7, #12]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d8f0      	bhi.n	8008b56 <CDC_Receive_FS+0x1e>
  }
  return (USBD_OK);
 8008b74:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	200003a0 	.word	0x200003a0

08008b84 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008b94:	4b0d      	ldr	r3, [pc, #52]	; (8008bcc <CDC_Transmit_FS+0x48>)
 8008b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e00b      	b.n	8008bc2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008baa:	887b      	ldrh	r3, [r7, #2]
 8008bac:	461a      	mov	r2, r3
 8008bae:	6879      	ldr	r1, [r7, #4]
 8008bb0:	4806      	ldr	r0, [pc, #24]	; (8008bcc <CDC_Transmit_FS+0x48>)
 8008bb2:	f7fe fd07 	bl	80075c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008bb6:	4805      	ldr	r0, [pc, #20]	; (8008bcc <CDC_Transmit_FS+0x48>)
 8008bb8:	f7fe fd30 	bl	800761c <USBD_CDC_TransmitPacket>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	200003a0 	.word	0x200003a0

08008bd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	6039      	str	r1, [r7, #0]
 8008bda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	2212      	movs	r2, #18
 8008be0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008be2:	4b03      	ldr	r3, [pc, #12]	; (8008bf0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bc80      	pop	{r7}
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	2000015c 	.word	0x2000015c

08008bf4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	6039      	str	r1, [r7, #0]
 8008bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	2204      	movs	r2, #4
 8008c04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c06:	4b03      	ldr	r3, [pc, #12]	; (8008c14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bc80      	pop	{r7}
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	20000170 	.word	0x20000170

08008c18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	4603      	mov	r3, r0
 8008c20:	6039      	str	r1, [r7, #0]
 8008c22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d105      	bne.n	8008c36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	4907      	ldr	r1, [pc, #28]	; (8008c4c <USBD_FS_ProductStrDescriptor+0x34>)
 8008c2e:	4808      	ldr	r0, [pc, #32]	; (8008c50 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c30:	f7ff fd0a 	bl	8008648 <USBD_GetString>
 8008c34:	e004      	b.n	8008c40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	4904      	ldr	r1, [pc, #16]	; (8008c4c <USBD_FS_ProductStrDescriptor+0x34>)
 8008c3a:	4805      	ldr	r0, [pc, #20]	; (8008c50 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c3c:	f7ff fd04 	bl	8008648 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c40:	4b02      	ldr	r3, [pc, #8]	; (8008c4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20000c6c 	.word	0x20000c6c
 8008c50:	08009d2c 	.word	0x08009d2c

08008c54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	6039      	str	r1, [r7, #0]
 8008c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	4904      	ldr	r1, [pc, #16]	; (8008c74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c64:	4804      	ldr	r0, [pc, #16]	; (8008c78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c66:	f7ff fcef 	bl	8008648 <USBD_GetString>
  return USBD_StrDesc;
 8008c6a:	4b02      	ldr	r3, [pc, #8]	; (8008c74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	20000c6c 	.word	0x20000c6c
 8008c78:	08009d44 	.word	0x08009d44

08008c7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	4603      	mov	r3, r0
 8008c84:	6039      	str	r1, [r7, #0]
 8008c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	221a      	movs	r2, #26
 8008c8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c8e:	f000 f843 	bl	8008d18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c92:	4b02      	ldr	r3, [pc, #8]	; (8008c9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	20000174 	.word	0x20000174

08008ca0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	6039      	str	r1, [r7, #0]
 8008caa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008cac:	79fb      	ldrb	r3, [r7, #7]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d105      	bne.n	8008cbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	4907      	ldr	r1, [pc, #28]	; (8008cd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cb6:	4808      	ldr	r0, [pc, #32]	; (8008cd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cb8:	f7ff fcc6 	bl	8008648 <USBD_GetString>
 8008cbc:	e004      	b.n	8008cc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	4904      	ldr	r1, [pc, #16]	; (8008cd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cc2:	4805      	ldr	r0, [pc, #20]	; (8008cd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cc4:	f7ff fcc0 	bl	8008648 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cc8:	4b02      	ldr	r3, [pc, #8]	; (8008cd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	20000c6c 	.word	0x20000c6c
 8008cd8:	08009d58 	.word	0x08009d58

08008cdc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	6039      	str	r1, [r7, #0]
 8008ce6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ce8:	79fb      	ldrb	r3, [r7, #7]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d105      	bne.n	8008cfa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	4907      	ldr	r1, [pc, #28]	; (8008d10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cf2:	4808      	ldr	r0, [pc, #32]	; (8008d14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cf4:	f7ff fca8 	bl	8008648 <USBD_GetString>
 8008cf8:	e004      	b.n	8008d04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	4904      	ldr	r1, [pc, #16]	; (8008d10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cfe:	4805      	ldr	r0, [pc, #20]	; (8008d14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d00:	f7ff fca2 	bl	8008648 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d04:	4b02      	ldr	r3, [pc, #8]	; (8008d10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	20000c6c 	.word	0x20000c6c
 8008d14:	08009d64 	.word	0x08009d64

08008d18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d1e:	4b0f      	ldr	r3, [pc, #60]	; (8008d5c <Get_SerialNum+0x44>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d24:	4b0e      	ldr	r3, [pc, #56]	; (8008d60 <Get_SerialNum+0x48>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d2a:	4b0e      	ldr	r3, [pc, #56]	; (8008d64 <Get_SerialNum+0x4c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4413      	add	r3, r2
 8008d36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d009      	beq.n	8008d52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d3e:	2208      	movs	r2, #8
 8008d40:	4909      	ldr	r1, [pc, #36]	; (8008d68 <Get_SerialNum+0x50>)
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f000 f814 	bl	8008d70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d48:	2204      	movs	r2, #4
 8008d4a:	4908      	ldr	r1, [pc, #32]	; (8008d6c <Get_SerialNum+0x54>)
 8008d4c:	68b8      	ldr	r0, [r7, #8]
 8008d4e:	f000 f80f 	bl	8008d70 <IntToUnicode>
  }
}
 8008d52:	bf00      	nop
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	1ffff7e8 	.word	0x1ffff7e8
 8008d60:	1ffff7ec 	.word	0x1ffff7ec
 8008d64:	1ffff7f0 	.word	0x1ffff7f0
 8008d68:	20000176 	.word	0x20000176
 8008d6c:	20000186 	.word	0x20000186

08008d70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d82:	2300      	movs	r3, #0
 8008d84:	75fb      	strb	r3, [r7, #23]
 8008d86:	e027      	b.n	8008dd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	0f1b      	lsrs	r3, r3, #28
 8008d8c:	2b09      	cmp	r3, #9
 8008d8e:	d80b      	bhi.n	8008da8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	0f1b      	lsrs	r3, r3, #28
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	440b      	add	r3, r1
 8008da0:	3230      	adds	r2, #48	; 0x30
 8008da2:	b2d2      	uxtb	r2, r2
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	e00a      	b.n	8008dbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	0f1b      	lsrs	r3, r3, #28
 8008dac:	b2da      	uxtb	r2, r3
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	005b      	lsls	r3, r3, #1
 8008db2:	4619      	mov	r1, r3
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	440b      	add	r3, r1
 8008db8:	3237      	adds	r2, #55	; 0x37
 8008dba:	b2d2      	uxtb	r2, r2
 8008dbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	011b      	lsls	r3, r3, #4
 8008dc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
 8008dc6:	005b      	lsls	r3, r3, #1
 8008dc8:	3301      	adds	r3, #1
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	4413      	add	r3, r2
 8008dce:	2200      	movs	r2, #0
 8008dd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008dd2:	7dfb      	ldrb	r3, [r7, #23]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	75fb      	strb	r3, [r7, #23]
 8008dd8:	7dfa      	ldrb	r2, [r7, #23]
 8008dda:	79fb      	ldrb	r3, [r7, #7]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d3d3      	bcc.n	8008d88 <IntToUnicode+0x18>
  }
}
 8008de0:	bf00      	nop
 8008de2:	bf00      	nop
 8008de4:	371c      	adds	r7, #28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bc80      	pop	{r7}
 8008dea:	4770      	bx	lr

08008dec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a0d      	ldr	r2, [pc, #52]	; (8008e30 <HAL_PCD_MspInit+0x44>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d113      	bne.n	8008e26 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008dfe:	4b0d      	ldr	r3, [pc, #52]	; (8008e34 <HAL_PCD_MspInit+0x48>)
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	4a0c      	ldr	r2, [pc, #48]	; (8008e34 <HAL_PCD_MspInit+0x48>)
 8008e04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e08:	61d3      	str	r3, [r2, #28]
 8008e0a:	4b0a      	ldr	r3, [pc, #40]	; (8008e34 <HAL_PCD_MspInit+0x48>)
 8008e0c:	69db      	ldr	r3, [r3, #28]
 8008e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008e16:	2200      	movs	r2, #0
 8008e18:	2100      	movs	r1, #0
 8008e1a:	2014      	movs	r0, #20
 8008e1c:	f7f8 f841 	bl	8000ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008e20:	2014      	movs	r0, #20
 8008e22:	f7f8 f85a 	bl	8000eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	40005c00 	.word	0x40005c00
 8008e34:	40021000 	.word	0x40021000

08008e38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	4610      	mov	r0, r2
 8008e50:	f7fe fcc9 	bl	80077e6 <USBD_LL_SetupStage>
}
 8008e54:	bf00      	nop
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008e6e:	78fa      	ldrb	r2, [r7, #3]
 8008e70:	6879      	ldr	r1, [r7, #4]
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	00db      	lsls	r3, r3, #3
 8008e7a:	440b      	add	r3, r1
 8008e7c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	78fb      	ldrb	r3, [r7, #3]
 8008e84:	4619      	mov	r1, r3
 8008e86:	f7fe fcfb 	bl	8007880 <USBD_LL_DataOutStage>
}
 8008e8a:	bf00      	nop
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008ea4:	78fa      	ldrb	r2, [r7, #3]
 8008ea6:	6879      	ldr	r1, [r7, #4]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	440b      	add	r3, r1
 8008eb2:	333c      	adds	r3, #60	; 0x3c
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	78fb      	ldrb	r3, [r7, #3]
 8008eb8:	4619      	mov	r1, r3
 8008eba:	f7fe fd52 	bl	8007962 <USBD_LL_DataInStage>
}
 8008ebe:	bf00      	nop
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b082      	sub	sp, #8
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe fe62 	bl	8007b9e <USBD_LL_SOF>
}
 8008eda:	bf00      	nop
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008eea:	2301      	movs	r3, #1
 8008eec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d001      	beq.n	8008efa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ef6:	f7f7 f9f4 	bl	80002e2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f00:	7bfa      	ldrb	r2, [r7, #15]
 8008f02:	4611      	mov	r1, r2
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7fe fe12 	bl	8007b2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fe fdcb 	bl	8007aac <USBD_LL_Reset>
}
 8008f16:	bf00      	nop
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
	...

08008f20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe fe0c 	bl	8007b4c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d005      	beq.n	8008f48 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f3c:	4b04      	ldr	r3, [pc, #16]	; (8008f50 <HAL_PCD_SuspendCallback+0x30>)
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	4a03      	ldr	r2, [pc, #12]	; (8008f50 <HAL_PCD_SuspendCallback+0x30>)
 8008f42:	f043 0306 	orr.w	r3, r3, #6
 8008f46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f48:	bf00      	nop
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	e000ed00 	.word	0xe000ed00

08008f54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fe fe06 	bl	8007b74 <USBD_LL_Resume>
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008f78:	4a28      	ldr	r2, [pc, #160]	; (800901c <USBD_LL_Init+0xac>)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a26      	ldr	r2, [pc, #152]	; (800901c <USBD_LL_Init+0xac>)
 8008f84:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008f88:	4b24      	ldr	r3, [pc, #144]	; (800901c <USBD_LL_Init+0xac>)
 8008f8a:	4a25      	ldr	r2, [pc, #148]	; (8009020 <USBD_LL_Init+0xb0>)
 8008f8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008f8e:	4b23      	ldr	r3, [pc, #140]	; (800901c <USBD_LL_Init+0xac>)
 8008f90:	2208      	movs	r2, #8
 8008f92:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008f94:	4b21      	ldr	r3, [pc, #132]	; (800901c <USBD_LL_Init+0xac>)
 8008f96:	2202      	movs	r2, #2
 8008f98:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008f9a:	4b20      	ldr	r3, [pc, #128]	; (800901c <USBD_LL_Init+0xac>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008fa0:	4b1e      	ldr	r3, [pc, #120]	; (800901c <USBD_LL_Init+0xac>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008fa6:	4b1d      	ldr	r3, [pc, #116]	; (800901c <USBD_LL_Init+0xac>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008fac:	481b      	ldr	r0, [pc, #108]	; (800901c <USBD_LL_Init+0xac>)
 8008fae:	f7f8 fa14 	bl	80013da <HAL_PCD_Init>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008fb8:	f7f7 f993 	bl	80002e2 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008fc2:	2318      	movs	r3, #24
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	f7f9 fe88 	bl	8002cdc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008fd2:	2358      	movs	r3, #88	; 0x58
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	2180      	movs	r1, #128	; 0x80
 8008fd8:	f7f9 fe80 	bl	8002cdc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008fe2:	23c0      	movs	r3, #192	; 0xc0
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2181      	movs	r1, #129	; 0x81
 8008fe8:	f7f9 fe78 	bl	8002cdc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ff2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	f7f9 fe6f 	bl	8002cdc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009008:	2200      	movs	r2, #0
 800900a:	2182      	movs	r1, #130	; 0x82
 800900c:	f7f9 fe66 	bl	8002cdc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	20000e6c 	.word	0x20000e6c
 8009020:	40005c00 	.word	0x40005c00

08009024 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800903a:	4618      	mov	r0, r3
 800903c:	f7f8 fad8 	bl	80015f0 <HAL_PCD_Start>
 8009040:	4603      	mov	r3, r0
 8009042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	4618      	mov	r0, r3
 8009048:	f000 f94e 	bl	80092e8 <USBD_Get_USB_Status>
 800904c:	4603      	mov	r3, r0
 800904e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009050:	7bbb      	ldrb	r3, [r7, #14]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b084      	sub	sp, #16
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	4608      	mov	r0, r1
 8009064:	4611      	mov	r1, r2
 8009066:	461a      	mov	r2, r3
 8009068:	4603      	mov	r3, r0
 800906a:	70fb      	strb	r3, [r7, #3]
 800906c:	460b      	mov	r3, r1
 800906e:	70bb      	strb	r3, [r7, #2]
 8009070:	4613      	mov	r3, r2
 8009072:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009082:	78bb      	ldrb	r3, [r7, #2]
 8009084:	883a      	ldrh	r2, [r7, #0]
 8009086:	78f9      	ldrb	r1, [r7, #3]
 8009088:	f7f8 fc50 	bl	800192c <HAL_PCD_EP_Open>
 800908c:	4603      	mov	r3, r0
 800908e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	4618      	mov	r0, r3
 8009094:	f000 f928 	bl	80092e8 <USBD_Get_USB_Status>
 8009098:	4603      	mov	r3, r0
 800909a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800909c:	7bbb      	ldrb	r3, [r7, #14]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b084      	sub	sp, #16
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	460b      	mov	r3, r1
 80090b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090c0:	78fa      	ldrb	r2, [r7, #3]
 80090c2:	4611      	mov	r1, r2
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7f8 fc97 	bl	80019f8 <HAL_PCD_EP_Close>
 80090ca:	4603      	mov	r3, r0
 80090cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 f909 	bl	80092e8 <USBD_Get_USB_Status>
 80090d6:	4603      	mov	r3, r0
 80090d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090da:	7bbb      	ldrb	r3, [r7, #14]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	460b      	mov	r3, r1
 80090ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f0:	2300      	movs	r3, #0
 80090f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f4:	2300      	movs	r3, #0
 80090f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090fe:	78fa      	ldrb	r2, [r7, #3]
 8009100:	4611      	mov	r1, r2
 8009102:	4618      	mov	r0, r3
 8009104:	f7f8 fd57 	bl	8001bb6 <HAL_PCD_EP_SetStall>
 8009108:	4603      	mov	r3, r0
 800910a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	4618      	mov	r0, r3
 8009110:	f000 f8ea 	bl	80092e8 <USBD_Get_USB_Status>
 8009114:	4603      	mov	r3, r0
 8009116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009118:	7bbb      	ldrb	r3, [r7, #14]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b084      	sub	sp, #16
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	460b      	mov	r3, r1
 800912c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800913c:	78fa      	ldrb	r2, [r7, #3]
 800913e:	4611      	mov	r1, r2
 8009140:	4618      	mov	r0, r3
 8009142:	f7f8 fd98 	bl	8001c76 <HAL_PCD_EP_ClrStall>
 8009146:	4603      	mov	r3, r0
 8009148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	4618      	mov	r0, r3
 800914e:	f000 f8cb 	bl	80092e8 <USBD_Get_USB_Status>
 8009152:	4603      	mov	r3, r0
 8009154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009156:	7bbb      	ldrb	r3, [r7, #14]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009172:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009178:	2b00      	cmp	r3, #0
 800917a:	da0c      	bge.n	8009196 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009182:	68f9      	ldr	r1, [r7, #12]
 8009184:	1c5a      	adds	r2, r3, #1
 8009186:	4613      	mov	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	00db      	lsls	r3, r3, #3
 800918e:	440b      	add	r3, r1
 8009190:	3302      	adds	r3, #2
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	e00b      	b.n	80091ae <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009196:	78fb      	ldrb	r3, [r7, #3]
 8009198:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800919c:	68f9      	ldr	r1, [r7, #12]
 800919e:	4613      	mov	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	00db      	lsls	r3, r3, #3
 80091a6:	440b      	add	r3, r1
 80091a8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80091ac:	781b      	ldrb	r3, [r3, #0]
  }
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bc80      	pop	{r7}
 80091b6:	4770      	bx	lr

080091b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091d2:	78fa      	ldrb	r2, [r7, #3]
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7f8 fb83 	bl	80018e2 <HAL_PCD_SetAddress>
 80091dc:	4603      	mov	r3, r0
 80091de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 f880 	bl	80092e8 <USBD_Get_USB_Status>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b086      	sub	sp, #24
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	60f8      	str	r0, [r7, #12]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	461a      	mov	r2, r3
 8009202:	460b      	mov	r3, r1
 8009204:	72fb      	strb	r3, [r7, #11]
 8009206:	4613      	mov	r3, r2
 8009208:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009218:	893b      	ldrh	r3, [r7, #8]
 800921a:	7af9      	ldrb	r1, [r7, #11]
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	f7f8 fc87 	bl	8001b30 <HAL_PCD_EP_Transmit>
 8009222:	4603      	mov	r3, r0
 8009224:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	4618      	mov	r0, r3
 800922a:	f000 f85d 	bl	80092e8 <USBD_Get_USB_Status>
 800922e:	4603      	mov	r3, r0
 8009230:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009232:	7dbb      	ldrb	r3, [r7, #22]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	607a      	str	r2, [r7, #4]
 8009246:	461a      	mov	r2, r3
 8009248:	460b      	mov	r3, r1
 800924a:	72fb      	strb	r3, [r7, #11]
 800924c:	4613      	mov	r3, r2
 800924e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800925e:	893b      	ldrh	r3, [r7, #8]
 8009260:	7af9      	ldrb	r1, [r7, #11]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	f7f8 fc10 	bl	8001a88 <HAL_PCD_EP_Receive>
 8009268:	4603      	mov	r3, r0
 800926a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	4618      	mov	r0, r3
 8009270:	f000 f83a 	bl	80092e8 <USBD_Get_USB_Status>
 8009274:	4603      	mov	r3, r0
 8009276:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009278:	7dbb      	ldrb	r3, [r7, #22]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3718      	adds	r7, #24
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b082      	sub	sp, #8
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	460b      	mov	r3, r1
 800928c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009294:	78fa      	ldrb	r2, [r7, #3]
 8009296:	4611      	mov	r1, r2
 8009298:	4618      	mov	r0, r3
 800929a:	f7f8 fc32 	bl	8001b02 <HAL_PCD_EP_GetRxCount>
 800929e:	4603      	mov	r3, r0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80092b0:	4b02      	ldr	r3, [pc, #8]	; (80092bc <USBD_static_malloc+0x14>)
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bc80      	pop	{r7}
 80092ba:	4770      	bx	lr
 80092bc:	20001158 	.word	0x20001158

080092c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]

}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bc80      	pop	{r7}
 80092d0:	4770      	bx	lr

080092d2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d2:	b480      	push	{r7}
 80092d4:	b083      	sub	sp, #12
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	460b      	mov	r3, r1
 80092dc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80092de:	bf00      	nop
 80092e0:	370c      	adds	r7, #12
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bc80      	pop	{r7}
 80092e6:	4770      	bx	lr

080092e8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4603      	mov	r3, r0
 80092f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092f6:	79fb      	ldrb	r3, [r7, #7]
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d817      	bhi.n	800932c <USBD_Get_USB_Status+0x44>
 80092fc:	a201      	add	r2, pc, #4	; (adr r2, 8009304 <USBD_Get_USB_Status+0x1c>)
 80092fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009302:	bf00      	nop
 8009304:	08009315 	.word	0x08009315
 8009308:	0800931b 	.word	0x0800931b
 800930c:	08009321 	.word	0x08009321
 8009310:	08009327 	.word	0x08009327
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	73fb      	strb	r3, [r7, #15]
    break;
 8009318:	e00b      	b.n	8009332 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800931a:	2302      	movs	r3, #2
 800931c:	73fb      	strb	r3, [r7, #15]
    break;
 800931e:	e008      	b.n	8009332 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009320:	2301      	movs	r3, #1
 8009322:	73fb      	strb	r3, [r7, #15]
    break;
 8009324:	e005      	b.n	8009332 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009326:	2302      	movs	r3, #2
 8009328:	73fb      	strb	r3, [r7, #15]
    break;
 800932a:	e002      	b.n	8009332 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800932c:	2302      	movs	r3, #2
 800932e:	73fb      	strb	r3, [r7, #15]
    break;
 8009330:	bf00      	nop
  }
  return usb_status;
 8009332:	7bfb      	ldrb	r3, [r7, #15]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	bc80      	pop	{r7}
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop

08009340 <main>:

#include "main.h"


int main(void)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	af00      	add	r7, sp, #0
  hwInit();
 8009344:	f7f7 fc40 	bl	8000bc8 <hwInit>
  apInit();
 8009348:	f7f6 ff00 	bl	800014c <apInit>

  apMain();
 800934c:	f7f6 ff0c 	bl	8000168 <apMain>

  return 0;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	bd80      	pop	{r7, pc}
	...

08009358 <__errno>:
 8009358:	4b01      	ldr	r3, [pc, #4]	; (8009360 <__errno+0x8>)
 800935a:	6818      	ldr	r0, [r3, #0]
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	20000190 	.word	0x20000190

08009364 <__libc_init_array>:
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	2600      	movs	r6, #0
 8009368:	4d0c      	ldr	r5, [pc, #48]	; (800939c <__libc_init_array+0x38>)
 800936a:	4c0d      	ldr	r4, [pc, #52]	; (80093a0 <__libc_init_array+0x3c>)
 800936c:	1b64      	subs	r4, r4, r5
 800936e:	10a4      	asrs	r4, r4, #2
 8009370:	42a6      	cmp	r6, r4
 8009372:	d109      	bne.n	8009388 <__libc_init_array+0x24>
 8009374:	f000 fcb6 	bl	8009ce4 <_init>
 8009378:	2600      	movs	r6, #0
 800937a:	4d0a      	ldr	r5, [pc, #40]	; (80093a4 <__libc_init_array+0x40>)
 800937c:	4c0a      	ldr	r4, [pc, #40]	; (80093a8 <__libc_init_array+0x44>)
 800937e:	1b64      	subs	r4, r4, r5
 8009380:	10a4      	asrs	r4, r4, #2
 8009382:	42a6      	cmp	r6, r4
 8009384:	d105      	bne.n	8009392 <__libc_init_array+0x2e>
 8009386:	bd70      	pop	{r4, r5, r6, pc}
 8009388:	f855 3b04 	ldr.w	r3, [r5], #4
 800938c:	4798      	blx	r3
 800938e:	3601      	adds	r6, #1
 8009390:	e7ee      	b.n	8009370 <__libc_init_array+0xc>
 8009392:	f855 3b04 	ldr.w	r3, [r5], #4
 8009396:	4798      	blx	r3
 8009398:	3601      	adds	r6, #1
 800939a:	e7f2      	b.n	8009382 <__libc_init_array+0x1e>
 800939c:	08009dc0 	.word	0x08009dc0
 80093a0:	08009dc0 	.word	0x08009dc0
 80093a4:	08009dc0 	.word	0x08009dc0
 80093a8:	08009dc4 	.word	0x08009dc4

080093ac <memset>:
 80093ac:	4603      	mov	r3, r0
 80093ae:	4402      	add	r2, r0
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d100      	bne.n	80093b6 <memset+0xa>
 80093b4:	4770      	bx	lr
 80093b6:	f803 1b01 	strb.w	r1, [r3], #1
 80093ba:	e7f9      	b.n	80093b0 <memset+0x4>

080093bc <_vsniprintf_r>:
 80093bc:	b530      	push	{r4, r5, lr}
 80093be:	4614      	mov	r4, r2
 80093c0:	2c00      	cmp	r4, #0
 80093c2:	4605      	mov	r5, r0
 80093c4:	461a      	mov	r2, r3
 80093c6:	b09b      	sub	sp, #108	; 0x6c
 80093c8:	da05      	bge.n	80093d6 <_vsniprintf_r+0x1a>
 80093ca:	238b      	movs	r3, #139	; 0x8b
 80093cc:	6003      	str	r3, [r0, #0]
 80093ce:	f04f 30ff 	mov.w	r0, #4294967295
 80093d2:	b01b      	add	sp, #108	; 0x6c
 80093d4:	bd30      	pop	{r4, r5, pc}
 80093d6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80093da:	f8ad 300c 	strh.w	r3, [sp, #12]
 80093de:	bf0c      	ite	eq
 80093e0:	4623      	moveq	r3, r4
 80093e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80093e6:	9302      	str	r3, [sp, #8]
 80093e8:	9305      	str	r3, [sp, #20]
 80093ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093ee:	9100      	str	r1, [sp, #0]
 80093f0:	9104      	str	r1, [sp, #16]
 80093f2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80093f6:	4669      	mov	r1, sp
 80093f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80093fa:	f000 f875 	bl	80094e8 <_svfiprintf_r>
 80093fe:	1c43      	adds	r3, r0, #1
 8009400:	bfbc      	itt	lt
 8009402:	238b      	movlt	r3, #139	; 0x8b
 8009404:	602b      	strlt	r3, [r5, #0]
 8009406:	2c00      	cmp	r4, #0
 8009408:	d0e3      	beq.n	80093d2 <_vsniprintf_r+0x16>
 800940a:	2200      	movs	r2, #0
 800940c:	9b00      	ldr	r3, [sp, #0]
 800940e:	701a      	strb	r2, [r3, #0]
 8009410:	e7df      	b.n	80093d2 <_vsniprintf_r+0x16>
	...

08009414 <vsniprintf>:
 8009414:	b507      	push	{r0, r1, r2, lr}
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	4613      	mov	r3, r2
 800941a:	460a      	mov	r2, r1
 800941c:	4601      	mov	r1, r0
 800941e:	4803      	ldr	r0, [pc, #12]	; (800942c <vsniprintf+0x18>)
 8009420:	6800      	ldr	r0, [r0, #0]
 8009422:	f7ff ffcb 	bl	80093bc <_vsniprintf_r>
 8009426:	b003      	add	sp, #12
 8009428:	f85d fb04 	ldr.w	pc, [sp], #4
 800942c:	20000190 	.word	0x20000190

08009430 <__ssputs_r>:
 8009430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009434:	688e      	ldr	r6, [r1, #8]
 8009436:	4682      	mov	sl, r0
 8009438:	429e      	cmp	r6, r3
 800943a:	460c      	mov	r4, r1
 800943c:	4690      	mov	r8, r2
 800943e:	461f      	mov	r7, r3
 8009440:	d838      	bhi.n	80094b4 <__ssputs_r+0x84>
 8009442:	898a      	ldrh	r2, [r1, #12]
 8009444:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009448:	d032      	beq.n	80094b0 <__ssputs_r+0x80>
 800944a:	6825      	ldr	r5, [r4, #0]
 800944c:	6909      	ldr	r1, [r1, #16]
 800944e:	3301      	adds	r3, #1
 8009450:	eba5 0901 	sub.w	r9, r5, r1
 8009454:	6965      	ldr	r5, [r4, #20]
 8009456:	444b      	add	r3, r9
 8009458:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800945c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009460:	106d      	asrs	r5, r5, #1
 8009462:	429d      	cmp	r5, r3
 8009464:	bf38      	it	cc
 8009466:	461d      	movcc	r5, r3
 8009468:	0553      	lsls	r3, r2, #21
 800946a:	d531      	bpl.n	80094d0 <__ssputs_r+0xa0>
 800946c:	4629      	mov	r1, r5
 800946e:	f000 fb6f 	bl	8009b50 <_malloc_r>
 8009472:	4606      	mov	r6, r0
 8009474:	b950      	cbnz	r0, 800948c <__ssputs_r+0x5c>
 8009476:	230c      	movs	r3, #12
 8009478:	f04f 30ff 	mov.w	r0, #4294967295
 800947c:	f8ca 3000 	str.w	r3, [sl]
 8009480:	89a3      	ldrh	r3, [r4, #12]
 8009482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009486:	81a3      	strh	r3, [r4, #12]
 8009488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948c:	464a      	mov	r2, r9
 800948e:	6921      	ldr	r1, [r4, #16]
 8009490:	f000 face 	bl	8009a30 <memcpy>
 8009494:	89a3      	ldrh	r3, [r4, #12]
 8009496:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800949a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800949e:	81a3      	strh	r3, [r4, #12]
 80094a0:	6126      	str	r6, [r4, #16]
 80094a2:	444e      	add	r6, r9
 80094a4:	6026      	str	r6, [r4, #0]
 80094a6:	463e      	mov	r6, r7
 80094a8:	6165      	str	r5, [r4, #20]
 80094aa:	eba5 0509 	sub.w	r5, r5, r9
 80094ae:	60a5      	str	r5, [r4, #8]
 80094b0:	42be      	cmp	r6, r7
 80094b2:	d900      	bls.n	80094b6 <__ssputs_r+0x86>
 80094b4:	463e      	mov	r6, r7
 80094b6:	4632      	mov	r2, r6
 80094b8:	4641      	mov	r1, r8
 80094ba:	6820      	ldr	r0, [r4, #0]
 80094bc:	f000 fac6 	bl	8009a4c <memmove>
 80094c0:	68a3      	ldr	r3, [r4, #8]
 80094c2:	2000      	movs	r0, #0
 80094c4:	1b9b      	subs	r3, r3, r6
 80094c6:	60a3      	str	r3, [r4, #8]
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	4433      	add	r3, r6
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	e7db      	b.n	8009488 <__ssputs_r+0x58>
 80094d0:	462a      	mov	r2, r5
 80094d2:	f000 fbb1 	bl	8009c38 <_realloc_r>
 80094d6:	4606      	mov	r6, r0
 80094d8:	2800      	cmp	r0, #0
 80094da:	d1e1      	bne.n	80094a0 <__ssputs_r+0x70>
 80094dc:	4650      	mov	r0, sl
 80094de:	6921      	ldr	r1, [r4, #16]
 80094e0:	f000 face 	bl	8009a80 <_free_r>
 80094e4:	e7c7      	b.n	8009476 <__ssputs_r+0x46>
	...

080094e8 <_svfiprintf_r>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	4698      	mov	r8, r3
 80094ee:	898b      	ldrh	r3, [r1, #12]
 80094f0:	4607      	mov	r7, r0
 80094f2:	061b      	lsls	r3, r3, #24
 80094f4:	460d      	mov	r5, r1
 80094f6:	4614      	mov	r4, r2
 80094f8:	b09d      	sub	sp, #116	; 0x74
 80094fa:	d50e      	bpl.n	800951a <_svfiprintf_r+0x32>
 80094fc:	690b      	ldr	r3, [r1, #16]
 80094fe:	b963      	cbnz	r3, 800951a <_svfiprintf_r+0x32>
 8009500:	2140      	movs	r1, #64	; 0x40
 8009502:	f000 fb25 	bl	8009b50 <_malloc_r>
 8009506:	6028      	str	r0, [r5, #0]
 8009508:	6128      	str	r0, [r5, #16]
 800950a:	b920      	cbnz	r0, 8009516 <_svfiprintf_r+0x2e>
 800950c:	230c      	movs	r3, #12
 800950e:	603b      	str	r3, [r7, #0]
 8009510:	f04f 30ff 	mov.w	r0, #4294967295
 8009514:	e0d1      	b.n	80096ba <_svfiprintf_r+0x1d2>
 8009516:	2340      	movs	r3, #64	; 0x40
 8009518:	616b      	str	r3, [r5, #20]
 800951a:	2300      	movs	r3, #0
 800951c:	9309      	str	r3, [sp, #36]	; 0x24
 800951e:	2320      	movs	r3, #32
 8009520:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009524:	2330      	movs	r3, #48	; 0x30
 8009526:	f04f 0901 	mov.w	r9, #1
 800952a:	f8cd 800c 	str.w	r8, [sp, #12]
 800952e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80096d4 <_svfiprintf_r+0x1ec>
 8009532:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009536:	4623      	mov	r3, r4
 8009538:	469a      	mov	sl, r3
 800953a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800953e:	b10a      	cbz	r2, 8009544 <_svfiprintf_r+0x5c>
 8009540:	2a25      	cmp	r2, #37	; 0x25
 8009542:	d1f9      	bne.n	8009538 <_svfiprintf_r+0x50>
 8009544:	ebba 0b04 	subs.w	fp, sl, r4
 8009548:	d00b      	beq.n	8009562 <_svfiprintf_r+0x7a>
 800954a:	465b      	mov	r3, fp
 800954c:	4622      	mov	r2, r4
 800954e:	4629      	mov	r1, r5
 8009550:	4638      	mov	r0, r7
 8009552:	f7ff ff6d 	bl	8009430 <__ssputs_r>
 8009556:	3001      	adds	r0, #1
 8009558:	f000 80aa 	beq.w	80096b0 <_svfiprintf_r+0x1c8>
 800955c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800955e:	445a      	add	r2, fp
 8009560:	9209      	str	r2, [sp, #36]	; 0x24
 8009562:	f89a 3000 	ldrb.w	r3, [sl]
 8009566:	2b00      	cmp	r3, #0
 8009568:	f000 80a2 	beq.w	80096b0 <_svfiprintf_r+0x1c8>
 800956c:	2300      	movs	r3, #0
 800956e:	f04f 32ff 	mov.w	r2, #4294967295
 8009572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009576:	f10a 0a01 	add.w	sl, sl, #1
 800957a:	9304      	str	r3, [sp, #16]
 800957c:	9307      	str	r3, [sp, #28]
 800957e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009582:	931a      	str	r3, [sp, #104]	; 0x68
 8009584:	4654      	mov	r4, sl
 8009586:	2205      	movs	r2, #5
 8009588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800958c:	4851      	ldr	r0, [pc, #324]	; (80096d4 <_svfiprintf_r+0x1ec>)
 800958e:	f000 fa41 	bl	8009a14 <memchr>
 8009592:	9a04      	ldr	r2, [sp, #16]
 8009594:	b9d8      	cbnz	r0, 80095ce <_svfiprintf_r+0xe6>
 8009596:	06d0      	lsls	r0, r2, #27
 8009598:	bf44      	itt	mi
 800959a:	2320      	movmi	r3, #32
 800959c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095a0:	0711      	lsls	r1, r2, #28
 80095a2:	bf44      	itt	mi
 80095a4:	232b      	movmi	r3, #43	; 0x2b
 80095a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095aa:	f89a 3000 	ldrb.w	r3, [sl]
 80095ae:	2b2a      	cmp	r3, #42	; 0x2a
 80095b0:	d015      	beq.n	80095de <_svfiprintf_r+0xf6>
 80095b2:	4654      	mov	r4, sl
 80095b4:	2000      	movs	r0, #0
 80095b6:	f04f 0c0a 	mov.w	ip, #10
 80095ba:	9a07      	ldr	r2, [sp, #28]
 80095bc:	4621      	mov	r1, r4
 80095be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095c2:	3b30      	subs	r3, #48	; 0x30
 80095c4:	2b09      	cmp	r3, #9
 80095c6:	d94e      	bls.n	8009666 <_svfiprintf_r+0x17e>
 80095c8:	b1b0      	cbz	r0, 80095f8 <_svfiprintf_r+0x110>
 80095ca:	9207      	str	r2, [sp, #28]
 80095cc:	e014      	b.n	80095f8 <_svfiprintf_r+0x110>
 80095ce:	eba0 0308 	sub.w	r3, r0, r8
 80095d2:	fa09 f303 	lsl.w	r3, r9, r3
 80095d6:	4313      	orrs	r3, r2
 80095d8:	46a2      	mov	sl, r4
 80095da:	9304      	str	r3, [sp, #16]
 80095dc:	e7d2      	b.n	8009584 <_svfiprintf_r+0x9c>
 80095de:	9b03      	ldr	r3, [sp, #12]
 80095e0:	1d19      	adds	r1, r3, #4
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	9103      	str	r1, [sp, #12]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	bfbb      	ittet	lt
 80095ea:	425b      	neglt	r3, r3
 80095ec:	f042 0202 	orrlt.w	r2, r2, #2
 80095f0:	9307      	strge	r3, [sp, #28]
 80095f2:	9307      	strlt	r3, [sp, #28]
 80095f4:	bfb8      	it	lt
 80095f6:	9204      	strlt	r2, [sp, #16]
 80095f8:	7823      	ldrb	r3, [r4, #0]
 80095fa:	2b2e      	cmp	r3, #46	; 0x2e
 80095fc:	d10c      	bne.n	8009618 <_svfiprintf_r+0x130>
 80095fe:	7863      	ldrb	r3, [r4, #1]
 8009600:	2b2a      	cmp	r3, #42	; 0x2a
 8009602:	d135      	bne.n	8009670 <_svfiprintf_r+0x188>
 8009604:	9b03      	ldr	r3, [sp, #12]
 8009606:	3402      	adds	r4, #2
 8009608:	1d1a      	adds	r2, r3, #4
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	9203      	str	r2, [sp, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	bfb8      	it	lt
 8009612:	f04f 33ff 	movlt.w	r3, #4294967295
 8009616:	9305      	str	r3, [sp, #20]
 8009618:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80096d8 <_svfiprintf_r+0x1f0>
 800961c:	2203      	movs	r2, #3
 800961e:	4650      	mov	r0, sl
 8009620:	7821      	ldrb	r1, [r4, #0]
 8009622:	f000 f9f7 	bl	8009a14 <memchr>
 8009626:	b140      	cbz	r0, 800963a <_svfiprintf_r+0x152>
 8009628:	2340      	movs	r3, #64	; 0x40
 800962a:	eba0 000a 	sub.w	r0, r0, sl
 800962e:	fa03 f000 	lsl.w	r0, r3, r0
 8009632:	9b04      	ldr	r3, [sp, #16]
 8009634:	3401      	adds	r4, #1
 8009636:	4303      	orrs	r3, r0
 8009638:	9304      	str	r3, [sp, #16]
 800963a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800963e:	2206      	movs	r2, #6
 8009640:	4826      	ldr	r0, [pc, #152]	; (80096dc <_svfiprintf_r+0x1f4>)
 8009642:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009646:	f000 f9e5 	bl	8009a14 <memchr>
 800964a:	2800      	cmp	r0, #0
 800964c:	d038      	beq.n	80096c0 <_svfiprintf_r+0x1d8>
 800964e:	4b24      	ldr	r3, [pc, #144]	; (80096e0 <_svfiprintf_r+0x1f8>)
 8009650:	bb1b      	cbnz	r3, 800969a <_svfiprintf_r+0x1b2>
 8009652:	9b03      	ldr	r3, [sp, #12]
 8009654:	3307      	adds	r3, #7
 8009656:	f023 0307 	bic.w	r3, r3, #7
 800965a:	3308      	adds	r3, #8
 800965c:	9303      	str	r3, [sp, #12]
 800965e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009660:	4433      	add	r3, r6
 8009662:	9309      	str	r3, [sp, #36]	; 0x24
 8009664:	e767      	b.n	8009536 <_svfiprintf_r+0x4e>
 8009666:	460c      	mov	r4, r1
 8009668:	2001      	movs	r0, #1
 800966a:	fb0c 3202 	mla	r2, ip, r2, r3
 800966e:	e7a5      	b.n	80095bc <_svfiprintf_r+0xd4>
 8009670:	2300      	movs	r3, #0
 8009672:	f04f 0c0a 	mov.w	ip, #10
 8009676:	4619      	mov	r1, r3
 8009678:	3401      	adds	r4, #1
 800967a:	9305      	str	r3, [sp, #20]
 800967c:	4620      	mov	r0, r4
 800967e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009682:	3a30      	subs	r2, #48	; 0x30
 8009684:	2a09      	cmp	r2, #9
 8009686:	d903      	bls.n	8009690 <_svfiprintf_r+0x1a8>
 8009688:	2b00      	cmp	r3, #0
 800968a:	d0c5      	beq.n	8009618 <_svfiprintf_r+0x130>
 800968c:	9105      	str	r1, [sp, #20]
 800968e:	e7c3      	b.n	8009618 <_svfiprintf_r+0x130>
 8009690:	4604      	mov	r4, r0
 8009692:	2301      	movs	r3, #1
 8009694:	fb0c 2101 	mla	r1, ip, r1, r2
 8009698:	e7f0      	b.n	800967c <_svfiprintf_r+0x194>
 800969a:	ab03      	add	r3, sp, #12
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	462a      	mov	r2, r5
 80096a0:	4638      	mov	r0, r7
 80096a2:	4b10      	ldr	r3, [pc, #64]	; (80096e4 <_svfiprintf_r+0x1fc>)
 80096a4:	a904      	add	r1, sp, #16
 80096a6:	f3af 8000 	nop.w
 80096aa:	1c42      	adds	r2, r0, #1
 80096ac:	4606      	mov	r6, r0
 80096ae:	d1d6      	bne.n	800965e <_svfiprintf_r+0x176>
 80096b0:	89ab      	ldrh	r3, [r5, #12]
 80096b2:	065b      	lsls	r3, r3, #25
 80096b4:	f53f af2c 	bmi.w	8009510 <_svfiprintf_r+0x28>
 80096b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096ba:	b01d      	add	sp, #116	; 0x74
 80096bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c0:	ab03      	add	r3, sp, #12
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	462a      	mov	r2, r5
 80096c6:	4638      	mov	r0, r7
 80096c8:	4b06      	ldr	r3, [pc, #24]	; (80096e4 <_svfiprintf_r+0x1fc>)
 80096ca:	a904      	add	r1, sp, #16
 80096cc:	f000 f87c 	bl	80097c8 <_printf_i>
 80096d0:	e7eb      	b.n	80096aa <_svfiprintf_r+0x1c2>
 80096d2:	bf00      	nop
 80096d4:	08009d8c 	.word	0x08009d8c
 80096d8:	08009d92 	.word	0x08009d92
 80096dc:	08009d96 	.word	0x08009d96
 80096e0:	00000000 	.word	0x00000000
 80096e4:	08009431 	.word	0x08009431

080096e8 <_printf_common>:
 80096e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096ec:	4616      	mov	r6, r2
 80096ee:	4699      	mov	r9, r3
 80096f0:	688a      	ldr	r2, [r1, #8]
 80096f2:	690b      	ldr	r3, [r1, #16]
 80096f4:	4607      	mov	r7, r0
 80096f6:	4293      	cmp	r3, r2
 80096f8:	bfb8      	it	lt
 80096fa:	4613      	movlt	r3, r2
 80096fc:	6033      	str	r3, [r6, #0]
 80096fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009702:	460c      	mov	r4, r1
 8009704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009708:	b10a      	cbz	r2, 800970e <_printf_common+0x26>
 800970a:	3301      	adds	r3, #1
 800970c:	6033      	str	r3, [r6, #0]
 800970e:	6823      	ldr	r3, [r4, #0]
 8009710:	0699      	lsls	r1, r3, #26
 8009712:	bf42      	ittt	mi
 8009714:	6833      	ldrmi	r3, [r6, #0]
 8009716:	3302      	addmi	r3, #2
 8009718:	6033      	strmi	r3, [r6, #0]
 800971a:	6825      	ldr	r5, [r4, #0]
 800971c:	f015 0506 	ands.w	r5, r5, #6
 8009720:	d106      	bne.n	8009730 <_printf_common+0x48>
 8009722:	f104 0a19 	add.w	sl, r4, #25
 8009726:	68e3      	ldr	r3, [r4, #12]
 8009728:	6832      	ldr	r2, [r6, #0]
 800972a:	1a9b      	subs	r3, r3, r2
 800972c:	42ab      	cmp	r3, r5
 800972e:	dc28      	bgt.n	8009782 <_printf_common+0x9a>
 8009730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009734:	1e13      	subs	r3, r2, #0
 8009736:	6822      	ldr	r2, [r4, #0]
 8009738:	bf18      	it	ne
 800973a:	2301      	movne	r3, #1
 800973c:	0692      	lsls	r2, r2, #26
 800973e:	d42d      	bmi.n	800979c <_printf_common+0xb4>
 8009740:	4649      	mov	r1, r9
 8009742:	4638      	mov	r0, r7
 8009744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009748:	47c0      	blx	r8
 800974a:	3001      	adds	r0, #1
 800974c:	d020      	beq.n	8009790 <_printf_common+0xa8>
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	68e5      	ldr	r5, [r4, #12]
 8009752:	f003 0306 	and.w	r3, r3, #6
 8009756:	2b04      	cmp	r3, #4
 8009758:	bf18      	it	ne
 800975a:	2500      	movne	r5, #0
 800975c:	6832      	ldr	r2, [r6, #0]
 800975e:	f04f 0600 	mov.w	r6, #0
 8009762:	68a3      	ldr	r3, [r4, #8]
 8009764:	bf08      	it	eq
 8009766:	1aad      	subeq	r5, r5, r2
 8009768:	6922      	ldr	r2, [r4, #16]
 800976a:	bf08      	it	eq
 800976c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009770:	4293      	cmp	r3, r2
 8009772:	bfc4      	itt	gt
 8009774:	1a9b      	subgt	r3, r3, r2
 8009776:	18ed      	addgt	r5, r5, r3
 8009778:	341a      	adds	r4, #26
 800977a:	42b5      	cmp	r5, r6
 800977c:	d11a      	bne.n	80097b4 <_printf_common+0xcc>
 800977e:	2000      	movs	r0, #0
 8009780:	e008      	b.n	8009794 <_printf_common+0xac>
 8009782:	2301      	movs	r3, #1
 8009784:	4652      	mov	r2, sl
 8009786:	4649      	mov	r1, r9
 8009788:	4638      	mov	r0, r7
 800978a:	47c0      	blx	r8
 800978c:	3001      	adds	r0, #1
 800978e:	d103      	bne.n	8009798 <_printf_common+0xb0>
 8009790:	f04f 30ff 	mov.w	r0, #4294967295
 8009794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009798:	3501      	adds	r5, #1
 800979a:	e7c4      	b.n	8009726 <_printf_common+0x3e>
 800979c:	2030      	movs	r0, #48	; 0x30
 800979e:	18e1      	adds	r1, r4, r3
 80097a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097a4:	1c5a      	adds	r2, r3, #1
 80097a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097aa:	4422      	add	r2, r4
 80097ac:	3302      	adds	r3, #2
 80097ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097b2:	e7c5      	b.n	8009740 <_printf_common+0x58>
 80097b4:	2301      	movs	r3, #1
 80097b6:	4622      	mov	r2, r4
 80097b8:	4649      	mov	r1, r9
 80097ba:	4638      	mov	r0, r7
 80097bc:	47c0      	blx	r8
 80097be:	3001      	adds	r0, #1
 80097c0:	d0e6      	beq.n	8009790 <_printf_common+0xa8>
 80097c2:	3601      	adds	r6, #1
 80097c4:	e7d9      	b.n	800977a <_printf_common+0x92>
	...

080097c8 <_printf_i>:
 80097c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097cc:	7e0f      	ldrb	r7, [r1, #24]
 80097ce:	4691      	mov	r9, r2
 80097d0:	2f78      	cmp	r7, #120	; 0x78
 80097d2:	4680      	mov	r8, r0
 80097d4:	460c      	mov	r4, r1
 80097d6:	469a      	mov	sl, r3
 80097d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80097da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80097de:	d807      	bhi.n	80097f0 <_printf_i+0x28>
 80097e0:	2f62      	cmp	r7, #98	; 0x62
 80097e2:	d80a      	bhi.n	80097fa <_printf_i+0x32>
 80097e4:	2f00      	cmp	r7, #0
 80097e6:	f000 80d9 	beq.w	800999c <_printf_i+0x1d4>
 80097ea:	2f58      	cmp	r7, #88	; 0x58
 80097ec:	f000 80a4 	beq.w	8009938 <_printf_i+0x170>
 80097f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097f8:	e03a      	b.n	8009870 <_printf_i+0xa8>
 80097fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097fe:	2b15      	cmp	r3, #21
 8009800:	d8f6      	bhi.n	80097f0 <_printf_i+0x28>
 8009802:	a101      	add	r1, pc, #4	; (adr r1, 8009808 <_printf_i+0x40>)
 8009804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009808:	08009861 	.word	0x08009861
 800980c:	08009875 	.word	0x08009875
 8009810:	080097f1 	.word	0x080097f1
 8009814:	080097f1 	.word	0x080097f1
 8009818:	080097f1 	.word	0x080097f1
 800981c:	080097f1 	.word	0x080097f1
 8009820:	08009875 	.word	0x08009875
 8009824:	080097f1 	.word	0x080097f1
 8009828:	080097f1 	.word	0x080097f1
 800982c:	080097f1 	.word	0x080097f1
 8009830:	080097f1 	.word	0x080097f1
 8009834:	08009983 	.word	0x08009983
 8009838:	080098a5 	.word	0x080098a5
 800983c:	08009965 	.word	0x08009965
 8009840:	080097f1 	.word	0x080097f1
 8009844:	080097f1 	.word	0x080097f1
 8009848:	080099a5 	.word	0x080099a5
 800984c:	080097f1 	.word	0x080097f1
 8009850:	080098a5 	.word	0x080098a5
 8009854:	080097f1 	.word	0x080097f1
 8009858:	080097f1 	.word	0x080097f1
 800985c:	0800996d 	.word	0x0800996d
 8009860:	682b      	ldr	r3, [r5, #0]
 8009862:	1d1a      	adds	r2, r3, #4
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	602a      	str	r2, [r5, #0]
 8009868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800986c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009870:	2301      	movs	r3, #1
 8009872:	e0a4      	b.n	80099be <_printf_i+0x1f6>
 8009874:	6820      	ldr	r0, [r4, #0]
 8009876:	6829      	ldr	r1, [r5, #0]
 8009878:	0606      	lsls	r6, r0, #24
 800987a:	f101 0304 	add.w	r3, r1, #4
 800987e:	d50a      	bpl.n	8009896 <_printf_i+0xce>
 8009880:	680e      	ldr	r6, [r1, #0]
 8009882:	602b      	str	r3, [r5, #0]
 8009884:	2e00      	cmp	r6, #0
 8009886:	da03      	bge.n	8009890 <_printf_i+0xc8>
 8009888:	232d      	movs	r3, #45	; 0x2d
 800988a:	4276      	negs	r6, r6
 800988c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009890:	230a      	movs	r3, #10
 8009892:	485e      	ldr	r0, [pc, #376]	; (8009a0c <_printf_i+0x244>)
 8009894:	e019      	b.n	80098ca <_printf_i+0x102>
 8009896:	680e      	ldr	r6, [r1, #0]
 8009898:	f010 0f40 	tst.w	r0, #64	; 0x40
 800989c:	602b      	str	r3, [r5, #0]
 800989e:	bf18      	it	ne
 80098a0:	b236      	sxthne	r6, r6
 80098a2:	e7ef      	b.n	8009884 <_printf_i+0xbc>
 80098a4:	682b      	ldr	r3, [r5, #0]
 80098a6:	6820      	ldr	r0, [r4, #0]
 80098a8:	1d19      	adds	r1, r3, #4
 80098aa:	6029      	str	r1, [r5, #0]
 80098ac:	0601      	lsls	r1, r0, #24
 80098ae:	d501      	bpl.n	80098b4 <_printf_i+0xec>
 80098b0:	681e      	ldr	r6, [r3, #0]
 80098b2:	e002      	b.n	80098ba <_printf_i+0xf2>
 80098b4:	0646      	lsls	r6, r0, #25
 80098b6:	d5fb      	bpl.n	80098b0 <_printf_i+0xe8>
 80098b8:	881e      	ldrh	r6, [r3, #0]
 80098ba:	2f6f      	cmp	r7, #111	; 0x6f
 80098bc:	bf0c      	ite	eq
 80098be:	2308      	moveq	r3, #8
 80098c0:	230a      	movne	r3, #10
 80098c2:	4852      	ldr	r0, [pc, #328]	; (8009a0c <_printf_i+0x244>)
 80098c4:	2100      	movs	r1, #0
 80098c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098ca:	6865      	ldr	r5, [r4, #4]
 80098cc:	2d00      	cmp	r5, #0
 80098ce:	bfa8      	it	ge
 80098d0:	6821      	ldrge	r1, [r4, #0]
 80098d2:	60a5      	str	r5, [r4, #8]
 80098d4:	bfa4      	itt	ge
 80098d6:	f021 0104 	bicge.w	r1, r1, #4
 80098da:	6021      	strge	r1, [r4, #0]
 80098dc:	b90e      	cbnz	r6, 80098e2 <_printf_i+0x11a>
 80098de:	2d00      	cmp	r5, #0
 80098e0:	d04d      	beq.n	800997e <_printf_i+0x1b6>
 80098e2:	4615      	mov	r5, r2
 80098e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80098e8:	fb03 6711 	mls	r7, r3, r1, r6
 80098ec:	5dc7      	ldrb	r7, [r0, r7]
 80098ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80098f2:	4637      	mov	r7, r6
 80098f4:	42bb      	cmp	r3, r7
 80098f6:	460e      	mov	r6, r1
 80098f8:	d9f4      	bls.n	80098e4 <_printf_i+0x11c>
 80098fa:	2b08      	cmp	r3, #8
 80098fc:	d10b      	bne.n	8009916 <_printf_i+0x14e>
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	07de      	lsls	r6, r3, #31
 8009902:	d508      	bpl.n	8009916 <_printf_i+0x14e>
 8009904:	6923      	ldr	r3, [r4, #16]
 8009906:	6861      	ldr	r1, [r4, #4]
 8009908:	4299      	cmp	r1, r3
 800990a:	bfde      	ittt	le
 800990c:	2330      	movle	r3, #48	; 0x30
 800990e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009912:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009916:	1b52      	subs	r2, r2, r5
 8009918:	6122      	str	r2, [r4, #16]
 800991a:	464b      	mov	r3, r9
 800991c:	4621      	mov	r1, r4
 800991e:	4640      	mov	r0, r8
 8009920:	f8cd a000 	str.w	sl, [sp]
 8009924:	aa03      	add	r2, sp, #12
 8009926:	f7ff fedf 	bl	80096e8 <_printf_common>
 800992a:	3001      	adds	r0, #1
 800992c:	d14c      	bne.n	80099c8 <_printf_i+0x200>
 800992e:	f04f 30ff 	mov.w	r0, #4294967295
 8009932:	b004      	add	sp, #16
 8009934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009938:	4834      	ldr	r0, [pc, #208]	; (8009a0c <_printf_i+0x244>)
 800993a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800993e:	6829      	ldr	r1, [r5, #0]
 8009940:	6823      	ldr	r3, [r4, #0]
 8009942:	f851 6b04 	ldr.w	r6, [r1], #4
 8009946:	6029      	str	r1, [r5, #0]
 8009948:	061d      	lsls	r5, r3, #24
 800994a:	d514      	bpl.n	8009976 <_printf_i+0x1ae>
 800994c:	07df      	lsls	r7, r3, #31
 800994e:	bf44      	itt	mi
 8009950:	f043 0320 	orrmi.w	r3, r3, #32
 8009954:	6023      	strmi	r3, [r4, #0]
 8009956:	b91e      	cbnz	r6, 8009960 <_printf_i+0x198>
 8009958:	6823      	ldr	r3, [r4, #0]
 800995a:	f023 0320 	bic.w	r3, r3, #32
 800995e:	6023      	str	r3, [r4, #0]
 8009960:	2310      	movs	r3, #16
 8009962:	e7af      	b.n	80098c4 <_printf_i+0xfc>
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	f043 0320 	orr.w	r3, r3, #32
 800996a:	6023      	str	r3, [r4, #0]
 800996c:	2378      	movs	r3, #120	; 0x78
 800996e:	4828      	ldr	r0, [pc, #160]	; (8009a10 <_printf_i+0x248>)
 8009970:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009974:	e7e3      	b.n	800993e <_printf_i+0x176>
 8009976:	0659      	lsls	r1, r3, #25
 8009978:	bf48      	it	mi
 800997a:	b2b6      	uxthmi	r6, r6
 800997c:	e7e6      	b.n	800994c <_printf_i+0x184>
 800997e:	4615      	mov	r5, r2
 8009980:	e7bb      	b.n	80098fa <_printf_i+0x132>
 8009982:	682b      	ldr	r3, [r5, #0]
 8009984:	6826      	ldr	r6, [r4, #0]
 8009986:	1d18      	adds	r0, r3, #4
 8009988:	6961      	ldr	r1, [r4, #20]
 800998a:	6028      	str	r0, [r5, #0]
 800998c:	0635      	lsls	r5, r6, #24
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	d501      	bpl.n	8009996 <_printf_i+0x1ce>
 8009992:	6019      	str	r1, [r3, #0]
 8009994:	e002      	b.n	800999c <_printf_i+0x1d4>
 8009996:	0670      	lsls	r0, r6, #25
 8009998:	d5fb      	bpl.n	8009992 <_printf_i+0x1ca>
 800999a:	8019      	strh	r1, [r3, #0]
 800999c:	2300      	movs	r3, #0
 800999e:	4615      	mov	r5, r2
 80099a0:	6123      	str	r3, [r4, #16]
 80099a2:	e7ba      	b.n	800991a <_printf_i+0x152>
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	2100      	movs	r1, #0
 80099a8:	1d1a      	adds	r2, r3, #4
 80099aa:	602a      	str	r2, [r5, #0]
 80099ac:	681d      	ldr	r5, [r3, #0]
 80099ae:	6862      	ldr	r2, [r4, #4]
 80099b0:	4628      	mov	r0, r5
 80099b2:	f000 f82f 	bl	8009a14 <memchr>
 80099b6:	b108      	cbz	r0, 80099bc <_printf_i+0x1f4>
 80099b8:	1b40      	subs	r0, r0, r5
 80099ba:	6060      	str	r0, [r4, #4]
 80099bc:	6863      	ldr	r3, [r4, #4]
 80099be:	6123      	str	r3, [r4, #16]
 80099c0:	2300      	movs	r3, #0
 80099c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099c6:	e7a8      	b.n	800991a <_printf_i+0x152>
 80099c8:	462a      	mov	r2, r5
 80099ca:	4649      	mov	r1, r9
 80099cc:	4640      	mov	r0, r8
 80099ce:	6923      	ldr	r3, [r4, #16]
 80099d0:	47d0      	blx	sl
 80099d2:	3001      	adds	r0, #1
 80099d4:	d0ab      	beq.n	800992e <_printf_i+0x166>
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	079b      	lsls	r3, r3, #30
 80099da:	d413      	bmi.n	8009a04 <_printf_i+0x23c>
 80099dc:	68e0      	ldr	r0, [r4, #12]
 80099de:	9b03      	ldr	r3, [sp, #12]
 80099e0:	4298      	cmp	r0, r3
 80099e2:	bfb8      	it	lt
 80099e4:	4618      	movlt	r0, r3
 80099e6:	e7a4      	b.n	8009932 <_printf_i+0x16a>
 80099e8:	2301      	movs	r3, #1
 80099ea:	4632      	mov	r2, r6
 80099ec:	4649      	mov	r1, r9
 80099ee:	4640      	mov	r0, r8
 80099f0:	47d0      	blx	sl
 80099f2:	3001      	adds	r0, #1
 80099f4:	d09b      	beq.n	800992e <_printf_i+0x166>
 80099f6:	3501      	adds	r5, #1
 80099f8:	68e3      	ldr	r3, [r4, #12]
 80099fa:	9903      	ldr	r1, [sp, #12]
 80099fc:	1a5b      	subs	r3, r3, r1
 80099fe:	42ab      	cmp	r3, r5
 8009a00:	dcf2      	bgt.n	80099e8 <_printf_i+0x220>
 8009a02:	e7eb      	b.n	80099dc <_printf_i+0x214>
 8009a04:	2500      	movs	r5, #0
 8009a06:	f104 0619 	add.w	r6, r4, #25
 8009a0a:	e7f5      	b.n	80099f8 <_printf_i+0x230>
 8009a0c:	08009d9d 	.word	0x08009d9d
 8009a10:	08009dae 	.word	0x08009dae

08009a14 <memchr>:
 8009a14:	4603      	mov	r3, r0
 8009a16:	b510      	push	{r4, lr}
 8009a18:	b2c9      	uxtb	r1, r1
 8009a1a:	4402      	add	r2, r0
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	4618      	mov	r0, r3
 8009a20:	d101      	bne.n	8009a26 <memchr+0x12>
 8009a22:	2000      	movs	r0, #0
 8009a24:	e003      	b.n	8009a2e <memchr+0x1a>
 8009a26:	7804      	ldrb	r4, [r0, #0]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	428c      	cmp	r4, r1
 8009a2c:	d1f6      	bne.n	8009a1c <memchr+0x8>
 8009a2e:	bd10      	pop	{r4, pc}

08009a30 <memcpy>:
 8009a30:	440a      	add	r2, r1
 8009a32:	4291      	cmp	r1, r2
 8009a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a38:	d100      	bne.n	8009a3c <memcpy+0xc>
 8009a3a:	4770      	bx	lr
 8009a3c:	b510      	push	{r4, lr}
 8009a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a42:	4291      	cmp	r1, r2
 8009a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a48:	d1f9      	bne.n	8009a3e <memcpy+0xe>
 8009a4a:	bd10      	pop	{r4, pc}

08009a4c <memmove>:
 8009a4c:	4288      	cmp	r0, r1
 8009a4e:	b510      	push	{r4, lr}
 8009a50:	eb01 0402 	add.w	r4, r1, r2
 8009a54:	d902      	bls.n	8009a5c <memmove+0x10>
 8009a56:	4284      	cmp	r4, r0
 8009a58:	4623      	mov	r3, r4
 8009a5a:	d807      	bhi.n	8009a6c <memmove+0x20>
 8009a5c:	1e43      	subs	r3, r0, #1
 8009a5e:	42a1      	cmp	r1, r4
 8009a60:	d008      	beq.n	8009a74 <memmove+0x28>
 8009a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a6a:	e7f8      	b.n	8009a5e <memmove+0x12>
 8009a6c:	4601      	mov	r1, r0
 8009a6e:	4402      	add	r2, r0
 8009a70:	428a      	cmp	r2, r1
 8009a72:	d100      	bne.n	8009a76 <memmove+0x2a>
 8009a74:	bd10      	pop	{r4, pc}
 8009a76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a7e:	e7f7      	b.n	8009a70 <memmove+0x24>

08009a80 <_free_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4605      	mov	r5, r0
 8009a84:	2900      	cmp	r1, #0
 8009a86:	d040      	beq.n	8009b0a <_free_r+0x8a>
 8009a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a8c:	1f0c      	subs	r4, r1, #4
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	bfb8      	it	lt
 8009a92:	18e4      	addlt	r4, r4, r3
 8009a94:	f000 f910 	bl	8009cb8 <__malloc_lock>
 8009a98:	4a1c      	ldr	r2, [pc, #112]	; (8009b0c <_free_r+0x8c>)
 8009a9a:	6813      	ldr	r3, [r2, #0]
 8009a9c:	b933      	cbnz	r3, 8009aac <_free_r+0x2c>
 8009a9e:	6063      	str	r3, [r4, #4]
 8009aa0:	6014      	str	r4, [r2, #0]
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009aa8:	f000 b90c 	b.w	8009cc4 <__malloc_unlock>
 8009aac:	42a3      	cmp	r3, r4
 8009aae:	d908      	bls.n	8009ac2 <_free_r+0x42>
 8009ab0:	6820      	ldr	r0, [r4, #0]
 8009ab2:	1821      	adds	r1, r4, r0
 8009ab4:	428b      	cmp	r3, r1
 8009ab6:	bf01      	itttt	eq
 8009ab8:	6819      	ldreq	r1, [r3, #0]
 8009aba:	685b      	ldreq	r3, [r3, #4]
 8009abc:	1809      	addeq	r1, r1, r0
 8009abe:	6021      	streq	r1, [r4, #0]
 8009ac0:	e7ed      	b.n	8009a9e <_free_r+0x1e>
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	b10b      	cbz	r3, 8009acc <_free_r+0x4c>
 8009ac8:	42a3      	cmp	r3, r4
 8009aca:	d9fa      	bls.n	8009ac2 <_free_r+0x42>
 8009acc:	6811      	ldr	r1, [r2, #0]
 8009ace:	1850      	adds	r0, r2, r1
 8009ad0:	42a0      	cmp	r0, r4
 8009ad2:	d10b      	bne.n	8009aec <_free_r+0x6c>
 8009ad4:	6820      	ldr	r0, [r4, #0]
 8009ad6:	4401      	add	r1, r0
 8009ad8:	1850      	adds	r0, r2, r1
 8009ada:	4283      	cmp	r3, r0
 8009adc:	6011      	str	r1, [r2, #0]
 8009ade:	d1e0      	bne.n	8009aa2 <_free_r+0x22>
 8009ae0:	6818      	ldr	r0, [r3, #0]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	4401      	add	r1, r0
 8009ae6:	6011      	str	r1, [r2, #0]
 8009ae8:	6053      	str	r3, [r2, #4]
 8009aea:	e7da      	b.n	8009aa2 <_free_r+0x22>
 8009aec:	d902      	bls.n	8009af4 <_free_r+0x74>
 8009aee:	230c      	movs	r3, #12
 8009af0:	602b      	str	r3, [r5, #0]
 8009af2:	e7d6      	b.n	8009aa2 <_free_r+0x22>
 8009af4:	6820      	ldr	r0, [r4, #0]
 8009af6:	1821      	adds	r1, r4, r0
 8009af8:	428b      	cmp	r3, r1
 8009afa:	bf01      	itttt	eq
 8009afc:	6819      	ldreq	r1, [r3, #0]
 8009afe:	685b      	ldreq	r3, [r3, #4]
 8009b00:	1809      	addeq	r1, r1, r0
 8009b02:	6021      	streq	r1, [r4, #0]
 8009b04:	6063      	str	r3, [r4, #4]
 8009b06:	6054      	str	r4, [r2, #4]
 8009b08:	e7cb      	b.n	8009aa2 <_free_r+0x22>
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}
 8009b0c:	20001378 	.word	0x20001378

08009b10 <sbrk_aligned>:
 8009b10:	b570      	push	{r4, r5, r6, lr}
 8009b12:	4e0e      	ldr	r6, [pc, #56]	; (8009b4c <sbrk_aligned+0x3c>)
 8009b14:	460c      	mov	r4, r1
 8009b16:	6831      	ldr	r1, [r6, #0]
 8009b18:	4605      	mov	r5, r0
 8009b1a:	b911      	cbnz	r1, 8009b22 <sbrk_aligned+0x12>
 8009b1c:	f000 f8bc 	bl	8009c98 <_sbrk_r>
 8009b20:	6030      	str	r0, [r6, #0]
 8009b22:	4621      	mov	r1, r4
 8009b24:	4628      	mov	r0, r5
 8009b26:	f000 f8b7 	bl	8009c98 <_sbrk_r>
 8009b2a:	1c43      	adds	r3, r0, #1
 8009b2c:	d00a      	beq.n	8009b44 <sbrk_aligned+0x34>
 8009b2e:	1cc4      	adds	r4, r0, #3
 8009b30:	f024 0403 	bic.w	r4, r4, #3
 8009b34:	42a0      	cmp	r0, r4
 8009b36:	d007      	beq.n	8009b48 <sbrk_aligned+0x38>
 8009b38:	1a21      	subs	r1, r4, r0
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	f000 f8ac 	bl	8009c98 <_sbrk_r>
 8009b40:	3001      	adds	r0, #1
 8009b42:	d101      	bne.n	8009b48 <sbrk_aligned+0x38>
 8009b44:	f04f 34ff 	mov.w	r4, #4294967295
 8009b48:	4620      	mov	r0, r4
 8009b4a:	bd70      	pop	{r4, r5, r6, pc}
 8009b4c:	2000137c 	.word	0x2000137c

08009b50 <_malloc_r>:
 8009b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b54:	1ccd      	adds	r5, r1, #3
 8009b56:	f025 0503 	bic.w	r5, r5, #3
 8009b5a:	3508      	adds	r5, #8
 8009b5c:	2d0c      	cmp	r5, #12
 8009b5e:	bf38      	it	cc
 8009b60:	250c      	movcc	r5, #12
 8009b62:	2d00      	cmp	r5, #0
 8009b64:	4607      	mov	r7, r0
 8009b66:	db01      	blt.n	8009b6c <_malloc_r+0x1c>
 8009b68:	42a9      	cmp	r1, r5
 8009b6a:	d905      	bls.n	8009b78 <_malloc_r+0x28>
 8009b6c:	230c      	movs	r3, #12
 8009b6e:	2600      	movs	r6, #0
 8009b70:	603b      	str	r3, [r7, #0]
 8009b72:	4630      	mov	r0, r6
 8009b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b78:	4e2e      	ldr	r6, [pc, #184]	; (8009c34 <_malloc_r+0xe4>)
 8009b7a:	f000 f89d 	bl	8009cb8 <__malloc_lock>
 8009b7e:	6833      	ldr	r3, [r6, #0]
 8009b80:	461c      	mov	r4, r3
 8009b82:	bb34      	cbnz	r4, 8009bd2 <_malloc_r+0x82>
 8009b84:	4629      	mov	r1, r5
 8009b86:	4638      	mov	r0, r7
 8009b88:	f7ff ffc2 	bl	8009b10 <sbrk_aligned>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	4604      	mov	r4, r0
 8009b90:	d14d      	bne.n	8009c2e <_malloc_r+0xde>
 8009b92:	6834      	ldr	r4, [r6, #0]
 8009b94:	4626      	mov	r6, r4
 8009b96:	2e00      	cmp	r6, #0
 8009b98:	d140      	bne.n	8009c1c <_malloc_r+0xcc>
 8009b9a:	6823      	ldr	r3, [r4, #0]
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	eb04 0803 	add.w	r8, r4, r3
 8009ba4:	f000 f878 	bl	8009c98 <_sbrk_r>
 8009ba8:	4580      	cmp	r8, r0
 8009baa:	d13a      	bne.n	8009c22 <_malloc_r+0xd2>
 8009bac:	6821      	ldr	r1, [r4, #0]
 8009bae:	3503      	adds	r5, #3
 8009bb0:	1a6d      	subs	r5, r5, r1
 8009bb2:	f025 0503 	bic.w	r5, r5, #3
 8009bb6:	3508      	adds	r5, #8
 8009bb8:	2d0c      	cmp	r5, #12
 8009bba:	bf38      	it	cc
 8009bbc:	250c      	movcc	r5, #12
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	f7ff ffa5 	bl	8009b10 <sbrk_aligned>
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	d02b      	beq.n	8009c22 <_malloc_r+0xd2>
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	442b      	add	r3, r5
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	e00e      	b.n	8009bf0 <_malloc_r+0xa0>
 8009bd2:	6822      	ldr	r2, [r4, #0]
 8009bd4:	1b52      	subs	r2, r2, r5
 8009bd6:	d41e      	bmi.n	8009c16 <_malloc_r+0xc6>
 8009bd8:	2a0b      	cmp	r2, #11
 8009bda:	d916      	bls.n	8009c0a <_malloc_r+0xba>
 8009bdc:	1961      	adds	r1, r4, r5
 8009bde:	42a3      	cmp	r3, r4
 8009be0:	6025      	str	r5, [r4, #0]
 8009be2:	bf18      	it	ne
 8009be4:	6059      	strne	r1, [r3, #4]
 8009be6:	6863      	ldr	r3, [r4, #4]
 8009be8:	bf08      	it	eq
 8009bea:	6031      	streq	r1, [r6, #0]
 8009bec:	5162      	str	r2, [r4, r5]
 8009bee:	604b      	str	r3, [r1, #4]
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	f104 060b 	add.w	r6, r4, #11
 8009bf6:	f000 f865 	bl	8009cc4 <__malloc_unlock>
 8009bfa:	f026 0607 	bic.w	r6, r6, #7
 8009bfe:	1d23      	adds	r3, r4, #4
 8009c00:	1af2      	subs	r2, r6, r3
 8009c02:	d0b6      	beq.n	8009b72 <_malloc_r+0x22>
 8009c04:	1b9b      	subs	r3, r3, r6
 8009c06:	50a3      	str	r3, [r4, r2]
 8009c08:	e7b3      	b.n	8009b72 <_malloc_r+0x22>
 8009c0a:	6862      	ldr	r2, [r4, #4]
 8009c0c:	42a3      	cmp	r3, r4
 8009c0e:	bf0c      	ite	eq
 8009c10:	6032      	streq	r2, [r6, #0]
 8009c12:	605a      	strne	r2, [r3, #4]
 8009c14:	e7ec      	b.n	8009bf0 <_malloc_r+0xa0>
 8009c16:	4623      	mov	r3, r4
 8009c18:	6864      	ldr	r4, [r4, #4]
 8009c1a:	e7b2      	b.n	8009b82 <_malloc_r+0x32>
 8009c1c:	4634      	mov	r4, r6
 8009c1e:	6876      	ldr	r6, [r6, #4]
 8009c20:	e7b9      	b.n	8009b96 <_malloc_r+0x46>
 8009c22:	230c      	movs	r3, #12
 8009c24:	4638      	mov	r0, r7
 8009c26:	603b      	str	r3, [r7, #0]
 8009c28:	f000 f84c 	bl	8009cc4 <__malloc_unlock>
 8009c2c:	e7a1      	b.n	8009b72 <_malloc_r+0x22>
 8009c2e:	6025      	str	r5, [r4, #0]
 8009c30:	e7de      	b.n	8009bf0 <_malloc_r+0xa0>
 8009c32:	bf00      	nop
 8009c34:	20001378 	.word	0x20001378

08009c38 <_realloc_r>:
 8009c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3c:	4680      	mov	r8, r0
 8009c3e:	4614      	mov	r4, r2
 8009c40:	460e      	mov	r6, r1
 8009c42:	b921      	cbnz	r1, 8009c4e <_realloc_r+0x16>
 8009c44:	4611      	mov	r1, r2
 8009c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c4a:	f7ff bf81 	b.w	8009b50 <_malloc_r>
 8009c4e:	b92a      	cbnz	r2, 8009c5c <_realloc_r+0x24>
 8009c50:	f7ff ff16 	bl	8009a80 <_free_r>
 8009c54:	4625      	mov	r5, r4
 8009c56:	4628      	mov	r0, r5
 8009c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c5c:	f000 f838 	bl	8009cd0 <_malloc_usable_size_r>
 8009c60:	4284      	cmp	r4, r0
 8009c62:	4607      	mov	r7, r0
 8009c64:	d802      	bhi.n	8009c6c <_realloc_r+0x34>
 8009c66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c6a:	d812      	bhi.n	8009c92 <_realloc_r+0x5a>
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	4640      	mov	r0, r8
 8009c70:	f7ff ff6e 	bl	8009b50 <_malloc_r>
 8009c74:	4605      	mov	r5, r0
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d0ed      	beq.n	8009c56 <_realloc_r+0x1e>
 8009c7a:	42bc      	cmp	r4, r7
 8009c7c:	4622      	mov	r2, r4
 8009c7e:	4631      	mov	r1, r6
 8009c80:	bf28      	it	cs
 8009c82:	463a      	movcs	r2, r7
 8009c84:	f7ff fed4 	bl	8009a30 <memcpy>
 8009c88:	4631      	mov	r1, r6
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	f7ff fef8 	bl	8009a80 <_free_r>
 8009c90:	e7e1      	b.n	8009c56 <_realloc_r+0x1e>
 8009c92:	4635      	mov	r5, r6
 8009c94:	e7df      	b.n	8009c56 <_realloc_r+0x1e>
	...

08009c98 <_sbrk_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	4d05      	ldr	r5, [pc, #20]	; (8009cb4 <_sbrk_r+0x1c>)
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	4608      	mov	r0, r1
 8009ca2:	602b      	str	r3, [r5, #0]
 8009ca4:	f7f6 fb90 	bl	80003c8 <_sbrk>
 8009ca8:	1c43      	adds	r3, r0, #1
 8009caa:	d102      	bne.n	8009cb2 <_sbrk_r+0x1a>
 8009cac:	682b      	ldr	r3, [r5, #0]
 8009cae:	b103      	cbz	r3, 8009cb2 <_sbrk_r+0x1a>
 8009cb0:	6023      	str	r3, [r4, #0]
 8009cb2:	bd38      	pop	{r3, r4, r5, pc}
 8009cb4:	20001380 	.word	0x20001380

08009cb8 <__malloc_lock>:
 8009cb8:	4801      	ldr	r0, [pc, #4]	; (8009cc0 <__malloc_lock+0x8>)
 8009cba:	f000 b811 	b.w	8009ce0 <__retarget_lock_acquire_recursive>
 8009cbe:	bf00      	nop
 8009cc0:	20001384 	.word	0x20001384

08009cc4 <__malloc_unlock>:
 8009cc4:	4801      	ldr	r0, [pc, #4]	; (8009ccc <__malloc_unlock+0x8>)
 8009cc6:	f000 b80c 	b.w	8009ce2 <__retarget_lock_release_recursive>
 8009cca:	bf00      	nop
 8009ccc:	20001384 	.word	0x20001384

08009cd0 <_malloc_usable_size_r>:
 8009cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cd4:	1f18      	subs	r0, r3, #4
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	bfbc      	itt	lt
 8009cda:	580b      	ldrlt	r3, [r1, r0]
 8009cdc:	18c0      	addlt	r0, r0, r3
 8009cde:	4770      	bx	lr

08009ce0 <__retarget_lock_acquire_recursive>:
 8009ce0:	4770      	bx	lr

08009ce2 <__retarget_lock_release_recursive>:
 8009ce2:	4770      	bx	lr

08009ce4 <_init>:
 8009ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce6:	bf00      	nop
 8009ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cea:	bc08      	pop	{r3}
 8009cec:	469e      	mov	lr, r3
 8009cee:	4770      	bx	lr

08009cf0 <_fini>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	bf00      	nop
 8009cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cf6:	bc08      	pop	{r3}
 8009cf8:	469e      	mov	lr, r3
 8009cfa:	4770      	bx	lr
