
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008654  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008760  08008760  00018760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008810  08008810  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08008810  08008810  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008810  08008810  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008810  08008810  00018810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008814  08008814  00018814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001014  200001ec  08008a04  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001200  08008a04  00021200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d23b  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e51  00000000  00000000  0002d450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  000302a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  00030e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b00b  00000000  00000000  00031820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001417f  00000000  00000000  0004c82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085200  00000000  00000000  000609aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5baa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ef8  00000000  00000000  000e5bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001ec 	.word	0x200001ec
 8000128:	00000000 	.word	0x00000000
 800012c:	08008748 	.word	0x08008748

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f0 	.word	0x200001f0
 8000148:	08008748 	.word	0x08008748

0800014c <apInit>:

#include "ap.h"


void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 57600);
 8000150:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fa61 	bl	800061c <uartOpen>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
	...

08000160 <apMain>:

void apMain(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = miliis();
 8000166:	f000 f890 	bl	800028a <miliis>
 800016a:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (miliis() - pre_time >= 500)
 800016c:	f000 f88d 	bl	800028a <miliis>
 8000170:	4602      	mov	r2, r0
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	1ad3      	subs	r3, r2, r3
 8000176:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800017a:	d305      	bcc.n	8000188 <apMain+0x28>
    {
      pre_time = miliis();
 800017c:	f000 f885 	bl	800028a <miliis>
 8000180:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
 8000182:	2000      	movs	r0, #0
 8000184:	f000 fa14 	bl	80005b0 <ledToggle>
    }

    if(uartAvailable(_DEF_UART1) > 0)
 8000188:	2000      	movs	r0, #0
 800018a:	f000 fa61 	bl	8000650 <uartAvailable>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d0eb      	beq.n	800016c <apMain+0xc>
    {
      uint8_t rx_data;

      rx_data = uartRead(_DEF_UART1);
 8000194:	2000      	movs	r0, #0
 8000196:	f000 fa6e 	bl	8000676 <uartRead>
 800019a:	4603      	mov	r3, r0
 800019c:	70fb      	strb	r3, [r7, #3]

      uartPrintf(_DEF_UART1, "RxData : %c 0x%X\n", rx_data, rx_data);
 800019e:	78fa      	ldrb	r2, [r7, #3]
 80001a0:	78fb      	ldrb	r3, [r7, #3]
 80001a2:	4902      	ldr	r1, [pc, #8]	; (80001ac <apMain+0x4c>)
 80001a4:	2000      	movs	r0, #0
 80001a6:	f000 fa91 	bl	80006cc <uartPrintf>
    if (miliis() - pre_time >= 500)
 80001aa:	e7df      	b.n	800016c <apMain+0xc>
 80001ac:	08008760 	.word	0x08008760

080001b0 <bspInit>:
#include "usb_device.h"

void SystemClock_Config(void);

void bspInit(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b088      	sub	sp, #32
 80001b4:	af00      	add	r7, sp, #0
  HAL_Init();
 80001b6:	f000 facb 	bl	8000750 <HAL_Init>

  SystemClock_Config();
 80001ba:	f000 f86d 	bl	8000298 <SystemClock_Config>

  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001be:	4b2b      	ldr	r3, [pc, #172]	; (800026c <bspInit+0xbc>)
 80001c0:	699b      	ldr	r3, [r3, #24]
 80001c2:	4a2a      	ldr	r2, [pc, #168]	; (800026c <bspInit+0xbc>)
 80001c4:	f043 0320 	orr.w	r3, r3, #32
 80001c8:	6193      	str	r3, [r2, #24]
 80001ca:	4b28      	ldr	r3, [pc, #160]	; (800026c <bspInit+0xbc>)
 80001cc:	699b      	ldr	r3, [r3, #24]
 80001ce:	f003 0320 	and.w	r3, r3, #32
 80001d2:	60fb      	str	r3, [r7, #12]
 80001d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d6:	4b25      	ldr	r3, [pc, #148]	; (800026c <bspInit+0xbc>)
 80001d8:	699b      	ldr	r3, [r3, #24]
 80001da:	4a24      	ldr	r2, [pc, #144]	; (800026c <bspInit+0xbc>)
 80001dc:	f043 0304 	orr.w	r3, r3, #4
 80001e0:	6193      	str	r3, [r2, #24]
 80001e2:	4b22      	ldr	r3, [pc, #136]	; (800026c <bspInit+0xbc>)
 80001e4:	699b      	ldr	r3, [r3, #24]
 80001e6:	f003 0304 	and.w	r3, r3, #4
 80001ea:	60bb      	str	r3, [r7, #8]
 80001ec:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ee:	f107 0310 	add.w	r3, r7, #16
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001fc:	4b1b      	ldr	r3, [pc, #108]	; (800026c <bspInit+0xbc>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	4a1a      	ldr	r2, [pc, #104]	; (800026c <bspInit+0xbc>)
 8000202:	f043 0308 	orr.w	r3, r3, #8
 8000206:	6193      	str	r3, [r2, #24]
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <bspInit+0xbc>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	f003 0308 	and.w	r3, r3, #8
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800021a:	2311      	movs	r3, #17
 800021c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800021e:	2300      	movs	r3, #0
 8000220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000222:	2302      	movs	r3, #2
 8000224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000226:	f107 0310 	add.w	r3, r7, #16
 800022a:	4619      	mov	r1, r3
 800022c:	4810      	ldr	r0, [pc, #64]	; (8000270 <bspInit+0xc0>)
 800022e:	f000 fc23 	bl	8000a78 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000232:	2200      	movs	r2, #0
 8000234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000238:	480d      	ldr	r0, [pc, #52]	; (8000270 <bspInit+0xc0>)
 800023a:	f000 fda1 	bl	8000d80 <HAL_GPIO_WritePin>
  delay(100);
 800023e:	2064      	movs	r0, #100	; 0x64
 8000240:	f000 f818 	bl	8000274 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000244:	2201      	movs	r2, #1
 8000246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800024a:	4809      	ldr	r0, [pc, #36]	; (8000270 <bspInit+0xc0>)
 800024c:	f000 fd98 	bl	8000d80 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000250:	2300      	movs	r3, #0
 8000252:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000254:	f107 0310 	add.w	r3, r7, #16
 8000258:	4619      	mov	r1, r3
 800025a:	4805      	ldr	r0, [pc, #20]	; (8000270 <bspInit+0xc0>)
 800025c:	f000 fc0c 	bl	8000a78 <HAL_GPIO_Init>

  MX_USB_DEVICE_Init();
 8000260:	f007 f85c 	bl	800731c <MX_USB_DEVICE_Init>
}
 8000264:	bf00      	nop
 8000266:	3720      	adds	r7, #32
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40021000 	.word	0x40021000
 8000270:	40010800 	.word	0x40010800

08000274 <delay>:

void delay(uint32_t ms)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800027c:	6878      	ldr	r0, [r7, #4]
 800027e:	f000 fac9 	bl	8000814 <HAL_Delay>
}
 8000282:	bf00      	nop
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}

0800028a <miliis>:

uint32_t miliis(void)
{
 800028a:	b580      	push	{r7, lr}
 800028c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800028e:	f000 fab7 	bl	8000800 <HAL_GetTick>
 8000292:	4603      	mov	r3, r0
}
 8000294:	4618      	mov	r0, r3
 8000296:	bd80      	pop	{r7, pc}

08000298 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b094      	sub	sp, #80	; 0x50
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a2:	2228      	movs	r2, #40	; 0x28
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f007 fdb2 	bl	8007e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ac:	f107 0314 	add.w	r3, r7, #20
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c8:	2301      	movs	r3, #1
 80002ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d6:	2301      	movs	r3, #1
 80002d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002da:	2302      	movs	r3, #2
 80002dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 fa3a 	bl	8002768 <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002fa:	f000 f827 	bl	800034c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000302:	2302      	movs	r3, #2
 8000304:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	2102      	movs	r1, #2
 800031a:	4618      	mov	r0, r3
 800031c:	f002 fca6 	bl	8002c6c <HAL_RCC_ClockConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000326:	f000 f811 	bl	800034c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800032a:	2310      	movs	r3, #16
 800032c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800032e:	2300      	movs	r3, #0
 8000330:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f002 fdff 	bl	8002f38 <HAL_RCCEx_PeriphCLKConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000340:	f000 f804 	bl	800034c <Error_Handler>
  }
}
 8000344:	bf00      	nop
 8000346:	3750      	adds	r7, #80	; 0x50
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000350:	b672      	cpsid	i
}
 8000352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000354:	e7fe      	b.n	8000354 <Error_Handler+0x8>
	...

08000358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <HAL_MspInit+0x5c>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <HAL_MspInit+0x5c>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6193      	str	r3, [r2, #24]
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <HAL_MspInit+0x5c>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	60bb      	str	r3, [r7, #8]
 8000374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <HAL_MspInit+0x5c>)
 8000378:	69db      	ldr	r3, [r3, #28]
 800037a:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <HAL_MspInit+0x5c>)
 800037c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000380:	61d3      	str	r3, [r2, #28]
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <HAL_MspInit+0x5c>)
 8000384:	69db      	ldr	r3, [r3, #28]
 8000386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800038e:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <HAL_MspInit+0x60>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <HAL_MspInit+0x60>)
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003aa:	bf00      	nop
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40010000 	.word	0x40010000

080003bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003c0:	e7fe      	b.n	80003c0 <NMI_Handler+0x4>

080003c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <HardFault_Handler+0x4>

080003c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003cc:	e7fe      	b.n	80003cc <MemManage_Handler+0x4>

080003ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003d2:	e7fe      	b.n	80003d2 <BusFault_Handler+0x4>

080003d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <UsageFault_Handler+0x4>

080003da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr

080003e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr

080003f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr

080003fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000402:	f000 f9eb 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000410:	4802      	ldr	r0, [pc, #8]	; (800041c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000412:	f000 fe17 	bl	8001044 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000ce4 	.word	0x20000ce4

08000420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000428:	4a14      	ldr	r2, [pc, #80]	; (800047c <_sbrk+0x5c>)
 800042a:	4b15      	ldr	r3, [pc, #84]	; (8000480 <_sbrk+0x60>)
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <_sbrk+0x64>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d102      	bne.n	8000442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <_sbrk+0x64>)
 800043e:	4a12      	ldr	r2, [pc, #72]	; (8000488 <_sbrk+0x68>)
 8000440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <_sbrk+0x64>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4413      	add	r3, r2
 800044a:	693a      	ldr	r2, [r7, #16]
 800044c:	429a      	cmp	r2, r3
 800044e:	d207      	bcs.n	8000460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000450:	f007 fcb4 	bl	8007dbc <__errno>
 8000454:	4603      	mov	r3, r0
 8000456:	220c      	movs	r2, #12
 8000458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800045a:	f04f 33ff 	mov.w	r3, #4294967295
 800045e:	e009      	b.n	8000474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <_sbrk+0x64>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000466:	4b07      	ldr	r3, [pc, #28]	; (8000484 <_sbrk+0x64>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	4a05      	ldr	r2, [pc, #20]	; (8000484 <_sbrk+0x64>)
 8000470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000472:	68fb      	ldr	r3, [r7, #12]
}
 8000474:	4618      	mov	r0, r3
 8000476:	3718      	adds	r7, #24
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20005000 	.word	0x20005000
 8000480:	00000400 	.word	0x00000400
 8000484:	20000208 	.word	0x20000208
 8000488:	20001200 	.word	0x20001200

0800048c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800049a:	490d      	ldr	r1, [pc, #52]	; (80004d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800049c:	4a0d      	ldr	r2, [pc, #52]	; (80004d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a0:	e002      	b.n	80004a8 <LoopCopyDataInit>

080004a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a6:	3304      	adds	r3, #4

080004a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ac:	d3f9      	bcc.n	80004a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004b0:	4c0a      	ldr	r4, [pc, #40]	; (80004dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b4:	e001      	b.n	80004ba <LoopFillZerobss>

080004b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b8:	3204      	adds	r2, #4

080004ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004bc:	d3fb      	bcc.n	80004b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004be:	f7ff ffe5 	bl	800048c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004c2:	f007 fc81 	bl	8007dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004c6:	f007 fc6d 	bl	8007da4 <main>
  bx lr
 80004ca:	4770      	bx	lr
  ldr r0, =_sdata
 80004cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80004d4:	08008818 	.word	0x08008818
  ldr r2, =_sbss
 80004d8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80004dc:	20001200 	.word	0x20001200

080004e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e0:	e7fe      	b.n	80004e0 <ADC1_2_IRQHandler>
	...

080004e4 <ledInit>:
    {
        {GPIOB, GPIO_PIN_12, GPIO_PIN_RESET, GPIO_PIN_SET},
    };

bool ledInit(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
  bool ret = true;
 80004ea:	2301      	movs	r3, #1
 80004ec:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 0308 	add.w	r3, r7, #8
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fc:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <ledInit+0x84>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a19      	ldr	r2, [pc, #100]	; (8000568 <ledInit+0x84>)
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b17      	ldr	r3, [pc, #92]	; (8000568 <ledInit+0x84>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0308 	and.w	r3, r3, #8
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB12 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000514:	2301      	movs	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051c:	2302      	movs	r3, #2
 800051e:	617b      	str	r3, [r7, #20]

  for ( int i = 0; i < LED_MAX_CH; i ++)
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
 8000524:	e017      	b.n	8000556 <ledInit+0x72>
  {
    GPIO_InitStruct.Pin =led_tbl[i].pin;
 8000526:	4a11      	ldr	r2, [pc, #68]	; (800056c <ledInit+0x88>)
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	00db      	lsls	r3, r3, #3
 800052c:	4413      	add	r3, r2
 800052e:	889b      	ldrh	r3, [r3, #4]
 8000530:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <ledInit+0x88>)
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800053a:	f107 0208 	add.w	r2, r7, #8
 800053e:	4611      	mov	r1, r2
 8000540:	4618      	mov	r0, r3
 8000542:	f000 fa99 	bl	8000a78 <HAL_GPIO_Init>
    ledOff(i);
 8000546:	69fb      	ldr	r3, [r7, #28]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f810 	bl	8000570 <ledOff>
  for ( int i = 0; i < LED_MAX_CH; i ++)
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	3301      	adds	r3, #1
 8000554:	61fb      	str	r3, [r7, #28]
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	2b00      	cmp	r3, #0
 800055a:	dde4      	ble.n	8000526 <ledInit+0x42>
  }

  return ret;
 800055c:	7efb      	ldrb	r3, [r7, #27]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3720      	adds	r7, #32
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000
 800056c:	20000004 	.word	0x20000004

08000570 <ledOff>:
  if ( ch >= LED_MAX_CH ) return;
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  if ( ch >= LED_MAX_CH ) return;
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d111      	bne.n	80005a4 <ledOff+0x34>
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <ledOff+0x3c>)
 8000584:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	4a08      	ldr	r2, [pc, #32]	; (80005ac <ledOff+0x3c>)
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	4413      	add	r3, r2
 8000590:	8899      	ldrh	r1, [r3, #4]
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4a05      	ldr	r2, [pc, #20]	; (80005ac <ledOff+0x3c>)
 8000596:	00db      	lsls	r3, r3, #3
 8000598:	4413      	add	r3, r2
 800059a:	79db      	ldrb	r3, [r3, #7]
 800059c:	461a      	mov	r2, r3
 800059e:	f000 fbef 	bl	8000d80 <HAL_GPIO_WritePin>
 80005a2:	e000      	b.n	80005a6 <ledOff+0x36>
  if ( ch >= LED_MAX_CH ) return;
 80005a4:	bf00      	nop
}
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000004 	.word	0x20000004

080005b0 <ledToggle>:

void ledToggle(uint8_t ch)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
  if ( ch >= LED_MAX_CH ) return;
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d10d      	bne.n	80005dc <ledToggle+0x2c>
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <ledToggle+0x34>)
 80005c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	4906      	ldr	r1, [pc, #24]	; (80005e4 <ledToggle+0x34>)
 80005cc:	00db      	lsls	r3, r3, #3
 80005ce:	440b      	add	r3, r1
 80005d0:	889b      	ldrh	r3, [r3, #4]
 80005d2:	4619      	mov	r1, r3
 80005d4:	4610      	mov	r0, r2
 80005d6:	f000 fbeb 	bl	8000db0 <HAL_GPIO_TogglePin>
 80005da:	e000      	b.n	80005de <ledToggle+0x2e>
  if ( ch >= LED_MAX_CH ) return;
 80005dc:	bf00      	nop
}
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000004 	.word	0x20000004

080005e8 <uartInit>:
extern void cdcDataIn(uint8_t rx_data);
extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);


bool uartInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
  for( int i = 0; i < UART_MAX_CH; i++)
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	e007      	b.n	8000604 <uartInit+0x1c>
  {
    is_open[i] = false;
 80005f4:	4a08      	ldr	r2, [pc, #32]	; (8000618 <uartInit+0x30>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
  for( int i = 0; i < UART_MAX_CH; i++)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	3301      	adds	r3, #1
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	ddf4      	ble.n	80005f4 <uartInit+0xc>
  }

  return true;
 800060a:	2301      	movs	r3, #1
}
 800060c:	4618      	mov	r0, r3
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	2000020c 	.word	0x2000020c

0800061c <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	6039      	str	r1, [r7, #0]
 8000626:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d106      	bne.n	8000640 <uartOpen+0x24>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	4a05      	ldr	r2, [pc, #20]	; (800064c <uartOpen+0x30>)
 8000636:	2101      	movs	r1, #1
 8000638:	54d1      	strb	r1, [r2, r3]
      ret = true;
 800063a:	2301      	movs	r3, #1
 800063c:	73fb      	strb	r3, [r7, #15]
      break;
 800063e:	bf00      	nop
  }

  return ret;
 8000640:	7bfb      	ldrb	r3, [r7, #15]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	2000020c 	.word	0x2000020c

08000650 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d103      	bne.n	800066c <uartAvailable+0x1c>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 8000664:	f006 fe8a 	bl	800737c <cdcAvailable>
 8000668:	60f8      	str	r0, [r7, #12]
      break;
 800066a:	bf00      	nop
  }
  return ret;
 800066c:	68fb      	ldr	r3, [r7, #12]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b084      	sub	sp, #16
 800067a:	af00      	add	r7, sp, #0
 800067c:	4603      	mov	r3, r0
 800067e:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d104      	bne.n	8000694 <uartRead+0x1e>
  {
    case _DEF_UART1:
      ret = cdcRead();
 800068a:	f006 fe93 	bl	80073b4 <cdcRead>
 800068e:	4603      	mov	r3, r0
 8000690:	73fb      	strb	r3, [r7, #15]
      break;
 8000692:	bf00      	nop
  }

  return ret;
 8000694:	7bfb      	ldrb	r3, [r7, #15]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b086      	sub	sp, #24
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	4603      	mov	r3, r0
 80006a6:	60b9      	str	r1, [r7, #8]
 80006a8:	607a      	str	r2, [r7, #4]
 80006aa:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]

  switch(ch)
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d105      	bne.n	80006c2 <uartWrite+0x24>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	68b8      	ldr	r0, [r7, #8]
 80006ba:	f006 fecd 	bl	8007458 <cdcWrite>
 80006be:	6178      	str	r0, [r7, #20]
      break;
 80006c0:	bf00      	nop
  }

  return ret;
 80006c2:	697b      	ldr	r3, [r7, #20]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80006cc:	b40e      	push	{r1, r2, r3}
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b0c7      	sub	sp, #284	; 0x11c
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	4602      	mov	r2, r0
 80006d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80006da:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80006de:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 80006e0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80006e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80006e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80006ec:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 80006ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80006f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80006f6:	f107 0010 	add.w	r0, r7, #16
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000704:	f007 fbb8 	bl	8007e78 <vsniprintf>
 8000708:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800070c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000710:	f107 0110 	add.w	r1, r7, #16
 8000714:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000718:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ffbd 	bl	800069e <uartWrite>
 8000724:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8000728:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800072c:	4618      	mov	r0, r3
 800072e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000732:	46bd      	mov	sp, r7
 8000734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000738:	b003      	add	sp, #12
 800073a:	4770      	bx	lr

0800073c <hwInit>:


#include "hw.h"

void hwInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  bspInit();
 8000740:	f7ff fd36 	bl	80001b0 <bspInit>

  ledInit();
 8000744:	f7ff fece 	bl	80004e4 <ledInit>

  uartInit();
 8000748:	f7ff ff4e 	bl	80005e8 <uartInit>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <HAL_Init+0x28>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a07      	ldr	r2, [pc, #28]	; (8000778 <HAL_Init+0x28>)
 800075a:	f043 0310 	orr.w	r3, r3, #16
 800075e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f947 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000766:	2000      	movs	r0, #0
 8000768:	f000 f808 	bl	800077c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800076c:	f7ff fdf4 	bl	8000358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40022000 	.word	0x40022000

0800077c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_InitTick+0x54>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_InitTick+0x58>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000792:	fbb3 f3f1 	udiv	r3, r3, r1
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f95f 	bl	8000a5e <HAL_SYSTICK_Config>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00e      	b.n	80007c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	d80a      	bhi.n	80007c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b0:	2200      	movs	r2, #0
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f000 f927 	bl	8000a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007bc:	4a06      	ldr	r2, [pc, #24]	; (80007d8 <HAL_InitTick+0x5c>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e000      	b.n	80007c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000010 	.word	0x20000010
 80007d8:	2000000c 	.word	0x2000000c

080007dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_IncTick+0x1c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_IncTick+0x20>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a03      	ldr	r2, [pc, #12]	; (80007fc <HAL_IncTick+0x20>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	20000010 	.word	0x20000010
 80007fc:	20000210 	.word	0x20000210

08000800 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  return uwTick;
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <HAL_GetTick+0x10>)
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	20000210 	.word	0x20000210

08000814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800081c:	f7ff fff0 	bl	8000800 <HAL_GetTick>
 8000820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800082c:	d005      	beq.n	800083a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_Delay+0x44>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4413      	add	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800083a:	bf00      	nop
 800083c:	f7ff ffe0 	bl	8000800 <HAL_GetTick>
 8000840:	4602      	mov	r2, r0
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	429a      	cmp	r2, r3
 800084a:	d8f7      	bhi.n	800083c <HAL_Delay+0x28>
  {
  }
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000010 	.word	0x20000010

0800085c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <__NVIC_SetPriorityGrouping+0x44>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000878:	4013      	ands	r3, r2
 800087a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088e:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	60d3      	str	r3, [r2, #12]
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <__NVIC_GetPriorityGrouping+0x18>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	f003 0307 	and.w	r3, r3, #7
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	db0b      	blt.n	80008ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	f003 021f 	and.w	r2, r3, #31
 80008d8:	4906      	ldr	r1, [pc, #24]	; (80008f4 <__NVIC_EnableIRQ+0x34>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	095b      	lsrs	r3, r3, #5
 80008e0:	2001      	movs	r0, #1
 80008e2:	fa00 f202 	lsl.w	r2, r0, r2
 80008e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	e000e100 	.word	0xe000e100

080008f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	db0a      	blt.n	8000922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	490c      	ldr	r1, [pc, #48]	; (8000944 <__NVIC_SetPriority+0x4c>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	0112      	lsls	r2, r2, #4
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	440b      	add	r3, r1
 800091c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000920:	e00a      	b.n	8000938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4908      	ldr	r1, [pc, #32]	; (8000948 <__NVIC_SetPriority+0x50>)
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	f003 030f 	and.w	r3, r3, #15
 800092e:	3b04      	subs	r3, #4
 8000930:	0112      	lsls	r2, r2, #4
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	440b      	add	r3, r1
 8000936:	761a      	strb	r2, [r3, #24]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094c:	b480      	push	{r7}
 800094e:	b089      	sub	sp, #36	; 0x24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	f1c3 0307 	rsb	r3, r3, #7
 8000966:	2b04      	cmp	r3, #4
 8000968:	bf28      	it	cs
 800096a:	2304      	movcs	r3, #4
 800096c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3304      	adds	r3, #4
 8000972:	2b06      	cmp	r3, #6
 8000974:	d902      	bls.n	800097c <NVIC_EncodePriority+0x30>
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3b03      	subs	r3, #3
 800097a:	e000      	b.n	800097e <NVIC_EncodePriority+0x32>
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	f04f 32ff 	mov.w	r2, #4294967295
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43da      	mvns	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	43d9      	mvns	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	4313      	orrs	r3, r2
         );
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3724      	adds	r7, #36	; 0x24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c0:	d301      	bcc.n	80009c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00f      	b.n	80009e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <SysTick_Config+0x40>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ce:	210f      	movs	r1, #15
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f7ff ff90 	bl	80008f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <SysTick_Config+0x40>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <SysTick_Config+0x40>)
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	e000e010 	.word	0xe000e010

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff2d 	bl	800085c <__NVIC_SetPriorityGrouping>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a1c:	f7ff ff42 	bl	80008a4 <__NVIC_GetPriorityGrouping>
 8000a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	f7ff ff90 	bl	800094c <NVIC_EncodePriority>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff5f 	bl	80008f8 <__NVIC_SetPriority>
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff35 	bl	80008c0 <__NVIC_EnableIRQ>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ffa2 	bl	80009b0 <SysTick_Config>
 8000a6c:	4603      	mov	r3, r0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b08b      	sub	sp, #44	; 0x2c
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8a:	e169      	b.n	8000d60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	69fa      	ldr	r2, [r7, #28]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	f040 8158 	bne.w	8000d5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	4a9a      	ldr	r2, [pc, #616]	; (8000d18 <HAL_GPIO_Init+0x2a0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d05e      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
 8000ab4:	4a98      	ldr	r2, [pc, #608]	; (8000d18 <HAL_GPIO_Init+0x2a0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d875      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000aba:	4a98      	ldr	r2, [pc, #608]	; (8000d1c <HAL_GPIO_Init+0x2a4>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d058      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
 8000ac0:	4a96      	ldr	r2, [pc, #600]	; (8000d1c <HAL_GPIO_Init+0x2a4>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d86f      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000ac6:	4a96      	ldr	r2, [pc, #600]	; (8000d20 <HAL_GPIO_Init+0x2a8>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d052      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
 8000acc:	4a94      	ldr	r2, [pc, #592]	; (8000d20 <HAL_GPIO_Init+0x2a8>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d869      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000ad2:	4a94      	ldr	r2, [pc, #592]	; (8000d24 <HAL_GPIO_Init+0x2ac>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d04c      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
 8000ad8:	4a92      	ldr	r2, [pc, #584]	; (8000d24 <HAL_GPIO_Init+0x2ac>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d863      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000ade:	4a92      	ldr	r2, [pc, #584]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d046      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
 8000ae4:	4a90      	ldr	r2, [pc, #576]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d85d      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000aea:	2b12      	cmp	r3, #18
 8000aec:	d82a      	bhi.n	8000b44 <HAL_GPIO_Init+0xcc>
 8000aee:	2b12      	cmp	r3, #18
 8000af0:	d859      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000af2:	a201      	add	r2, pc, #4	; (adr r2, 8000af8 <HAL_GPIO_Init+0x80>)
 8000af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af8:	08000b73 	.word	0x08000b73
 8000afc:	08000b4d 	.word	0x08000b4d
 8000b00:	08000b5f 	.word	0x08000b5f
 8000b04:	08000ba1 	.word	0x08000ba1
 8000b08:	08000ba7 	.word	0x08000ba7
 8000b0c:	08000ba7 	.word	0x08000ba7
 8000b10:	08000ba7 	.word	0x08000ba7
 8000b14:	08000ba7 	.word	0x08000ba7
 8000b18:	08000ba7 	.word	0x08000ba7
 8000b1c:	08000ba7 	.word	0x08000ba7
 8000b20:	08000ba7 	.word	0x08000ba7
 8000b24:	08000ba7 	.word	0x08000ba7
 8000b28:	08000ba7 	.word	0x08000ba7
 8000b2c:	08000ba7 	.word	0x08000ba7
 8000b30:	08000ba7 	.word	0x08000ba7
 8000b34:	08000ba7 	.word	0x08000ba7
 8000b38:	08000ba7 	.word	0x08000ba7
 8000b3c:	08000b55 	.word	0x08000b55
 8000b40:	08000b69 	.word	0x08000b69
 8000b44:	4a79      	ldr	r2, [pc, #484]	; (8000d2c <HAL_GPIO_Init+0x2b4>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d013      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b4a:	e02c      	b.n	8000ba6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	623b      	str	r3, [r7, #32]
          break;
 8000b52:	e029      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	623b      	str	r3, [r7, #32]
          break;
 8000b5c:	e024      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	3308      	adds	r3, #8
 8000b64:	623b      	str	r3, [r7, #32]
          break;
 8000b66:	e01f      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	330c      	adds	r3, #12
 8000b6e:	623b      	str	r3, [r7, #32]
          break;
 8000b70:	e01a      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d102      	bne.n	8000b80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	623b      	str	r3, [r7, #32]
          break;
 8000b7e:	e013      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d105      	bne.n	8000b94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b88:	2308      	movs	r3, #8
 8000b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	69fa      	ldr	r2, [r7, #28]
 8000b90:	611a      	str	r2, [r3, #16]
          break;
 8000b92:	e009      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b94:	2308      	movs	r3, #8
 8000b96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	69fa      	ldr	r2, [r7, #28]
 8000b9c:	615a      	str	r2, [r3, #20]
          break;
 8000b9e:	e003      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
          break;
 8000ba4:	e000      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          break;
 8000ba6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	2bff      	cmp	r3, #255	; 0xff
 8000bac:	d801      	bhi.n	8000bb2 <HAL_GPIO_Init+0x13a>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	e001      	b.n	8000bb6 <HAL_GPIO_Init+0x13e>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	2bff      	cmp	r3, #255	; 0xff
 8000bbc:	d802      	bhi.n	8000bc4 <HAL_GPIO_Init+0x14c>
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	e002      	b.n	8000bca <HAL_GPIO_Init+0x152>
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	3b08      	subs	r3, #8
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	210f      	movs	r1, #15
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	401a      	ands	r2, r3
 8000bdc:	6a39      	ldr	r1, [r7, #32]
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
 8000be4:	431a      	orrs	r2, r3
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f000 80b1 	beq.w	8000d5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf8:	4b4d      	ldr	r3, [pc, #308]	; (8000d30 <HAL_GPIO_Init+0x2b8>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a4c      	ldr	r2, [pc, #304]	; (8000d30 <HAL_GPIO_Init+0x2b8>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b4a      	ldr	r3, [pc, #296]	; (8000d30 <HAL_GPIO_Init+0x2b8>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c10:	4a48      	ldr	r2, [pc, #288]	; (8000d34 <HAL_GPIO_Init+0x2bc>)
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	089b      	lsrs	r3, r3, #2
 8000c16:	3302      	adds	r3, #2
 8000c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	220f      	movs	r2, #15
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a40      	ldr	r2, [pc, #256]	; (8000d38 <HAL_GPIO_Init+0x2c0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d013      	beq.n	8000c64 <HAL_GPIO_Init+0x1ec>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a3f      	ldr	r2, [pc, #252]	; (8000d3c <HAL_GPIO_Init+0x2c4>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d00d      	beq.n	8000c60 <HAL_GPIO_Init+0x1e8>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a3e      	ldr	r2, [pc, #248]	; (8000d40 <HAL_GPIO_Init+0x2c8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d007      	beq.n	8000c5c <HAL_GPIO_Init+0x1e4>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a3d      	ldr	r2, [pc, #244]	; (8000d44 <HAL_GPIO_Init+0x2cc>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d101      	bne.n	8000c58 <HAL_GPIO_Init+0x1e0>
 8000c54:	2303      	movs	r3, #3
 8000c56:	e006      	b.n	8000c66 <HAL_GPIO_Init+0x1ee>
 8000c58:	2304      	movs	r3, #4
 8000c5a:	e004      	b.n	8000c66 <HAL_GPIO_Init+0x1ee>
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	e002      	b.n	8000c66 <HAL_GPIO_Init+0x1ee>
 8000c60:	2301      	movs	r3, #1
 8000c62:	e000      	b.n	8000c66 <HAL_GPIO_Init+0x1ee>
 8000c64:	2300      	movs	r3, #0
 8000c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c68:	f002 0203 	and.w	r2, r2, #3
 8000c6c:	0092      	lsls	r2, r2, #2
 8000c6e:	4093      	lsls	r3, r2
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c76:	492f      	ldr	r1, [pc, #188]	; (8000d34 <HAL_GPIO_Init+0x2bc>)
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c90:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	492c      	ldr	r1, [pc, #176]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	600b      	str	r3, [r1, #0]
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	4928      	ldr	r1, [pc, #160]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	4922      	ldr	r1, [pc, #136]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	604b      	str	r3, [r1, #4]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cc6:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	491e      	ldr	r1, [pc, #120]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	4918      	ldr	r1, [pc, #96]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	608b      	str	r3, [r1, #8]
 8000cec:	e006      	b.n	8000cfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	4914      	ldr	r1, [pc, #80]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d021      	beq.n	8000d4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	490e      	ldr	r1, [pc, #56]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	60cb      	str	r3, [r1, #12]
 8000d14:	e021      	b.n	8000d5a <HAL_GPIO_Init+0x2e2>
 8000d16:	bf00      	nop
 8000d18:	10320000 	.word	0x10320000
 8000d1c:	10310000 	.word	0x10310000
 8000d20:	10220000 	.word	0x10220000
 8000d24:	10210000 	.word	0x10210000
 8000d28:	10120000 	.word	0x10120000
 8000d2c:	10110000 	.word	0x10110000
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000
 8000d38:	40010800 	.word	0x40010800
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	40011000 	.word	0x40011000
 8000d44:	40011400 	.word	0x40011400
 8000d48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_GPIO_Init+0x304>)
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	4909      	ldr	r1, [pc, #36]	; (8000d7c <HAL_GPIO_Init+0x304>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d66:	fa22 f303 	lsr.w	r3, r2, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f47f ae8e 	bne.w	8000a8c <HAL_GPIO_Init+0x14>
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	372c      	adds	r7, #44	; 0x2c
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	40010400 	.word	0x40010400

08000d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d90:	787b      	ldrb	r3, [r7, #1]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d96:	887a      	ldrh	r2, [r7, #2]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d9c:	e003      	b.n	8000da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d9e:	887b      	ldrh	r3, [r7, #2]
 8000da0:	041a      	lsls	r2, r3, #16
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	611a      	str	r2, [r3, #16]
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dc2:	887a      	ldrh	r2, [r7, #2]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	041a      	lsls	r2, r3, #16
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	43d9      	mvns	r1, r3
 8000dce:	887b      	ldrh	r3, [r7, #2]
 8000dd0:	400b      	ands	r3, r1
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	611a      	str	r2, [r3, #16]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000de2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de4:	b08b      	sub	sp, #44	; 0x2c
 8000de6:	af06      	add	r7, sp, #24
 8000de8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d101      	bne.n	8000df4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e0fd      	b.n	8000ff0 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d106      	bne.n	8000e0e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f006 fd21 	bl	8007850 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2203      	movs	r2, #3
 8000e12:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 f968 	bl	80030f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	687e      	ldr	r6, [r7, #4]
 8000e28:	466d      	mov	r5, sp
 8000e2a:	f106 0410 	add.w	r4, r6, #16
 8000e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e32:	6823      	ldr	r3, [r4, #0]
 8000e34:	602b      	str	r3, [r5, #0]
 8000e36:	1d33      	adds	r3, r6, #4
 8000e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e3a:	6838      	ldr	r0, [r7, #0]
 8000e3c:	f002 f932 	bl	80030a4 <USB_CoreInit>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d005      	beq.n	8000e52 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2202      	movs	r2, #2
 8000e4a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e0ce      	b.n	8000ff0 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 f963 	bl	8003124 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	e04c      	b.n	8000efe <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	440b      	add	r3, r1
 8000e74:	3301      	adds	r3, #1
 8000e76:	2201      	movs	r2, #1
 8000e78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	1c5a      	adds	r2, r3, #1
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	440b      	add	r3, r1
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e8e:	7bfa      	ldrb	r2, [r7, #15]
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	b298      	uxth	r0, r3
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	440b      	add	r3, r1
 8000ea0:	3336      	adds	r3, #54	; 0x36
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	440b      	add	r3, r1
 8000eb6:	3303      	adds	r3, #3
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ebc:	7bfa      	ldrb	r2, [r7, #15]
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	440b      	add	r3, r1
 8000eca:	3338      	adds	r3, #56	; 0x38
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	440b      	add	r3, r1
 8000ede:	333c      	adds	r3, #60	; 0x3c
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ee4:	7bfa      	ldrb	r2, [r7, #15]
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	440b      	add	r3, r1
 8000ef2:	3340      	adds	r3, #64	; 0x40
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	3301      	adds	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d3ad      	bcc.n	8000e64 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e044      	b.n	8000f98 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f0e:	7bfa      	ldrb	r2, [r7, #15]
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	440b      	add	r3, r1
 8000f32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	440b      	add	r3, r1
 8000f48:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	440b      	add	r3, r1
 8000f5e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	440b      	add	r3, r1
 8000f74:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	440b      	add	r3, r1
 8000f8a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	3301      	adds	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d3b5      	bcc.n	8000f0e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	687e      	ldr	r6, [r7, #4]
 8000faa:	466d      	mov	r5, sp
 8000fac:	f106 0410 	add.w	r4, r6, #16
 8000fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb4:	6823      	ldr	r3, [r4, #0]
 8000fb6:	602b      	str	r3, [r5, #0]
 8000fb8:	1d33      	adds	r3, r6, #4
 8000fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fbc:	6838      	ldr	r0, [r7, #0]
 8000fbe:	f002 f8bd 	bl	800313c <USB_DevInit>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d005      	beq.n	8000fd4 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2202      	movs	r2, #2
 8000fcc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e00d      	b.n	8000ff0 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f004 fd6f 	bl	8005acc <USB_DevDisconnect>

  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ff8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001006:	2b01      	cmp	r3, #1
 8001008:	d101      	bne.n	800100e <HAL_PCD_Start+0x16>
 800100a:	2302      	movs	r3, #2
 800100c:	e016      	b.n	800103c <HAL_PCD_Start+0x44>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f002 f852 	bl	80030c4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001020:	2101      	movs	r1, #1
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f006 fe87 	bl	8007d36 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f004 fd43 	bl	8005ab8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f004 fd45 	bl	8005ae0 <USB_ReadInterrupts>
 8001056:	4603      	mov	r3, r0
 8001058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800105c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001060:	d102      	bne.n	8001068 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 fb5f 	bl	8001726 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f004 fd37 	bl	8005ae0 <USB_ReadInterrupts>
 8001072:	4603      	mov	r3, r0
 8001074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800107c:	d112      	bne.n	80010a4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001086:	b29a      	uxth	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001090:	b292      	uxth	r2, r2
 8001092:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f006 fc55 	bl	8007946 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800109c:	2100      	movs	r1, #0
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f923 	bl	80012ea <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f004 fd19 	bl	8005ae0 <USB_ReadInterrupts>
 80010ae:	4603      	mov	r3, r0
 80010b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010b8:	d10b      	bne.n	80010d2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010cc:	b292      	uxth	r2, r2
 80010ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 fd02 	bl	8005ae0 <USB_ReadInterrupts>
 80010dc:	4603      	mov	r3, r0
 80010de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010e6:	d10b      	bne.n	8001100 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010fa:	b292      	uxth	r2, r2
 80010fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f004 fceb 	bl	8005ae0 <USB_ReadInterrupts>
 800110a:	4603      	mov	r3, r0
 800110c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001114:	d126      	bne.n	8001164 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800111e:	b29a      	uxth	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0204 	bic.w	r2, r2, #4
 8001128:	b292      	uxth	r2, r2
 800112a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001136:	b29a      	uxth	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0208 	bic.w	r2, r2, #8
 8001140:	b292      	uxth	r2, r2
 8001142:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f006 fc36 	bl	80079b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001154:	b29a      	uxth	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800115e:	b292      	uxth	r2, r2
 8001160:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f004 fcb9 	bl	8005ae0 <USB_ReadInterrupts>
 800116e:	4603      	mov	r3, r0
 8001170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001178:	f040 8082 	bne.w	8001280 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800117c:	2300      	movs	r3, #0
 800117e:	77fb      	strb	r3, [r7, #31]
 8001180:	e010      	b.n	80011a4 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	7ffb      	ldrb	r3, [r7, #31]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	441a      	add	r2, r3
 800118e:	7ffb      	ldrb	r3, [r7, #31]
 8001190:	8812      	ldrh	r2, [r2, #0]
 8001192:	b292      	uxth	r2, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	3320      	adds	r3, #32
 8001198:	443b      	add	r3, r7
 800119a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800119e:	7ffb      	ldrb	r3, [r7, #31]
 80011a0:	3301      	adds	r3, #1
 80011a2:	77fb      	strb	r3, [r7, #31]
 80011a4:	7ffb      	ldrb	r3, [r7, #31]
 80011a6:	2b07      	cmp	r3, #7
 80011a8:	d9eb      	bls.n	8001182 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f042 0201 	orr.w	r2, r2, #1
 80011bc:	b292      	uxth	r2, r2
 80011be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0201 	bic.w	r2, r2, #1
 80011d4:	b292      	uxth	r2, r2
 80011d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80011da:	bf00      	nop
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f6      	beq.n	80011dc <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001200:	b292      	uxth	r2, r2
 8001202:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001206:	2300      	movs	r3, #0
 8001208:	77fb      	strb	r3, [r7, #31]
 800120a:	e00f      	b.n	800122c <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800120c:	7ffb      	ldrb	r3, [r7, #31]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	4611      	mov	r1, r2
 8001214:	7ffa      	ldrb	r2, [r7, #31]
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	440a      	add	r2, r1
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	3320      	adds	r3, #32
 800121e:	443b      	add	r3, r7
 8001220:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001224:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001226:	7ffb      	ldrb	r3, [r7, #31]
 8001228:	3301      	adds	r3, #1
 800122a:	77fb      	strb	r3, [r7, #31]
 800122c:	7ffb      	ldrb	r3, [r7, #31]
 800122e:	2b07      	cmp	r3, #7
 8001230:	d9ec      	bls.n	800120c <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800123a:	b29a      	uxth	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 0208 	orr.w	r2, r2, #8
 8001244:	b292      	uxth	r2, r2
 8001246:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001252:	b29a      	uxth	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800125c:	b292      	uxth	r2, r2
 800125e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800126a:	b29a      	uxth	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f042 0204 	orr.w	r2, r2, #4
 8001274:	b292      	uxth	r2, r2
 8001276:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f006 fb82 	bl	8007984 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f004 fc2b 	bl	8005ae0 <USB_ReadInterrupts>
 800128a:	4603      	mov	r3, r0
 800128c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001294:	d10e      	bne.n	80012b4 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800129e:	b29a      	uxth	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012a8:	b292      	uxth	r2, r2
 80012aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f006 fb3b 	bl	800792a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f004 fc11 	bl	8005ae0 <USB_ReadInterrupts>
 80012be:	4603      	mov	r3, r0
 80012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012c8:	d10b      	bne.n	80012e2 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012dc:	b292      	uxth	r2, r2
 80012de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80012e2:	bf00      	nop
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	460b      	mov	r3, r1
 80012f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <HAL_PCD_SetAddress+0x1a>
 8001300:	2302      	movs	r3, #2
 8001302:	e013      	b.n	800132c <HAL_PCD_SetAddress+0x42>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	78fa      	ldrb	r2, [r7, #3]
 8001310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	78fa      	ldrb	r2, [r7, #3]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f004 fbb8 	bl	8005a92 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	4608      	mov	r0, r1
 800133e:	4611      	mov	r1, r2
 8001340:	461a      	mov	r2, r3
 8001342:	4603      	mov	r3, r0
 8001344:	70fb      	strb	r3, [r7, #3]
 8001346:	460b      	mov	r3, r1
 8001348:	803b      	strh	r3, [r7, #0]
 800134a:	4613      	mov	r3, r2
 800134c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001356:	2b00      	cmp	r3, #0
 8001358:	da0e      	bge.n	8001378 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	1c5a      	adds	r2, r3, #1
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2201      	movs	r2, #1
 8001374:	705a      	strb	r2, [r3, #1]
 8001376:	e00e      	b.n	8001396 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	f003 0207 	and.w	r2, r3, #7
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001396:	78fb      	ldrb	r3, [r7, #3]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	b2da      	uxtb	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80013a2:	883a      	ldrh	r2, [r7, #0]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	78ba      	ldrb	r2, [r7, #2]
 80013ac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	785b      	ldrb	r3, [r3, #1]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80013c0:	78bb      	ldrb	r3, [r7, #2]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d102      	bne.n	80013cc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d101      	bne.n	80013da <HAL_PCD_EP_Open+0xa6>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e00e      	b.n	80013f8 <HAL_PCD_EP_Open+0xc4>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68f9      	ldr	r1, [r7, #12]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 fec7 	bl	800317c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80013f6:	7afb      	ldrb	r3, [r7, #11]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800140c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001410:	2b00      	cmp	r3, #0
 8001412:	da0e      	bge.n	8001432 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2201      	movs	r2, #1
 800142e:	705a      	strb	r2, [r3, #1]
 8001430:	e00e      	b.n	8001450 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	f003 0207 	and.w	r2, r3, #7
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2200      	movs	r2, #0
 800144e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	b2da      	uxtb	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001462:	2b01      	cmp	r3, #1
 8001464:	d101      	bne.n	800146a <HAL_PCD_EP_Close+0x6a>
 8001466:	2302      	movs	r3, #2
 8001468:	e00e      	b.n	8001488 <HAL_PCD_EP_Close+0x88>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68f9      	ldr	r1, [r7, #12]
 8001478:	4618      	mov	r0, r3
 800147a:	f002 f9e9 	bl	8003850 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	460b      	mov	r3, r1
 800149e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014a0:	7afb      	ldrb	r3, [r7, #11]
 80014a2:	f003 0207 	and.w	r2, r3, #7
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4413      	add	r3, r2
 80014b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	2200      	movs	r2, #0
 80014ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014d0:	7afb      	ldrb	r3, [r7, #11]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80014dc:	7afb      	ldrb	r3, [r7, #11]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d106      	bne.n	80014f4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6979      	ldr	r1, [r7, #20]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 fb9b 	bl	8003c28 <USB_EPStartXfer>
 80014f2:	e005      	b.n	8001500 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6979      	ldr	r1, [r7, #20]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 fb94 	bl	8003c28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	f003 0207 	and.w	r2, r3, #7
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	440b      	add	r3, r1
 8001528:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800152c:	681b      	ldr	r3, [r3, #0]
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	460b      	mov	r3, r1
 8001546:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001548:	7afb      	ldrb	r3, [r7, #11]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	4413      	add	r3, r2
 800155c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2201      	movs	r2, #1
 8001582:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001584:	7afb      	ldrb	r3, [r7, #11]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	b2da      	uxtb	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001590:	7afb      	ldrb	r3, [r7, #11]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	2b00      	cmp	r3, #0
 8001598:	d106      	bne.n	80015a8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6979      	ldr	r1, [r7, #20]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 fb41 	bl	8003c28 <USB_EPStartXfer>
 80015a6:	e005      	b.n	80015b4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6979      	ldr	r1, [r7, #20]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 fb3a 	bl	8003c28 <USB_EPStartXfer>
  }

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	f003 0207 	and.w	r2, r3, #7
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d901      	bls.n	80015dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e04c      	b.n	8001676 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	da0e      	bge.n	8001602 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	4413      	add	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2201      	movs	r2, #1
 80015fe:	705a      	strb	r2, [r3, #1]
 8001600:	e00c      	b.n	800161c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2201      	movs	r2, #1
 8001620:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	b2da      	uxtb	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001634:	2b01      	cmp	r3, #1
 8001636:	d101      	bne.n	800163c <HAL_PCD_EP_SetStall+0x7e>
 8001638:	2302      	movs	r3, #2
 800163a:	e01c      	b.n	8001676 <HAL_PCD_EP_SetStall+0xb8>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68f9      	ldr	r1, [r7, #12]
 800164a:	4618      	mov	r0, r3
 800164c:	f004 f924 	bl	8005898 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	2b00      	cmp	r3, #0
 8001658:	d108      	bne.n	800166c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001664:	4619      	mov	r1, r3
 8001666:	4610      	mov	r0, r2
 8001668:	f004 fa49 	bl	8005afe <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	f003 020f 	and.w	r2, r3, #15
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	d901      	bls.n	800169c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e040      	b.n	800171e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800169c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da0e      	bge.n	80016c2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2201      	movs	r2, #1
 80016be:	705a      	strb	r2, [r3, #1]
 80016c0:	e00e      	b.n	80016e0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	f003 0207 	and.w	r2, r3, #7
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	4413      	add	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <HAL_PCD_EP_ClrStall+0x82>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e00e      	b.n	800171e <HAL_PCD_EP_ClrStall+0xa0>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68f9      	ldr	r1, [r7, #12]
 800170e:	4618      	mov	r0, r3
 8001710:	f004 f912 	bl	8005938 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b08e      	sub	sp, #56	; 0x38
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800172e:	e2ec      	b.n	8001d0a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001738:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800173a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001746:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 8161 	bne.w	8001a12 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001750:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	2b00      	cmp	r3, #0
 8001758:	d152      	bne.n	8001800 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800176a:	81fb      	strh	r3, [r7, #14]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	89fb      	ldrh	r3, [r7, #14]
 8001772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800177a:	b29b      	uxth	r3, r3
 800177c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3328      	adds	r3, #40	; 0x28
 8001782:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800178c:	b29b      	uxth	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4413      	add	r3, r2
 8001798:	3302      	adds	r3, #2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	441a      	add	r2, r3
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017be:	2100      	movs	r1, #0
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f006 f898 	bl	80078f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 829b 	beq.w	8001d0a <PCD_EP_ISR_Handler+0x5e4>
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 8296 	bne.w	8001d0a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	b292      	uxth	r2, r2
 80017f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017fe:	e284      	b.n	8001d0a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001810:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001816:	2b00      	cmp	r3, #0
 8001818:	d034      	beq.n	8001884 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001822:	b29b      	uxth	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4413      	add	r3, r2
 800182e:	3306      	adds	r3, #6
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	4413      	add	r3, r2
 8001838:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001858:	b29b      	uxth	r3, r3
 800185a:	f004 f9a0 	bl	8005b9e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	b29a      	uxth	r2, r3
 8001866:	f640 738f 	movw	r3, #3983	; 0xf8f
 800186a:	4013      	ands	r3, r2
 800186c:	823b      	strh	r3, [r7, #16]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	8a3a      	ldrh	r2, [r7, #16]
 8001874:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001878:	b292      	uxth	r2, r2
 800187a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f006 f80d 	bl	800789c <HAL_PCD_SetupStageCallback>
 8001882:	e242      	b.n	8001d0a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001884:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001888:	2b00      	cmp	r3, #0
 800188a:	f280 823e 	bge.w	8001d0a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	b29a      	uxth	r2, r3
 8001896:	f640 738f 	movw	r3, #3983	; 0xf8f
 800189a:	4013      	ands	r3, r2
 800189c:	83bb      	strh	r3, [r7, #28]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	8bba      	ldrh	r2, [r7, #28]
 80018a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018a8:	b292      	uxth	r2, r2
 80018aa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	3306      	adds	r3, #6
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d019      	beq.n	8001914 <PCD_EP_ISR_Handler+0x1ee>
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d015      	beq.n	8001914 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	6959      	ldr	r1, [r3, #20]
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	f004 f950 	bl	8005b9e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	441a      	add	r2, r3
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800190c:	2100      	movs	r1, #0
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f005 ffd6 	bl	80078c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001920:	2b00      	cmp	r3, #0
 8001922:	f040 81f2 	bne.w	8001d0a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001934:	b29b      	uxth	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	4413      	add	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d112      	bne.n	8001974 <PCD_EP_ISR_Handler+0x24e>
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001958:	b29a      	uxth	r2, r3
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	801a      	strh	r2, [r3, #0]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800196c:	b29a      	uxth	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	801a      	strh	r2, [r3, #0]
 8001972:	e02f      	b.n	80019d4 <PCD_EP_ISR_Handler+0x2ae>
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	2b3e      	cmp	r3, #62	; 0x3e
 800197a:	d813      	bhi.n	80019a4 <PCD_EP_ISR_Handler+0x27e>
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	085b      	lsrs	r3, r3, #1
 8001982:	633b      	str	r3, [r7, #48]	; 0x30
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <PCD_EP_ISR_Handler+0x270>
 8001990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001992:	3301      	adds	r3, #1
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
 8001996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001998:	b29b      	uxth	r3, r3
 800199a:	029b      	lsls	r3, r3, #10
 800199c:	b29a      	uxth	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	801a      	strh	r2, [r3, #0]
 80019a2:	e017      	b.n	80019d4 <PCD_EP_ISR_Handler+0x2ae>
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	095b      	lsrs	r3, r3, #5
 80019aa:	633b      	str	r3, [r7, #48]	; 0x30
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <PCD_EP_ISR_Handler+0x298>
 80019b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ba:	3b01      	subs	r3, #1
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
 80019be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	029b      	lsls	r3, r3, #10
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e4:	827b      	strh	r3, [r7, #18]
 80019e6:	8a7b      	ldrh	r3, [r7, #18]
 80019e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80019ec:	827b      	strh	r3, [r7, #18]
 80019ee:	8a7b      	ldrh	r3, [r7, #18]
 80019f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80019f4:	827b      	strh	r3, [r7, #18]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	8a7b      	ldrh	r3, [r7, #18]
 80019fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	8013      	strh	r3, [r2, #0]
 8001a10:	e17b      	b.n	8001d0a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a24:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f280 80ea 	bge.w	8001c02 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a44:	4013      	ands	r3, r2
 8001a46:	853b      	strh	r3, [r7, #40]	; 0x28
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a5c:	b292      	uxth	r2, r2
 8001a5e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a60:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	4413      	add	r3, r2
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	7b1b      	ldrb	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d122      	bne.n	8001ac4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	3306      	adds	r3, #6
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aa6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001aa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8087 	beq.w	8001bbe <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	6959      	ldr	r1, [r3, #20]
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	88da      	ldrh	r2, [r3, #6]
 8001abc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001abe:	f004 f86e 	bl	8005b9e <USB_ReadPMA>
 8001ac2:	e07c      	b.n	8001bbe <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	78db      	ldrb	r3, [r3, #3]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d108      	bne.n	8001ade <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001acc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ace:	461a      	mov	r2, r3
 8001ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f927 	bl	8001d26 <HAL_PCD_EP_DB_Receive>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001adc:	e06f      	b.n	8001bbe <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001af8:	847b      	strh	r3, [r7, #34]	; 0x22
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	441a      	add	r2, r3
 8001b08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d021      	beq.n	8001b7c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	461a      	mov	r2, r3
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b60:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001b62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d02a      	beq.n	8001bbe <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	6959      	ldr	r1, [r3, #20]
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	891a      	ldrh	r2, [r3, #8]
 8001b74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b76:	f004 f812 	bl	8005b9e <USB_ReadPMA>
 8001b7a:	e020      	b.n	8001bbe <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	3306      	adds	r3, #6
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ba4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001ba6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	6959      	ldr	r1, [r3, #20]
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	895a      	ldrh	r2, [r3, #10]
 8001bb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001bba:	f003 fff0 	bl	8005b9e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	69da      	ldr	r2, [r3, #28]
 8001bc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001bc4:	441a      	add	r2, r3
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001bd0:	441a      	add	r2, r3
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d004      	beq.n	8001be8 <PCD_EP_ISR_Handler+0x4c2>
 8001bde:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d206      	bcs.n	8001bf6 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f005 fe66 	bl	80078c0 <HAL_PCD_DataOutStageCallback>
 8001bf4:	e005      	b.n	8001c02 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 f813 	bl	8003c28 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d07e      	beq.n	8001d0a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c3a:	843b      	strh	r3, [r7, #32]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	441a      	add	r2, r3
 8001c4a:	8c3b      	ldrh	r3, [r7, #32]
 8001c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	78db      	ldrb	r3, [r3, #3]
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d00c      	beq.n	8001c7a <PCD_EP_ISR_Handler+0x554>
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	78db      	ldrb	r3, [r3, #3]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d146      	bne.n	8001cfe <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001c70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d141      	bne.n	8001cfe <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3302      	adds	r3, #2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ca2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	699a      	ldr	r2, [r3, #24]
 8001ca8:	8bfb      	ldrh	r3, [r7, #30]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d906      	bls.n	8001cbc <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	8bfb      	ldrh	r3, [r7, #30]
 8001cb4:	1ad2      	subs	r2, r2, r3
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	619a      	str	r2, [r3, #24]
 8001cba:	e002      	b.n	8001cc2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d106      	bne.n	8001cd8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f005 fe10 	bl	80078f6 <HAL_PCD_DataInStageCallback>
 8001cd6:	e018      	b.n	8001d0a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	695a      	ldr	r2, [r3, #20]
 8001cdc:	8bfb      	ldrh	r3, [r7, #30]
 8001cde:	441a      	add	r2, r3
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	69da      	ldr	r2, [r3, #28]
 8001ce8:	8bfb      	ldrh	r3, [r7, #30]
 8001cea:	441a      	add	r2, r3
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 ff96 	bl	8003c28 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001cfc:	e005      	b.n	8001d0a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001cfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d00:	461a      	mov	r2, r3
 8001d02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f91b 	bl	8001f40 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f6ff ad0a 	blt.w	8001730 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3738      	adds	r7, #56	; 0x38
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b088      	sub	sp, #32
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	4613      	mov	r3, r2
 8001d32:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d07e      	beq.n	8001e3c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	3302      	adds	r3, #2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d66:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	699a      	ldr	r2, [r3, #24]
 8001d6c:	8b7b      	ldrh	r3, [r7, #26]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d306      	bcc.n	8001d80 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	699a      	ldr	r2, [r3, #24]
 8001d76:	8b7b      	ldrh	r3, [r7, #26]
 8001d78:	1ad2      	subs	r2, r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	619a      	str	r2, [r3, #24]
 8001d7e:	e002      	b.n	8001d86 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2200      	movs	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d123      	bne.n	8001dd6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da8:	833b      	strh	r3, [r7, #24]
 8001daa:	8b3b      	ldrh	r3, [r7, #24]
 8001dac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001db0:	833b      	strh	r3, [r7, #24]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	441a      	add	r2, r3
 8001dc0:	8b3b      	ldrh	r3, [r7, #24]
 8001dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01f      	beq.n	8001e20 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dfa:	82fb      	strh	r3, [r7, #22]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	441a      	add	r2, r3
 8001e0a:	8afb      	ldrh	r3, [r7, #22]
 8001e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e20:	8b7b      	ldrh	r3, [r7, #26]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8087 	beq.w	8001f36 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	6959      	ldr	r1, [r3, #20]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	891a      	ldrh	r2, [r3, #8]
 8001e34:	8b7b      	ldrh	r3, [r7, #26]
 8001e36:	f003 feb2 	bl	8005b9e <USB_ReadPMA>
 8001e3a:	e07c      	b.n	8001f36 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4413      	add	r3, r2
 8001e50:	3306      	adds	r3, #6
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e64:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	8b7b      	ldrh	r3, [r7, #26]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d306      	bcc.n	8001e7e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	8b7b      	ldrh	r3, [r7, #26]
 8001e76:	1ad2      	subs	r2, r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	619a      	str	r2, [r3, #24]
 8001e7c:	e002      	b.n	8001e84 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d123      	bne.n	8001ed4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea6:	83fb      	strh	r3, [r7, #30]
 8001ea8:	8bfb      	ldrh	r3, [r7, #30]
 8001eaa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001eae:	83fb      	strh	r3, [r7, #30]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	441a      	add	r2, r3
 8001ebe:	8bfb      	ldrh	r3, [r7, #30]
 8001ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d11f      	bne.n	8001f1e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef8:	83bb      	strh	r3, [r7, #28]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	441a      	add	r2, r3
 8001f08:	8bbb      	ldrh	r3, [r7, #28]
 8001f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f1e:	8b7b      	ldrh	r3, [r7, #26]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	6959      	ldr	r1, [r3, #20]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	895a      	ldrh	r2, [r3, #10]
 8001f30:	8b7b      	ldrh	r3, [r7, #26]
 8001f32:	f003 fe34 	bl	8005b9e <USB_ReadPMA>
    }
  }

  return count;
 8001f36:	8b7b      	ldrh	r3, [r7, #26]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b0a2      	sub	sp, #136	; 0x88
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 81c7 	beq.w	80022e8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d907      	bls.n	8001fa2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	699a      	ldr	r2, [r3, #24]
 8001f96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f9a:	1ad2      	subs	r2, r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	619a      	str	r2, [r3, #24]
 8001fa0:	e002      	b.n	8001fa8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f040 80b9 	bne.w	8002124 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	785b      	ldrb	r3, [r3, #1]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d126      	bne.n	8002008 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fce:	4413      	add	r3, r2
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	011a      	lsls	r2, r3, #4
 8001fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fda:	4413      	add	r3, r2
 8001fdc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	801a      	strh	r2, [r3, #0]
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002000:	b29a      	uxth	r2, r3
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	e01a      	b.n	800203e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	785b      	ldrb	r3, [r3, #1]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d116      	bne.n	800203e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	633b      	str	r3, [r7, #48]	; 0x30
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800201e:	b29b      	uxth	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002024:	4413      	add	r3, r2
 8002026:	633b      	str	r3, [r7, #48]	; 0x30
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	011a      	lsls	r2, r3, #4
 800202e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002030:	4413      	add	r3, r2
 8002032:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	2200      	movs	r2, #0
 800203c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	623b      	str	r3, [r7, #32]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	785b      	ldrb	r3, [r3, #1]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d126      	bne.n	800209a <HAL_PCD_EP_DB_Transmit+0x15a>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800205a:	b29b      	uxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4413      	add	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	011a      	lsls	r2, r3, #4
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	4413      	add	r3, r2
 800206e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800207e:	b29a      	uxth	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	801a      	strh	r2, [r3, #0]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800208e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002092:	b29a      	uxth	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	801a      	strh	r2, [r3, #0]
 8002098:	e017      	b.n	80020ca <HAL_PCD_EP_DB_Transmit+0x18a>
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	785b      	ldrb	r3, [r3, #1]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d113      	bne.n	80020ca <HAL_PCD_EP_DB_Transmit+0x18a>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	4413      	add	r3, r2
 80020b2:	623b      	str	r3, [r7, #32]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	011a      	lsls	r2, r3, #4
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	4413      	add	r3, r2
 80020be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	2200      	movs	r2, #0
 80020c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	4619      	mov	r1, r3
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f005 fc10 	bl	80078f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 82d4 	beq.w	800268a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fc:	827b      	strh	r3, [r7, #18]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	441a      	add	r2, r3
 800210c:	8a7b      	ldrh	r3, [r7, #18]
 800210e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002116:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800211a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800211e:	b29b      	uxth	r3, r3
 8002120:	8013      	strh	r3, [r2, #0]
 8002122:	e2b2      	b.n	800268a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d021      	beq.n	8002172 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002148:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	441a      	add	r2, r3
 800215a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800215e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002166:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800216a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216e:	b29b      	uxth	r3, r3
 8002170:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002178:	2b01      	cmp	r3, #1
 800217a:	f040 8286 	bne.w	800268a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002186:	441a      	add	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002194:	441a      	add	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	6a1a      	ldr	r2, [r3, #32]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d309      	bcc.n	80021ba <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	6a1a      	ldr	r2, [r3, #32]
 80021b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021b2:	1ad2      	subs	r2, r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	621a      	str	r2, [r3, #32]
 80021b8:	e015      	b.n	80021e6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d107      	bne.n	80021d2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80021c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021d0:	e009      	b.n	80021e6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2200      	movs	r2, #0
 80021e4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	785b      	ldrb	r3, [r3, #1]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d155      	bne.n	800229a <HAL_PCD_EP_DB_Transmit+0x35a>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002202:	4413      	add	r3, r2
 8002204:	63bb      	str	r3, [r7, #56]	; 0x38
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	011a      	lsls	r2, r3, #4
 800220c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220e:	4413      	add	r3, r2
 8002210:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
 8002216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002218:	2b00      	cmp	r3, #0
 800221a:	d112      	bne.n	8002242 <HAL_PCD_EP_DB_Transmit+0x302>
 800221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002226:	b29a      	uxth	r2, r3
 8002228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222a:	801a      	strh	r2, [r3, #0]
 800222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800223a:	b29a      	uxth	r2, r3
 800223c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223e:	801a      	strh	r2, [r3, #0]
 8002240:	e047      	b.n	80022d2 <HAL_PCD_EP_DB_Transmit+0x392>
 8002242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002244:	2b3e      	cmp	r3, #62	; 0x3e
 8002246:	d811      	bhi.n	800226c <HAL_PCD_EP_DB_Transmit+0x32c>
 8002248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	64bb      	str	r3, [r7, #72]	; 0x48
 800224e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_PCD_EP_DB_Transmit+0x31e>
 8002258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800225a:	3301      	adds	r3, #1
 800225c:	64bb      	str	r3, [r7, #72]	; 0x48
 800225e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002260:	b29b      	uxth	r3, r3
 8002262:	029b      	lsls	r3, r3, #10
 8002264:	b29a      	uxth	r2, r3
 8002266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002268:	801a      	strh	r2, [r3, #0]
 800226a:	e032      	b.n	80022d2 <HAL_PCD_EP_DB_Transmit+0x392>
 800226c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	64bb      	str	r3, [r7, #72]	; 0x48
 8002272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <HAL_PCD_EP_DB_Transmit+0x342>
 800227c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800227e:	3b01      	subs	r3, #1
 8002280:	64bb      	str	r3, [r7, #72]	; 0x48
 8002282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002284:	b29b      	uxth	r3, r3
 8002286:	029b      	lsls	r3, r3, #10
 8002288:	b29b      	uxth	r3, r3
 800228a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800228e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002292:	b29a      	uxth	r2, r3
 8002294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002296:	801a      	strh	r2, [r3, #0]
 8002298:	e01b      	b.n	80022d2 <HAL_PCD_EP_DB_Transmit+0x392>
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	785b      	ldrb	r3, [r3, #1]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d117      	bne.n	80022d2 <HAL_PCD_EP_DB_Transmit+0x392>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	643b      	str	r3, [r7, #64]	; 0x40
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b6:	4413      	add	r3, r2
 80022b8:	643b      	str	r3, [r7, #64]	; 0x40
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	011a      	lsls	r2, r3, #4
 80022c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022c2:	4413      	add	r3, r2
 80022c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	6959      	ldr	r1, [r3, #20]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	891a      	ldrh	r2, [r3, #8]
 80022de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	f003 fc17 	bl	8005b14 <USB_WritePMA>
 80022e6:	e1d0      	b.n	800268a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	3306      	adds	r3, #6
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	4413      	add	r3, r2
 8002306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002310:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	699a      	ldr	r2, [r3, #24]
 8002318:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800231c:	429a      	cmp	r2, r3
 800231e:	d307      	bcc.n	8002330 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002328:	1ad2      	subs	r2, r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	619a      	str	r2, [r3, #24]
 800232e:	e002      	b.n	8002336 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2200      	movs	r2, #0
 8002334:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 80c4 	bne.w	80024c8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	785b      	ldrb	r3, [r3, #1]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d126      	bne.n	8002396 <HAL_PCD_EP_DB_Transmit+0x456>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002356:	b29b      	uxth	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235c:	4413      	add	r3, r2
 800235e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	011a      	lsls	r2, r3, #4
 8002366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002368:	4413      	add	r3, r2
 800236a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800236e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800237a:	b29a      	uxth	r2, r3
 800237c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800237e:	801a      	strh	r2, [r3, #0]
 8002380:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	b29b      	uxth	r3, r3
 8002386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800238a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800238e:	b29a      	uxth	r2, r3
 8002390:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002392:	801a      	strh	r2, [r3, #0]
 8002394:	e01a      	b.n	80023cc <HAL_PCD_EP_DB_Transmit+0x48c>
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	785b      	ldrb	r3, [r3, #1]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d116      	bne.n	80023cc <HAL_PCD_EP_DB_Transmit+0x48c>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	677b      	str	r3, [r7, #116]	; 0x74
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b2:	4413      	add	r3, r2
 80023b4:	677b      	str	r3, [r7, #116]	; 0x74
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	011a      	lsls	r2, r3, #4
 80023bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023be:	4413      	add	r3, r2
 80023c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023c4:	673b      	str	r3, [r7, #112]	; 0x70
 80023c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023c8:	2200      	movs	r2, #0
 80023ca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	785b      	ldrb	r3, [r3, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d12f      	bne.n	800243a <HAL_PCD_EP_DB_Transmit+0x4fa>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023f2:	4413      	add	r3, r2
 80023f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	011a      	lsls	r2, r3, #4
 80023fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002402:	4413      	add	r3, r2
 8002404:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800240c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002418:	b29a      	uxth	r2, r3
 800241a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800241e:	801a      	strh	r2, [r3, #0]
 8002420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800242c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002430:	b29a      	uxth	r2, r3
 8002432:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002436:	801a      	strh	r2, [r3, #0]
 8002438:	e017      	b.n	800246a <HAL_PCD_EP_DB_Transmit+0x52a>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	785b      	ldrb	r3, [r3, #1]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d113      	bne.n	800246a <HAL_PCD_EP_DB_Transmit+0x52a>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002450:	4413      	add	r3, r2
 8002452:	67bb      	str	r3, [r7, #120]	; 0x78
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	011a      	lsls	r2, r3, #4
 800245a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800245c:	4413      	add	r3, r2
 800245e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002462:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002464:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002466:	2200      	movs	r2, #0
 8002468:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	4619      	mov	r1, r3
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f005 fa40 	bl	80078f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247c:	2b00      	cmp	r3, #0
 800247e:	f040 8104 	bne.w	800268a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	441a      	add	r2, r3
 80024ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80024b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	8013      	strh	r3, [r2, #0]
 80024c6:	e0e0      	b.n	800268a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d121      	bne.n	8002516 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	441a      	add	r2, r3
 80024fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800250a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800250e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002512:	b29b      	uxth	r3, r3
 8002514:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800251c:	2b01      	cmp	r3, #1
 800251e:	f040 80b4 	bne.w	800268a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800252a:	441a      	add	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	69da      	ldr	r2, [r3, #28]
 8002534:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002538:	441a      	add	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	6a1a      	ldr	r2, [r3, #32]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	429a      	cmp	r2, r3
 8002548:	d309      	bcc.n	800255e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	6a1a      	ldr	r2, [r3, #32]
 8002554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002556:	1ad2      	subs	r2, r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	621a      	str	r2, [r3, #32]
 800255c:	e015      	b.n	800258a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d107      	bne.n	8002576 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002566:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800256a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002574:	e009      	b.n	800258a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2200      	movs	r2, #0
 8002580:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	667b      	str	r3, [r7, #100]	; 0x64
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	785b      	ldrb	r3, [r3, #1]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d155      	bne.n	8002644 <HAL_PCD_EP_DB_Transmit+0x704>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ac:	4413      	add	r3, r2
 80025ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	011a      	lsls	r2, r3, #4
 80025b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b8:	4413      	add	r3, r2
 80025ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025be:	65bb      	str	r3, [r7, #88]	; 0x58
 80025c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d112      	bne.n	80025ec <HAL_PCD_EP_DB_Transmit+0x6ac>
 80025c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025d4:	801a      	strh	r2, [r3, #0]
 80025d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025e8:	801a      	strh	r2, [r3, #0]
 80025ea:	e044      	b.n	8002676 <HAL_PCD_EP_DB_Transmit+0x736>
 80025ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ee:	2b3e      	cmp	r3, #62	; 0x3e
 80025f0:	d811      	bhi.n	8002616 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80025f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	657b      	str	r3, [r7, #84]	; 0x54
 80025f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002604:	3301      	adds	r3, #1
 8002606:	657b      	str	r3, [r7, #84]	; 0x54
 8002608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260a:	b29b      	uxth	r3, r3
 800260c:	029b      	lsls	r3, r3, #10
 800260e:	b29a      	uxth	r2, r3
 8002610:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002612:	801a      	strh	r2, [r3, #0]
 8002614:	e02f      	b.n	8002676 <HAL_PCD_EP_DB_Transmit+0x736>
 8002616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	657b      	str	r3, [r7, #84]	; 0x54
 800261c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002628:	3b01      	subs	r3, #1
 800262a:	657b      	str	r3, [r7, #84]	; 0x54
 800262c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262e:	b29b      	uxth	r3, r3
 8002630:	029b      	lsls	r3, r3, #10
 8002632:	b29b      	uxth	r3, r3
 8002634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800263c:	b29a      	uxth	r2, r3
 800263e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002640:	801a      	strh	r2, [r3, #0]
 8002642:	e018      	b.n	8002676 <HAL_PCD_EP_DB_Transmit+0x736>
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	785b      	ldrb	r3, [r3, #1]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d114      	bne.n	8002676 <HAL_PCD_EP_DB_Transmit+0x736>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002654:	b29b      	uxth	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800265a:	4413      	add	r3, r2
 800265c:	667b      	str	r3, [r7, #100]	; 0x64
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	011a      	lsls	r2, r3, #4
 8002664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002666:	4413      	add	r3, r2
 8002668:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800266c:	663b      	str	r3, [r7, #96]	; 0x60
 800266e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002670:	b29a      	uxth	r2, r3
 8002672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002674:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	6959      	ldr	r1, [r3, #20]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	895a      	ldrh	r2, [r3, #10]
 8002682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002684:	b29b      	uxth	r3, r3
 8002686:	f003 fa45 	bl	8005b14 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026a4:	823b      	strh	r3, [r7, #16]
 80026a6:	8a3b      	ldrh	r3, [r7, #16]
 80026a8:	f083 0310 	eor.w	r3, r3, #16
 80026ac:	823b      	strh	r3, [r7, #16]
 80026ae:	8a3b      	ldrh	r3, [r7, #16]
 80026b0:	f083 0320 	eor.w	r3, r3, #32
 80026b4:	823b      	strh	r3, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	441a      	add	r2, r3
 80026c4:	8a3b      	ldrh	r3, [r7, #16]
 80026c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3788      	adds	r7, #136	; 0x88
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	817b      	strh	r3, [r7, #10]
 80026f2:	4613      	mov	r3, r2
 80026f4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80026f6:	897b      	ldrh	r3, [r7, #10]
 80026f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002702:	897b      	ldrh	r3, [r7, #10]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4413      	add	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	e009      	b.n	800272e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800271a:	897a      	ldrh	r2, [r7, #10]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800272e:	893b      	ldrh	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d107      	bne.n	8002744 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2200      	movs	r2, #0
 8002738:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	b29a      	uxth	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	80da      	strh	r2, [r3, #6]
 8002742:	e00b      	b.n	800275c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2201      	movs	r2, #1
 8002748:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	b29a      	uxth	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	b29a      	uxth	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e272      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 8087 	beq.w	8002896 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002788:	4b92      	ldr	r3, [pc, #584]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 030c 	and.w	r3, r3, #12
 8002790:	2b04      	cmp	r3, #4
 8002792:	d00c      	beq.n	80027ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002794:	4b8f      	ldr	r3, [pc, #572]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b08      	cmp	r3, #8
 800279e:	d112      	bne.n	80027c6 <HAL_RCC_OscConfig+0x5e>
 80027a0:	4b8c      	ldr	r3, [pc, #560]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ac:	d10b      	bne.n	80027c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ae:	4b89      	ldr	r3, [pc, #548]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d06c      	beq.n	8002894 <HAL_RCC_OscConfig+0x12c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d168      	bne.n	8002894 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e24c      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ce:	d106      	bne.n	80027de <HAL_RCC_OscConfig+0x76>
 80027d0:	4b80      	ldr	r3, [pc, #512]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a7f      	ldr	r2, [pc, #508]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	e02e      	b.n	800283c <HAL_RCC_OscConfig+0xd4>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x98>
 80027e6:	4b7b      	ldr	r3, [pc, #492]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a7a      	ldr	r2, [pc, #488]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b78      	ldr	r3, [pc, #480]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a77      	ldr	r2, [pc, #476]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e01d      	b.n	800283c <HAL_RCC_OscConfig+0xd4>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0xbc>
 800280a:	4b72      	ldr	r3, [pc, #456]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a71      	ldr	r2, [pc, #452]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b6f      	ldr	r3, [pc, #444]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a6e      	ldr	r2, [pc, #440]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0xd4>
 8002824:	4b6b      	ldr	r3, [pc, #428]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a6a      	ldr	r2, [pc, #424]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b68      	ldr	r3, [pc, #416]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a67      	ldr	r2, [pc, #412]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fd ffdc 	bl	8000800 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800284c:	f7fd ffd8 	bl	8000800 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e200      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b5d      	ldr	r3, [pc, #372]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0xe4>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fd ffc8 	bl	8000800 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7fd ffc4 	bl	8000800 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e1ec      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x10c>
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d063      	beq.n	800296a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028a2:	4b4c      	ldr	r3, [pc, #304]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028ae:	4b49      	ldr	r3, [pc, #292]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d11c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x18c>
 80028ba:	4b46      	ldr	r3, [pc, #280]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d116      	bne.n	80028f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_RCC_OscConfig+0x176>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e1c0      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4939      	ldr	r1, [pc, #228]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	e03a      	b.n	800296a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028fc:	4b36      	ldr	r3, [pc, #216]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7fd ff7d 	bl	8000800 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800290a:	f7fd ff79 	bl	8000800 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1a1      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002928:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4927      	ldr	r1, [pc, #156]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
 800293c:	e015      	b.n	800296a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293e:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7fd ff5c 	bl	8000800 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294c:	f7fd ff58 	bl	8000800 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e180      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d03a      	beq.n	80029ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d019      	beq.n	80029b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <HAL_RCC_OscConfig+0x274>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002984:	f7fd ff3c 	bl	8000800 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298c:	f7fd ff38 	bl	8000800 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e160      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029aa:	2001      	movs	r0, #1
 80029ac:	f000 faa6 	bl	8002efc <RCC_Delay>
 80029b0:	e01c      	b.n	80029ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_RCC_OscConfig+0x274>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b8:	f7fd ff22 	bl	8000800 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029be:	e00f      	b.n	80029e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c0:	f7fd ff1e 	bl	8000800 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d908      	bls.n	80029e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e146      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	42420000 	.word	0x42420000
 80029dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e0:	4b92      	ldr	r3, [pc, #584]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e9      	bne.n	80029c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a6 	beq.w	8002b46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fa:	2300      	movs	r3, #0
 80029fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fe:	4b8b      	ldr	r3, [pc, #556]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10d      	bne.n	8002a26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	4b88      	ldr	r3, [pc, #544]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4a87      	ldr	r2, [pc, #540]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a14:	61d3      	str	r3, [r2, #28]
 8002a16:	4b85      	ldr	r3, [pc, #532]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a22:	2301      	movs	r3, #1
 8002a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a26:	4b82      	ldr	r3, [pc, #520]	; (8002c30 <HAL_RCC_OscConfig+0x4c8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d118      	bne.n	8002a64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a32:	4b7f      	ldr	r3, [pc, #508]	; (8002c30 <HAL_RCC_OscConfig+0x4c8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a7e      	ldr	r2, [pc, #504]	; (8002c30 <HAL_RCC_OscConfig+0x4c8>)
 8002a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3e:	f7fd fedf 	bl	8000800 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a46:	f7fd fedb 	bl	8000800 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b64      	cmp	r3, #100	; 0x64
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e103      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	4b75      	ldr	r3, [pc, #468]	; (8002c30 <HAL_RCC_OscConfig+0x4c8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_OscConfig+0x312>
 8002a6c:	4b6f      	ldr	r3, [pc, #444]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4a6e      	ldr	r2, [pc, #440]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6213      	str	r3, [r2, #32]
 8002a78:	e02d      	b.n	8002ad6 <HAL_RCC_OscConfig+0x36e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x334>
 8002a82:	4b6a      	ldr	r3, [pc, #424]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	4a69      	ldr	r2, [pc, #420]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	6213      	str	r3, [r2, #32]
 8002a8e:	4b67      	ldr	r3, [pc, #412]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	4a66      	ldr	r2, [pc, #408]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	f023 0304 	bic.w	r3, r3, #4
 8002a98:	6213      	str	r3, [r2, #32]
 8002a9a:	e01c      	b.n	8002ad6 <HAL_RCC_OscConfig+0x36e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d10c      	bne.n	8002abe <HAL_RCC_OscConfig+0x356>
 8002aa4:	4b61      	ldr	r3, [pc, #388]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4a60      	ldr	r2, [pc, #384]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	6213      	str	r3, [r2, #32]
 8002ab0:	4b5e      	ldr	r3, [pc, #376]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4a5d      	ldr	r2, [pc, #372]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6213      	str	r3, [r2, #32]
 8002abc:	e00b      	b.n	8002ad6 <HAL_RCC_OscConfig+0x36e>
 8002abe:	4b5b      	ldr	r3, [pc, #364]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4a5a      	ldr	r2, [pc, #360]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	6213      	str	r3, [r2, #32]
 8002aca:	4b58      	ldr	r3, [pc, #352]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4a57      	ldr	r2, [pc, #348]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	f023 0304 	bic.w	r3, r3, #4
 8002ad4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d015      	beq.n	8002b0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ade:	f7fd fe8f 	bl	8000800 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7fd fe8b 	bl	8000800 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e0b1      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afc:	4b4b      	ldr	r3, [pc, #300]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ee      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x37e>
 8002b08:	e014      	b.n	8002b34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0a:	f7fd fe79 	bl	8000800 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7fd fe75 	bl	8000800 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e09b      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b28:	4b40      	ldr	r3, [pc, #256]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ee      	bne.n	8002b12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b34:	7dfb      	ldrb	r3, [r7, #23]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d105      	bne.n	8002b46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3a:	4b3c      	ldr	r3, [pc, #240]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4a3b      	ldr	r2, [pc, #236]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8087 	beq.w	8002c5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b50:	4b36      	ldr	r3, [pc, #216]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d061      	beq.n	8002c20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d146      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b64:	4b33      	ldr	r3, [pc, #204]	; (8002c34 <HAL_RCC_OscConfig+0x4cc>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7fd fe49 	bl	8000800 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b72:	f7fd fe45 	bl	8000800 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e06d      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b84:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f0      	bne.n	8002b72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b98:	d108      	bne.n	8002bac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b9a:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4921      	ldr	r1, [pc, #132]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bac:	4b1f      	ldr	r3, [pc, #124]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a19      	ldr	r1, [r3, #32]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	491b      	ldr	r1, [pc, #108]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <HAL_RCC_OscConfig+0x4cc>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7fd fe19 	bl	8000800 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7fd fe15 	bl	8000800 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e03d      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x46a>
 8002bf0:	e035      	b.n	8002c5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <HAL_RCC_OscConfig+0x4cc>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fd fe02 	bl	8000800 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fd fdfe 	bl	8000800 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e026      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x498>
 8002c1e:	e01e      	b.n	8002c5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e019      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40007000 	.word	0x40007000
 8002c34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCC_OscConfig+0x500>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021000 	.word	0x40021000

08002c6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0d0      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c80:	4b6a      	ldr	r3, [pc, #424]	; (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d910      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b67      	ldr	r3, [pc, #412]	; (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 0207 	bic.w	r2, r3, #7
 8002c96:	4965      	ldr	r1, [pc, #404]	; (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b63      	ldr	r3, [pc, #396]	; (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0b8      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d020      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc8:	4b59      	ldr	r3, [pc, #356]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4a58      	ldr	r2, [pc, #352]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce0:	4b53      	ldr	r3, [pc, #332]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a52      	ldr	r2, [pc, #328]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b50      	ldr	r3, [pc, #320]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	494d      	ldr	r1, [pc, #308]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d040      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d115      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e07f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2a:	4b41      	ldr	r3, [pc, #260]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e073      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e06b      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4a:	4b39      	ldr	r3, [pc, #228]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f023 0203 	bic.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4936      	ldr	r1, [pc, #216]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d5c:	f7fd fd50 	bl	8000800 <HAL_GetTick>
 8002d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d64:	f7fd fd4c 	bl	8000800 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e053      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	4b2d      	ldr	r3, [pc, #180]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 020c 	and.w	r2, r3, #12
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d1eb      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d210      	bcs.n	8002dbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b24      	ldr	r3, [pc, #144]	; (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 0207 	bic.w	r2, r3, #7
 8002da2:	4922      	ldr	r1, [pc, #136]	; (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e032      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc8:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4916      	ldr	r1, [pc, #88]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	490e      	ldr	r1, [pc, #56]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dfa:	f000 f821 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	490a      	ldr	r1, [pc, #40]	; (8002e34 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0c:	5ccb      	ldrb	r3, [r1, r3]
 8002e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e12:	4a09      	ldr	r2, [pc, #36]	; (8002e38 <HAL_RCC_ClockConfig+0x1cc>)
 8002e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e16:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <HAL_RCC_ClockConfig+0x1d0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fd fcae 	bl	800077c <HAL_InitTick>

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40022000 	.word	0x40022000
 8002e30:	40021000 	.word	0x40021000
 8002e34:	080087cc 	.word	0x080087cc
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	2000000c 	.word	0x2000000c

08002e40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e40:	b490      	push	{r4, r7}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e46:	4b29      	ldr	r3, [pc, #164]	; (8002eec <HAL_RCC_GetSysClockFreq+0xac>)
 8002e48:	1d3c      	adds	r4, r7, #4
 8002e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e50:	f240 2301 	movw	r3, #513	; 0x201
 8002e54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e6a:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d002      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x40>
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d003      	beq.n	8002e86 <HAL_RCC_GetSysClockFreq+0x46>
 8002e7e:	e02b      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e80:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e82:	623b      	str	r3, [r7, #32]
      break;
 8002e84:	e02b      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	0c9b      	lsrs	r3, r3, #18
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	3328      	adds	r3, #40	; 0x28
 8002e90:	443b      	add	r3, r7
 8002e92:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e96:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d012      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ea2:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	0c5b      	lsrs	r3, r3, #17
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	3328      	adds	r3, #40	; 0x28
 8002eae:	443b      	add	r3, r7
 8002eb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002eb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002eba:	fb03 f202 	mul.w	r2, r3, r2
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec6:	e004      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ecc:	fb02 f303 	mul.w	r3, r2, r3
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	623b      	str	r3, [r7, #32]
      break;
 8002ed6:	e002      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002eda:	623b      	str	r3, [r7, #32]
      break;
 8002edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ede:	6a3b      	ldr	r3, [r7, #32]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3728      	adds	r7, #40	; 0x28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc90      	pop	{r4, r7}
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	08008774 	.word	0x08008774
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	007a1200 	.word	0x007a1200
 8002ef8:	003d0900 	.word	0x003d0900

08002efc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <RCC_Delay+0x34>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <RCC_Delay+0x38>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0a5b      	lsrs	r3, r3, #9
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	fb02 f303 	mul.w	r3, r2, r3
 8002f16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f18:	bf00      	nop
  }
  while (Delay --);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1e5a      	subs	r2, r3, #1
 8002f1e:	60fa      	str	r2, [r7, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f9      	bne.n	8002f18 <RCC_Delay+0x1c>
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	20000000 	.word	0x20000000
 8002f34:	10624dd3 	.word	0x10624dd3

08002f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d07d      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f54:	2300      	movs	r3, #0
 8002f56:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f58:	4b4f      	ldr	r3, [pc, #316]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10d      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f64:	4b4c      	ldr	r3, [pc, #304]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	4a4b      	ldr	r2, [pc, #300]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	61d3      	str	r3, [r2, #28]
 8002f70:	4b49      	ldr	r3, [pc, #292]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	4b46      	ldr	r3, [pc, #280]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d118      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8c:	4b43      	ldr	r3, [pc, #268]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a42      	ldr	r2, [pc, #264]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f98:	f7fd fc32 	bl	8000800 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa0:	f7fd fc2e 	bl	8000800 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e06d      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb2:	4b3a      	ldr	r3, [pc, #232]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fbe:	4b36      	ldr	r3, [pc, #216]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d02e      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d027      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fdc:	4b2e      	ldr	r3, [pc, #184]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fe6:	4b2e      	ldr	r3, [pc, #184]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fec:	4b2c      	ldr	r3, [pc, #176]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ff2:	4a29      	ldr	r2, [pc, #164]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d014      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003002:	f7fd fbfd 	bl	8000800 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003008:	e00a      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7fd fbf9 	bl	8000800 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	; 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e036      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003020:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ee      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800302c:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4917      	ldr	r1, [pc, #92]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303a:	4313      	orrs	r3, r2
 800303c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003044:	4b14      	ldr	r3, [pc, #80]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	4a13      	ldr	r2, [pc, #76]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800304e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	490b      	ldr	r1, [pc, #44]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	4904      	ldr	r1, [pc, #16]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
 800309c:	40007000 	.word	0x40007000
 80030a0:	42420440 	.word	0x42420440

080030a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80030a4:	b084      	sub	sp, #16
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	f107 0014 	add.w	r0, r7, #20
 80030b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	b004      	add	sp, #16
 80030c2:	4770      	bx	lr

080030c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80030d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80030d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80030f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80030fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	b29b      	uxth	r3, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	b29b      	uxth	r3, r3
 800310e:	4013      	ands	r3, r2
 8003110:	b29a      	uxth	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800313c:	b084      	sub	sp, #16
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	f107 0014 	add.w	r0, r7, #20
 800314a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	b004      	add	sp, #16
 800317a:	4770      	bx	lr

0800317c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800317c:	b480      	push	{r7}
 800317e:	b09b      	sub	sp, #108	; 0x6c
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	b29b      	uxth	r3, r3
 800319a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	78db      	ldrb	r3, [r3, #3]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d81f      	bhi.n	80031ee <USB_ActivateEndpoint+0x72>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <USB_ActivateEndpoint+0x38>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031e1 	.word	0x080031e1
 80031bc:	080031f7 	.word	0x080031f7
 80031c0:	080031d3 	.word	0x080031d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80031c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80031c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80031d0:	e012      	b.n	80031f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80031d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80031d6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80031da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80031de:	e00b      	b.n	80031f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80031e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80031e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80031ec:	e004      	b.n	80031f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80031f4:	e000      	b.n	80031f8 <USB_ActivateEndpoint+0x7c>
      break;
 80031f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	441a      	add	r2, r3
 8003202:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800320a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003216:	b29b      	uxth	r3, r3
 8003218:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	b29b      	uxth	r3, r3
 8003228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800322c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003230:	b29a      	uxth	r2, r3
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	4313      	orrs	r3, r2
 800323a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	441a      	add	r2, r3
 8003248:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800324c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800325c:	b29b      	uxth	r3, r3
 800325e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	7b1b      	ldrb	r3, [r3, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	f040 8149 	bne.w	80034fc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	785b      	ldrb	r3, [r3, #1]
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 8084 	beq.w	800337c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800327e:	b29b      	uxth	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	4413      	add	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	011a      	lsls	r2, r3, #4
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	4413      	add	r3, r2
 8003292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	88db      	ldrh	r3, [r3, #6]
 800329c:	085b      	lsrs	r3, r3, #1
 800329e:	b29b      	uxth	r3, r3
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	81fb      	strh	r3, [r7, #14]
 80032b6:	89fb      	ldrh	r3, [r7, #14]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01b      	beq.n	80032f8 <USB_ActivateEndpoint+0x17c>
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	81bb      	strh	r3, [r7, #12]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	441a      	add	r2, r3
 80032e2:	89bb      	ldrh	r3, [r7, #12]
 80032e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	78db      	ldrb	r3, [r3, #3]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d020      	beq.n	8003342 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003316:	813b      	strh	r3, [r7, #8]
 8003318:	893b      	ldrh	r3, [r7, #8]
 800331a:	f083 0320 	eor.w	r3, r3, #32
 800331e:	813b      	strh	r3, [r7, #8]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	441a      	add	r2, r3
 800332a:	893b      	ldrh	r3, [r7, #8]
 800332c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800333c:	b29b      	uxth	r3, r3
 800333e:	8013      	strh	r3, [r2, #0]
 8003340:	e27f      	b.n	8003842 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	b29b      	uxth	r3, r3
 8003350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003358:	817b      	strh	r3, [r7, #10]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	441a      	add	r2, r3
 8003364:	897b      	ldrh	r3, [r7, #10]
 8003366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800336a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800336e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003376:	b29b      	uxth	r3, r3
 8003378:	8013      	strh	r3, [r2, #0]
 800337a:	e262      	b.n	8003842 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003386:	b29b      	uxth	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	4413      	add	r3, r2
 800338e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	011a      	lsls	r2, r3, #4
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003398:	4413      	add	r3, r2
 800339a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800339e:	62bb      	str	r3, [r7, #40]	; 0x28
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	88db      	ldrh	r3, [r3, #6]
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	4413      	add	r3, r2
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	011a      	lsls	r2, r3, #4
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	4413      	add	r3, r2
 80033ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033d2:	623b      	str	r3, [r7, #32]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d112      	bne.n	8003402 <USB_ActivateEndpoint+0x286>
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	801a      	strh	r2, [r3, #0]
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	801a      	strh	r2, [r3, #0]
 8003400:	e02f      	b.n	8003462 <USB_ActivateEndpoint+0x2e6>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b3e      	cmp	r3, #62	; 0x3e
 8003408:	d813      	bhi.n	8003432 <USB_ActivateEndpoint+0x2b6>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	663b      	str	r3, [r7, #96]	; 0x60
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <USB_ActivateEndpoint+0x2a8>
 800341e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003420:	3301      	adds	r3, #1
 8003422:	663b      	str	r3, [r7, #96]	; 0x60
 8003424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003426:	b29b      	uxth	r3, r3
 8003428:	029b      	lsls	r3, r3, #10
 800342a:	b29a      	uxth	r2, r3
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	801a      	strh	r2, [r3, #0]
 8003430:	e017      	b.n	8003462 <USB_ActivateEndpoint+0x2e6>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	663b      	str	r3, [r7, #96]	; 0x60
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <USB_ActivateEndpoint+0x2d0>
 8003446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003448:	3b01      	subs	r3, #1
 800344a:	663b      	str	r3, [r7, #96]	; 0x60
 800344c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800344e:	b29b      	uxth	r3, r3
 8003450:	029b      	lsls	r3, r3, #10
 8003452:	b29b      	uxth	r3, r3
 8003454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800345c:	b29a      	uxth	r2, r3
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	83fb      	strh	r3, [r7, #30]
 8003470:	8bfb      	ldrh	r3, [r7, #30]
 8003472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d01b      	beq.n	80034b2 <USB_ActivateEndpoint+0x336>
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003490:	83bb      	strh	r3, [r7, #28]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	441a      	add	r2, r3
 800349c:	8bbb      	ldrh	r3, [r7, #28]
 800349e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c8:	837b      	strh	r3, [r7, #26]
 80034ca:	8b7b      	ldrh	r3, [r7, #26]
 80034cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80034d0:	837b      	strh	r3, [r7, #26]
 80034d2:	8b7b      	ldrh	r3, [r7, #26]
 80034d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034d8:	837b      	strh	r3, [r7, #26]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	441a      	add	r2, r3
 80034e4:	8b7b      	ldrh	r3, [r7, #26]
 80034e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	8013      	strh	r3, [r2, #0]
 80034fa:	e1a2      	b.n	8003842 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800350e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003512:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	441a      	add	r2, r3
 8003520:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800352c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003534:	b29b      	uxth	r3, r3
 8003536:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	65bb      	str	r3, [r7, #88]	; 0x58
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003542:	b29b      	uxth	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003548:	4413      	add	r3, r2
 800354a:	65bb      	str	r3, [r7, #88]	; 0x58
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	011a      	lsls	r2, r3, #4
 8003552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003554:	4413      	add	r3, r2
 8003556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800355a:	657b      	str	r3, [r7, #84]	; 0x54
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	891b      	ldrh	r3, [r3, #8]
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	b29b      	uxth	r3, r3
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800356a:	801a      	strh	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	653b      	str	r3, [r7, #80]	; 0x50
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003576:	b29b      	uxth	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800357c:	4413      	add	r3, r2
 800357e:	653b      	str	r3, [r7, #80]	; 0x50
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	011a      	lsls	r2, r3, #4
 8003586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003588:	4413      	add	r3, r2
 800358a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800358e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	895b      	ldrh	r3, [r3, #10]
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	b29b      	uxth	r3, r3
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800359e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	785b      	ldrb	r3, [r3, #1]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f040 8091 	bne.w	80036cc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80035b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80035ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01b      	beq.n	80035fa <USB_ActivateEndpoint+0x47e>
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	441a      	add	r2, r3
 80035e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80035e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	873b      	strh	r3, [r7, #56]	; 0x38
 8003608:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d01b      	beq.n	800364a <USB_ActivateEndpoint+0x4ce>
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	b29b      	uxth	r3, r3
 8003620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003628:	86fb      	strh	r3, [r7, #54]	; 0x36
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	441a      	add	r2, r3
 8003634:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800363a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800363e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003642:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003646:	b29b      	uxth	r3, r3
 8003648:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800365c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003660:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003662:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003664:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003668:	86bb      	strh	r3, [r7, #52]	; 0x34
 800366a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800366c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003670:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	441a      	add	r2, r3
 800367c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800367e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800368e:	b29b      	uxth	r3, r3
 8003690:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	441a      	add	r2, r3
 80036b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80036b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	8013      	strh	r3, [r2, #0]
 80036ca:	e0ba      	b.n	8003842 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80036dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80036e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01d      	beq.n	8003724 <USB_ActivateEndpoint+0x5a8>
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	441a      	add	r2, r3
 800370c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800371c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003720:	b29b      	uxth	r3, r3
 8003722:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003734:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01d      	beq.n	800377c <USB_ActivateEndpoint+0x600>
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003756:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	441a      	add	r2, r3
 8003764:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800376c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003774:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003778:	b29b      	uxth	r3, r3
 800377a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	78db      	ldrb	r3, [r3, #3]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d024      	beq.n	80037ce <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800379e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037a2:	f083 0320 	eor.w	r3, r3, #32
 80037a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	441a      	add	r2, r3
 80037b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	8013      	strh	r3, [r2, #0]
 80037cc:	e01d      	b.n	800380a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	b29b      	uxth	r3, r3
 80037dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	441a      	add	r2, r3
 80037f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80037f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003806:	b29b      	uxth	r3, r3
 8003808:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	b29b      	uxth	r3, r3
 8003818:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800381c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003820:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	441a      	add	r2, r3
 800382c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800382e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800383a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383e:	b29b      	uxth	r3, r3
 8003840:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003842:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003846:	4618      	mov	r0, r3
 8003848:	376c      	adds	r7, #108	; 0x6c
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003850:	b480      	push	{r7}
 8003852:	b08d      	sub	sp, #52	; 0x34
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	7b1b      	ldrb	r3, [r3, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f040 808e 	bne.w	8003980 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	785b      	ldrb	r3, [r3, #1]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d044      	beq.n	80038f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	81bb      	strh	r3, [r7, #12]
 800387a:	89bb      	ldrh	r3, [r7, #12]
 800387c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01b      	beq.n	80038bc <USB_DeactivateEndpoint+0x6c>
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389a:	817b      	strh	r3, [r7, #10]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	441a      	add	r2, r3
 80038a6:	897b      	ldrh	r3, [r7, #10]
 80038a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d2:	813b      	strh	r3, [r7, #8]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	441a      	add	r2, r3
 80038de:	893b      	ldrh	r3, [r7, #8]
 80038e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	8013      	strh	r3, [r2, #0]
 80038f4:	e192      	b.n	8003c1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	827b      	strh	r3, [r7, #18]
 8003904:	8a7b      	ldrh	r3, [r7, #18]
 8003906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01b      	beq.n	8003946 <USB_DeactivateEndpoint+0xf6>
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003924:	823b      	strh	r3, [r7, #16]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	441a      	add	r2, r3
 8003930:	8a3b      	ldrh	r3, [r7, #16]
 8003932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800393a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800393e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003942:	b29b      	uxth	r3, r3
 8003944:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395c:	81fb      	strh	r3, [r7, #14]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	441a      	add	r2, r3
 8003968:	89fb      	ldrh	r3, [r7, #14]
 800396a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800396e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397a:	b29b      	uxth	r3, r3
 800397c:	8013      	strh	r3, [r2, #0]
 800397e:	e14d      	b.n	8003c1c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	785b      	ldrb	r3, [r3, #1]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f040 80a5 	bne.w	8003ad4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	843b      	strh	r3, [r7, #32]
 8003998:	8c3b      	ldrh	r3, [r7, #32]
 800399a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01b      	beq.n	80039da <USB_DeactivateEndpoint+0x18a>
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b8:	83fb      	strh	r3, [r7, #30]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	441a      	add	r2, r3
 80039c4:	8bfb      	ldrh	r3, [r7, #30]
 80039c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	83bb      	strh	r3, [r7, #28]
 80039e8:	8bbb      	ldrh	r3, [r7, #28]
 80039ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d01b      	beq.n	8003a2a <USB_DeactivateEndpoint+0x1da>
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a08:	837b      	strh	r3, [r7, #26]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	441a      	add	r2, r3
 8003a14:	8b7b      	ldrh	r3, [r7, #26]
 8003a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a40:	833b      	strh	r3, [r7, #24]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	441a      	add	r2, r3
 8003a4c:	8b3b      	ldrh	r3, [r7, #24]
 8003a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a78:	82fb      	strh	r3, [r7, #22]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	441a      	add	r2, r3
 8003a84:	8afb      	ldrh	r3, [r7, #22]
 8003a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab0:	82bb      	strh	r3, [r7, #20]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	441a      	add	r2, r3
 8003abc:	8abb      	ldrh	r3, [r7, #20]
 8003abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	8013      	strh	r3, [r2, #0]
 8003ad2:	e0a3      	b.n	8003c1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003ae2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01b      	beq.n	8003b24 <USB_DeactivateEndpoint+0x2d4>
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	441a      	add	r2, r3
 8003b0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003b32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01b      	beq.n	8003b74 <USB_DeactivateEndpoint+0x324>
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b52:	853b      	strh	r3, [r7, #40]	; 0x28
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	441a      	add	r2, r3
 8003b5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	441a      	add	r2, r3
 8003b96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	441a      	add	r2, r3
 8003bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	847b      	strh	r3, [r7, #34]	; 0x22
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	441a      	add	r2, r3
 8003c06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3734      	adds	r7, #52	; 0x34
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b0cc      	sub	sp, #304	; 0x130
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c36:	6018      	str	r0, [r3, #0]
 8003c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c40:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	785b      	ldrb	r3, [r3, #1]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	f041 817d 	bne.w	8004f4e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d908      	bls.n	8003c82 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003c80:	e007      	b.n	8003c92 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	7b1b      	ldrb	r3, [r3, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d152      	bne.n	8003d48 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6959      	ldr	r1, [r3, #20]
 8003cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	88da      	ldrh	r2, [r3, #6]
 8003cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003cc4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003cc8:	6800      	ldr	r0, [r0, #0]
 8003cca:	f001 ff23 	bl	8005b14 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cd2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003cd6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003cda:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ce6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cf8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003cfc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003d00:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	440a      	add	r2, r1
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	011a      	lsls	r2, r3, #4
 8003d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d1c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4413      	add	r3, r2
 8003d24:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d2c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d3c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	801a      	strh	r2, [r3, #0]
 8003d44:	f001 b8b5 	b.w	8004eb2 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	78db      	ldrb	r3, [r3, #3]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	f040 84c6 	bne.w	80046e6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6a1a      	ldr	r2, [r3, #32]
 8003d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	f240 8443 	bls.w	80045fe <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003da6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003db0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	441a      	add	r2, r3
 8003dbc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a1a      	ldr	r2, [r3, #32]
 8003de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003de4:	1ad2      	subs	r2, r2, r3
 8003de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003df6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 823e 	beq.w	8004296 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e1e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003e22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003e26:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f040 809a 	bne.w	8003f74 <USB_EPStartXfer+0x34c>
 8003e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003e4c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	4619      	mov	r1, r3
 8003e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003e72:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8003e76:	6812      	ldr	r2, [r2, #0]
 8003e78:	440a      	add	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	011a      	lsls	r2, r3, #4
 8003e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4413      	add	r3, r2
 8003e96:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d122      	bne.n	8003ef2 <USB_EPStartXfer+0x2ca>
 8003eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003eb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ec4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	801a      	strh	r2, [r3, #0]
 8003ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ed0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ee8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	801a      	strh	r2, [r3, #0]
 8003ef0:	e079      	b.n	8003fe6 <USB_EPStartXfer+0x3be>
 8003ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8003ef8:	d81b      	bhi.n	8003f32 <USB_EPStartXfer+0x30a>
 8003efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003efe:	085b      	lsrs	r3, r3, #1
 8003f00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <USB_EPStartXfer+0x2f2>
 8003f10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f14:	3301      	adds	r3, #1
 8003f16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	029b      	lsls	r3, r3, #10
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	801a      	strh	r2, [r3, #0]
 8003f30:	e059      	b.n	8003fe6 <USB_EPStartXfer+0x3be>
 8003f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d104      	bne.n	8003f52 <USB_EPStartXfer+0x32a>
 8003f48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003f52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	029b      	lsls	r3, r3, #10
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	801a      	strh	r2, [r3, #0]
 8003f72:	e038      	b.n	8003fe6 <USB_EPStartXfer+0x3be>
 8003f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	785b      	ldrb	r3, [r3, #1]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d130      	bne.n	8003fe6 <USB_EPStartXfer+0x3be>
 8003f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	4619      	mov	r1, r3
 8003f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f9a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003fa2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	440a      	add	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	011a      	lsls	r2, r3, #4
 8003fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fbe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	895b      	ldrh	r3, [r3, #10]
 8003ff2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ffa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6959      	ldr	r1, [r3, #20]
 8004002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004006:	b29b      	uxth	r3, r3
 8004008:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800400c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004010:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004014:	6800      	ldr	r0, [r0, #0]
 8004016:	f001 fd7d 	bl	8005b14 <USB_WritePMA>
            ep->xfer_buff += len;
 800401a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800401e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800402a:	441a      	add	r2, r3
 800402c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800403c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6a1a      	ldr	r2, [r3, #32]
 8004044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	429a      	cmp	r2, r3
 8004052:	d90f      	bls.n	8004074 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6a1a      	ldr	r2, [r3, #32]
 8004060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004064:	1ad2      	subs	r2, r2, r3
 8004066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800406a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	621a      	str	r2, [r3, #32]
 8004072:	e00e      	b.n	8004092 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004088:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2200      	movs	r2, #0
 8004090:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	785b      	ldrb	r3, [r3, #1]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 809a 	bne.w	80041d8 <USB_EPStartXfer+0x5b0>
 80040a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80040ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80040b0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	4619      	mov	r1, r3
 80040ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80040d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80040d6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	440a      	add	r2, r1
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	011a      	lsls	r2, r3, #4
 80040ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040f2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4413      	add	r3, r2
 80040fa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80040fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004102:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800410c:	2b00      	cmp	r3, #0
 800410e:	d122      	bne.n	8004156 <USB_EPStartXfer+0x52e>
 8004110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004114:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004122:	b29a      	uxth	r2, r3
 8004124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004128:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	801a      	strh	r2, [r3, #0]
 8004130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004134:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	b29b      	uxth	r3, r3
 800413e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004146:	b29a      	uxth	r2, r3
 8004148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800414c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	801a      	strh	r2, [r3, #0]
 8004154:	e083      	b.n	800425e <USB_EPStartXfer+0x636>
 8004156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800415a:	2b3e      	cmp	r3, #62	; 0x3e
 800415c:	d81b      	bhi.n	8004196 <USB_EPStartXfer+0x56e>
 800415e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004162:	085b      	lsrs	r3, r3, #1
 8004164:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d004      	beq.n	800417e <USB_EPStartXfer+0x556>
 8004174:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004178:	3301      	adds	r3, #1
 800417a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800417e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004182:	b29b      	uxth	r3, r3
 8004184:	029b      	lsls	r3, r3, #10
 8004186:	b29a      	uxth	r2, r3
 8004188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800418c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	801a      	strh	r2, [r3, #0]
 8004194:	e063      	b.n	800425e <USB_EPStartXfer+0x636>
 8004196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80041a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d104      	bne.n	80041b6 <USB_EPStartXfer+0x58e>
 80041ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80041b0:	3b01      	subs	r3, #1
 80041b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80041b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	029b      	lsls	r3, r3, #10
 80041be:	b29b      	uxth	r3, r3
 80041c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	801a      	strh	r2, [r3, #0]
 80041d6:	e042      	b.n	800425e <USB_EPStartXfer+0x636>
 80041d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	785b      	ldrb	r3, [r3, #1]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d13a      	bne.n	800425e <USB_EPStartXfer+0x636>
 80041e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80041f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80041f4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004200:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800420a:	b29b      	uxth	r3, r3
 800420c:	4619      	mov	r1, r3
 800420e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004212:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004216:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800421a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	440a      	add	r2, r1
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004228:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	011a      	lsls	r2, r3, #4
 8004232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004236:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4413      	add	r3, r2
 800423e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004246:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004250:	b29a      	uxth	r2, r3
 8004252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004256:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800425e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	891b      	ldrh	r3, [r3, #8]
 800426a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800426e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6959      	ldr	r1, [r3, #20]
 800427a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800427e:	b29b      	uxth	r3, r3
 8004280:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004284:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004288:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800428c:	6800      	ldr	r0, [r0, #0]
 800428e:	f001 fc41 	bl	8005b14 <USB_WritePMA>
 8004292:	f000 be0e 	b.w	8004eb2 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800429a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	785b      	ldrb	r3, [r3, #1]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d16d      	bne.n	8004382 <USB_EPStartXfer+0x75a>
 80042a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80042b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042c6:	4413      	add	r3, r2
 80042c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80042ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	011a      	lsls	r2, r3, #4
 80042d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042da:	4413      	add	r3, r2
 80042dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042e0:	647b      	str	r3, [r7, #68]	; 0x44
 80042e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d112      	bne.n	8004310 <USB_EPStartXfer+0x6e8>
 80042ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042f8:	801a      	strh	r2, [r3, #0]
 80042fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004308:	b29a      	uxth	r2, r3
 800430a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800430c:	801a      	strh	r2, [r3, #0]
 800430e:	e063      	b.n	80043d8 <USB_EPStartXfer+0x7b0>
 8004310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004314:	2b3e      	cmp	r3, #62	; 0x3e
 8004316:	d817      	bhi.n	8004348 <USB_EPStartXfer+0x720>
 8004318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800431c:	085b      	lsrs	r3, r3, #1
 800431e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <USB_EPStartXfer+0x710>
 800432e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004332:	3301      	adds	r3, #1
 8004334:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004338:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800433c:	b29b      	uxth	r3, r3
 800433e:	029b      	lsls	r3, r3, #10
 8004340:	b29a      	uxth	r2, r3
 8004342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004344:	801a      	strh	r2, [r3, #0]
 8004346:	e047      	b.n	80043d8 <USB_EPStartXfer+0x7b0>
 8004348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004356:	f003 031f 	and.w	r3, r3, #31
 800435a:	2b00      	cmp	r3, #0
 800435c:	d104      	bne.n	8004368 <USB_EPStartXfer+0x740>
 800435e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004362:	3b01      	subs	r3, #1
 8004364:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004368:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800436c:	b29b      	uxth	r3, r3
 800436e:	029b      	lsls	r3, r3, #10
 8004370:	b29b      	uxth	r3, r3
 8004372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800437a:	b29a      	uxth	r2, r3
 800437c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437e:	801a      	strh	r2, [r3, #0]
 8004380:	e02a      	b.n	80043d8 <USB_EPStartXfer+0x7b0>
 8004382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	785b      	ldrb	r3, [r3, #1]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d122      	bne.n	80043d8 <USB_EPStartXfer+0x7b0>
 8004392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004396:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	653b      	str	r3, [r7, #80]	; 0x50
 800439e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	461a      	mov	r2, r3
 80043b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b2:	4413      	add	r3, r2
 80043b4:	653b      	str	r3, [r7, #80]	; 0x50
 80043b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	011a      	lsls	r2, r3, #4
 80043c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c6:	4413      	add	r3, r2
 80043c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80043d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	891b      	ldrh	r3, [r3, #8]
 80043e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6959      	ldr	r1, [r3, #20]
 80043f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80043fe:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004402:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004406:	6800      	ldr	r0, [r0, #0]
 8004408:	f001 fb84 	bl	8005b14 <USB_WritePMA>
            ep->xfer_buff += len;
 800440c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695a      	ldr	r2, [r3, #20]
 8004418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800441c:	441a      	add	r2, r3
 800441e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800442a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800442e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800443a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	429a      	cmp	r2, r3
 8004444:	d90f      	bls.n	8004466 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800444a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6a1a      	ldr	r2, [r3, #32]
 8004452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004456:	1ad2      	subs	r2, r2, r3
 8004458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800445c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	621a      	str	r2, [r3, #32]
 8004464:	e00e      	b.n	8004484 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800446a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800447a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2200      	movs	r2, #0
 8004482:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004488:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	643b      	str	r3, [r7, #64]	; 0x40
 8004490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	785b      	ldrb	r3, [r3, #1]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d16d      	bne.n	800457c <USB_EPStartXfer+0x954>
 80044a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80044ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	4413      	add	r3, r2
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	011a      	lsls	r2, r3, #4
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	4413      	add	r3, r2
 80044d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044da:	637b      	str	r3, [r7, #52]	; 0x34
 80044dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d112      	bne.n	800450a <USB_EPStartXfer+0x8e2>
 80044e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f2:	801a      	strh	r2, [r3, #0]
 80044f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004502:	b29a      	uxth	r2, r3
 8004504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004506:	801a      	strh	r2, [r3, #0]
 8004508:	e05d      	b.n	80045c6 <USB_EPStartXfer+0x99e>
 800450a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800450e:	2b3e      	cmp	r3, #62	; 0x3e
 8004510:	d817      	bhi.n	8004542 <USB_EPStartXfer+0x91a>
 8004512:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004516:	085b      	lsrs	r3, r3, #1
 8004518:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800451c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d004      	beq.n	8004532 <USB_EPStartXfer+0x90a>
 8004528:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800452c:	3301      	adds	r3, #1
 800452e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004532:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004536:	b29b      	uxth	r3, r3
 8004538:	029b      	lsls	r3, r3, #10
 800453a:	b29a      	uxth	r2, r3
 800453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453e:	801a      	strh	r2, [r3, #0]
 8004540:	e041      	b.n	80045c6 <USB_EPStartXfer+0x99e>
 8004542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800454c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <USB_EPStartXfer+0x93a>
 8004558:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800455c:	3b01      	subs	r3, #1
 800455e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004562:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004566:	b29b      	uxth	r3, r3
 8004568:	029b      	lsls	r3, r3, #10
 800456a:	b29b      	uxth	r3, r3
 800456c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004574:	b29a      	uxth	r2, r3
 8004576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004578:	801a      	strh	r2, [r3, #0]
 800457a:	e024      	b.n	80045c6 <USB_EPStartXfer+0x99e>
 800457c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	785b      	ldrb	r3, [r3, #1]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d11c      	bne.n	80045c6 <USB_EPStartXfer+0x99e>
 800458c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004590:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800459a:	b29b      	uxth	r3, r3
 800459c:	461a      	mov	r2, r3
 800459e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a0:	4413      	add	r3, r2
 80045a2:	643b      	str	r3, [r7, #64]	; 0x40
 80045a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	011a      	lsls	r2, r3, #4
 80045b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b4:	4413      	add	r3, r2
 80045b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80045c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	895b      	ldrh	r3, [r3, #10]
 80045d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6959      	ldr	r1, [r3, #20]
 80045e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80045ec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80045f0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80045f4:	6800      	ldr	r0, [r0, #0]
 80045f6:	f001 fa8d 	bl	8005b14 <USB_WritePMA>
 80045fa:	f000 bc5a 	b.w	8004eb2 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80045fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800460e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004612:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800461c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004634:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800463c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	441a      	add	r2, r3
 8004652:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800465a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800465e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004666:	b29b      	uxth	r3, r3
 8004668:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800466a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800466e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800467a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004684:	b29b      	uxth	r3, r3
 8004686:	461a      	mov	r2, r3
 8004688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800468a:	4413      	add	r3, r2
 800468c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800468e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	011a      	lsls	r2, r3, #4
 800469c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800469e:	4413      	add	r3, r2
 80046a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80046a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80046b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	891b      	ldrh	r3, [r3, #8]
 80046bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6959      	ldr	r1, [r3, #20]
 80046cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80046d6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80046da:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80046de:	6800      	ldr	r0, [r0, #0]
 80046e0:	f001 fa18 	bl	8005b14 <USB_WritePMA>
 80046e4:	e3e5      	b.n	8004eb2 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80046e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29b      	uxth	r3, r3
 8004704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004714:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800471e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	441a      	add	r2, r3
 800472a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800472e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004736:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800473a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473e:	b29b      	uxth	r3, r3
 8004740:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6a1a      	ldr	r2, [r3, #32]
 800474e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004752:	1ad2      	subs	r2, r2, r3
 8004754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004764:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800476e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 81bc 	beq.w	8004b00 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800478c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800479a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	785b      	ldrb	r3, [r3, #1]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d16d      	bne.n	8004882 <USB_EPStartXfer+0xc5a>
 80047a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80047b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c6:	4413      	add	r3, r2
 80047c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	011a      	lsls	r2, r3, #4
 80047d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047da:	4413      	add	r3, r2
 80047dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047e0:	677b      	str	r3, [r7, #116]	; 0x74
 80047e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d112      	bne.n	8004810 <USB_EPStartXfer+0xbe8>
 80047ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047f8:	801a      	strh	r2, [r3, #0]
 80047fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004808:	b29a      	uxth	r2, r3
 800480a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800480c:	801a      	strh	r2, [r3, #0]
 800480e:	e060      	b.n	80048d2 <USB_EPStartXfer+0xcaa>
 8004810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004814:	2b3e      	cmp	r3, #62	; 0x3e
 8004816:	d817      	bhi.n	8004848 <USB_EPStartXfer+0xc20>
 8004818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800481c:	085b      	lsrs	r3, r3, #1
 800481e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d004      	beq.n	8004838 <USB_EPStartXfer+0xc10>
 800482e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004832:	3301      	adds	r3, #1
 8004834:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004838:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800483c:	b29b      	uxth	r3, r3
 800483e:	029b      	lsls	r3, r3, #10
 8004840:	b29a      	uxth	r2, r3
 8004842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004844:	801a      	strh	r2, [r3, #0]
 8004846:	e044      	b.n	80048d2 <USB_EPStartXfer+0xcaa>
 8004848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004856:	f003 031f 	and.w	r3, r3, #31
 800485a:	2b00      	cmp	r3, #0
 800485c:	d104      	bne.n	8004868 <USB_EPStartXfer+0xc40>
 800485e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004862:	3b01      	subs	r3, #1
 8004864:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004868:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800486c:	b29b      	uxth	r3, r3
 800486e:	029b      	lsls	r3, r3, #10
 8004870:	b29b      	uxth	r3, r3
 8004872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800487a:	b29a      	uxth	r2, r3
 800487c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800487e:	801a      	strh	r2, [r3, #0]
 8004880:	e027      	b.n	80048d2 <USB_EPStartXfer+0xcaa>
 8004882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	785b      	ldrb	r3, [r3, #1]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d11f      	bne.n	80048d2 <USB_EPStartXfer+0xcaa>
 8004892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004896:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048a8:	4413      	add	r3, r2
 80048aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	011a      	lsls	r2, r3, #4
 80048bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048c0:	4413      	add	r3, r2
 80048c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80048d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	895b      	ldrh	r3, [r3, #10]
 80048de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6959      	ldr	r1, [r3, #20]
 80048ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80048f8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80048fc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004900:	6800      	ldr	r0, [r0, #0]
 8004902:	f001 f907 	bl	8005b14 <USB_WritePMA>
          ep->xfer_buff += len;
 8004906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800490a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004916:	441a      	add	r2, r3
 8004918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800491c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6a1a      	ldr	r2, [r3, #32]
 8004930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	429a      	cmp	r2, r3
 800493e:	d90f      	bls.n	8004960 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8004940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6a1a      	ldr	r2, [r3, #32]
 800494c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004950:	1ad2      	subs	r2, r2, r3
 8004952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	621a      	str	r2, [r3, #32]
 800495e:	e00e      	b.n	800497e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8004960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004974:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2200      	movs	r2, #0
 800497c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800497e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 8295 	beq.w	8004eb2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800498c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	785b      	ldrb	r3, [r3, #1]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d16d      	bne.n	8004a74 <USB_EPStartXfer+0xe4c>
 8004998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800499c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049b8:	4413      	add	r3, r2
 80049ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80049bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	011a      	lsls	r2, r3, #4
 80049ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049cc:	4413      	add	r3, r2
 80049ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049d2:	667b      	str	r3, [r7, #100]	; 0x64
 80049d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d112      	bne.n	8004a02 <USB_EPStartXfer+0xdda>
 80049dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ea:	801a      	strh	r2, [r3, #0]
 80049ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049fe:	801a      	strh	r2, [r3, #0]
 8004a00:	e063      	b.n	8004aca <USB_EPStartXfer+0xea2>
 8004a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a06:	2b3e      	cmp	r3, #62	; 0x3e
 8004a08:	d817      	bhi.n	8004a3a <USB_EPStartXfer+0xe12>
 8004a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d004      	beq.n	8004a2a <USB_EPStartXfer+0xe02>
 8004a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a24:	3301      	adds	r3, #1
 8004a26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	029b      	lsls	r3, r3, #10
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a36:	801a      	strh	r2, [r3, #0]
 8004a38:	e047      	b.n	8004aca <USB_EPStartXfer+0xea2>
 8004a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a48:	f003 031f 	and.w	r3, r3, #31
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <USB_EPStartXfer+0xe32>
 8004a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a54:	3b01      	subs	r3, #1
 8004a56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	029b      	lsls	r3, r3, #10
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a70:	801a      	strh	r2, [r3, #0]
 8004a72:	e02a      	b.n	8004aca <USB_EPStartXfer+0xea2>
 8004a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	785b      	ldrb	r3, [r3, #1]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d122      	bne.n	8004aca <USB_EPStartXfer+0xea2>
 8004a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	673b      	str	r3, [r7, #112]	; 0x70
 8004a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004aa4:	4413      	add	r3, r2
 8004aa6:	673b      	str	r3, [r7, #112]	; 0x70
 8004aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	011a      	lsls	r2, r3, #4
 8004ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ab8:	4413      	add	r3, r2
 8004aba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004abe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	891b      	ldrh	r3, [r3, #8]
 8004ad6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6959      	ldr	r1, [r3, #20]
 8004ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004af0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004af4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004af8:	6800      	ldr	r0, [r0, #0]
 8004afa:	f001 f80b 	bl	8005b14 <USB_WritePMA>
 8004afe:	e1d8      	b.n	8004eb2 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	785b      	ldrb	r3, [r3, #1]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d178      	bne.n	8004c02 <USB_EPStartXfer+0xfda>
 8004b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b34:	4413      	add	r3, r2
 8004b36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	011a      	lsls	r2, r3, #4
 8004b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d116      	bne.n	8004b8c <USB_EPStartXfer+0xf64>
 8004b5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b70:	801a      	strh	r2, [r3, #0]
 8004b72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b88:	801a      	strh	r2, [r3, #0]
 8004b8a:	e06b      	b.n	8004c64 <USB_EPStartXfer+0x103c>
 8004b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b90:	2b3e      	cmp	r3, #62	; 0x3e
 8004b92:	d818      	bhi.n	8004bc6 <USB_EPStartXfer+0xf9e>
 8004b94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b98:	085b      	lsrs	r3, r3, #1
 8004b9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d004      	beq.n	8004bb4 <USB_EPStartXfer+0xf8c>
 8004baa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004bae:	3301      	adds	r3, #1
 8004bb0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004bb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	029b      	lsls	r3, r3, #10
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bc2:	801a      	strh	r2, [r3, #0]
 8004bc4:	e04e      	b.n	8004c64 <USB_EPStartXfer+0x103c>
 8004bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d104      	bne.n	8004be6 <USB_EPStartXfer+0xfbe>
 8004bdc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004be0:	3b01      	subs	r3, #1
 8004be2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004be6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	029b      	lsls	r3, r3, #10
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bfe:	801a      	strh	r2, [r3, #0]
 8004c00:	e030      	b.n	8004c64 <USB_EPStartXfer+0x103c>
 8004c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	785b      	ldrb	r3, [r3, #1]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d128      	bne.n	8004c64 <USB_EPStartXfer+0x103c>
 8004c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	461a      	mov	r2, r3
 8004c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c36:	4413      	add	r3, r2
 8004c38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	011a      	lsls	r2, r3, #4
 8004c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c4e:	4413      	add	r3, r2
 8004c50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	891b      	ldrh	r3, [r3, #8]
 8004c70:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6959      	ldr	r1, [r3, #20]
 8004c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c8a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004c8e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004c92:	6800      	ldr	r0, [r0, #0]
 8004c94:	f000 ff3e 	bl	8005b14 <USB_WritePMA>
          ep->xfer_buff += len;
 8004c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695a      	ldr	r2, [r3, #20]
 8004ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca8:	441a      	add	r2, r3
 8004caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6a1a      	ldr	r2, [r3, #32]
 8004cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d90f      	bls.n	8004cf2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8004cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6a1a      	ldr	r2, [r3, #32]
 8004cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ce2:	1ad2      	subs	r2, r2, r3
 8004ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	621a      	str	r2, [r3, #32]
 8004cf0:	e00e      	b.n	8004d10 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8004cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 80cc 	beq.w	8004eb2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	785b      	ldrb	r3, [r3, #1]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d178      	bne.n	8004e2a <USB_EPStartXfer+0x1202>
 8004d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	011a      	lsls	r2, r3, #4
 8004d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d74:	4413      	add	r3, r2
 8004d76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d116      	bne.n	8004db4 <USB_EPStartXfer+0x118c>
 8004d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d98:	801a      	strh	r2, [r3, #0]
 8004d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004db0:	801a      	strh	r2, [r3, #0]
 8004db2:	e064      	b.n	8004e7e <USB_EPStartXfer+0x1256>
 8004db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004db8:	2b3e      	cmp	r3, #62	; 0x3e
 8004dba:	d818      	bhi.n	8004dee <USB_EPStartXfer+0x11c6>
 8004dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d004      	beq.n	8004ddc <USB_EPStartXfer+0x11b4>
 8004dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	029b      	lsls	r3, r3, #10
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dea:	801a      	strh	r2, [r3, #0]
 8004dec:	e047      	b.n	8004e7e <USB_EPStartXfer+0x1256>
 8004dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <USB_EPStartXfer+0x11e6>
 8004e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	029b      	lsls	r3, r3, #10
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e26:	801a      	strh	r2, [r3, #0]
 8004e28:	e029      	b.n	8004e7e <USB_EPStartXfer+0x1256>
 8004e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	785b      	ldrb	r3, [r3, #1]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d121      	bne.n	8004e7e <USB_EPStartXfer+0x1256>
 8004e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e50:	4413      	add	r3, r2
 8004e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	011a      	lsls	r2, r3, #4
 8004e64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e68:	4413      	add	r3, r2
 8004e6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	895b      	ldrh	r3, [r3, #10]
 8004e8a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6959      	ldr	r1, [r3, #20]
 8004e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ea4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004ea8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004eac:	6800      	ldr	r0, [r0, #0]
 8004eae:	f000 fe31 	bl	8005b14 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ed4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ee0:	8013      	strh	r3, [r2, #0]
 8004ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004eea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004eee:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004ef2:	8812      	ldrh	r2, [r2, #0]
 8004ef4:	f082 0210 	eor.w	r2, r2, #16
 8004ef8:	801a      	strh	r2, [r3, #0]
 8004efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004efe:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004f02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f06:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004f0a:	8812      	ldrh	r2, [r2, #0]
 8004f0c:	f082 0220 	eor.w	r2, r2, #32
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	441a      	add	r2, r3
 8004f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f30:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	8013      	strh	r3, [r2, #0]
 8004f4a:	f000 bc9f 	b.w	800588c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	7b1b      	ldrb	r3, [r3, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f040 80ae 	bne.w	80050bc <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	699a      	ldr	r2, [r3, #24]
 8004f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d917      	bls.n	8004fac <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8004f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8004f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	699a      	ldr	r2, [r3, #24]
 8004f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f9c:	1ad2      	subs	r2, r2, r3
 8004f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	619a      	str	r2, [r3, #24]
 8004faa:	e00e      	b.n	8004fca <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8004fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8004fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fee:	4413      	add	r3, r2
 8004ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	011a      	lsls	r2, r3, #4
 8005002:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005006:	4413      	add	r3, r2
 8005008:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800500c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005014:	2b00      	cmp	r3, #0
 8005016:	d116      	bne.n	8005046 <USB_EPStartXfer+0x141e>
 8005018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005024:	b29a      	uxth	r2, r3
 8005026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800502a:	801a      	strh	r2, [r3, #0]
 800502c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503c:	b29a      	uxth	r2, r3
 800503e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005042:	801a      	strh	r2, [r3, #0]
 8005044:	e3e8      	b.n	8005818 <USB_EPStartXfer+0x1bf0>
 8005046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800504a:	2b3e      	cmp	r3, #62	; 0x3e
 800504c:	d818      	bhi.n	8005080 <USB_EPStartXfer+0x1458>
 800504e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d004      	beq.n	800506e <USB_EPStartXfer+0x1446>
 8005064:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005068:	3301      	adds	r3, #1
 800506a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800506e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005072:	b29b      	uxth	r3, r3
 8005074:	029b      	lsls	r3, r3, #10
 8005076:	b29a      	uxth	r2, r3
 8005078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800507c:	801a      	strh	r2, [r3, #0]
 800507e:	e3cb      	b.n	8005818 <USB_EPStartXfer+0x1bf0>
 8005080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800508a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	2b00      	cmp	r3, #0
 8005094:	d104      	bne.n	80050a0 <USB_EPStartXfer+0x1478>
 8005096:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800509a:	3b01      	subs	r3, #1
 800509c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80050a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	029b      	lsls	r3, r3, #10
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050b8:	801a      	strh	r2, [r3, #0]
 80050ba:	e3ad      	b.n	8005818 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80050bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	78db      	ldrb	r3, [r3, #3]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	f040 8200 	bne.w	80054ce <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80050ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f040 8091 	bne.w	8005202 <USB_EPStartXfer+0x15da>
 80050e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	461a      	mov	r2, r3
 8005100:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005104:	4413      	add	r3, r2
 8005106:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800510a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800510e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	011a      	lsls	r2, r3, #4
 8005118:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800511c:	4413      	add	r3, r2
 800511e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005122:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800512a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d116      	bne.n	8005164 <USB_EPStartXfer+0x153c>
 8005136:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	b29b      	uxth	r3, r3
 800513e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005142:	b29a      	uxth	r2, r3
 8005144:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005148:	801a      	strh	r2, [r3, #0]
 800514a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	b29b      	uxth	r3, r3
 8005152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800515a:	b29a      	uxth	r2, r3
 800515c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005160:	801a      	strh	r2, [r3, #0]
 8005162:	e083      	b.n	800526c <USB_EPStartXfer+0x1644>
 8005164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005168:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	2b3e      	cmp	r3, #62	; 0x3e
 8005172:	d820      	bhi.n	80051b6 <USB_EPStartXfer+0x158e>
 8005174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005178:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	085b      	lsrs	r3, r3, #1
 8005182:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <USB_EPStartXfer+0x157c>
 800519a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800519e:	3301      	adds	r3, #1
 80051a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80051a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	029b      	lsls	r3, r3, #10
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051b2:	801a      	strh	r2, [r3, #0]
 80051b4:	e05a      	b.n	800526c <USB_EPStartXfer+0x1644>
 80051b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80051c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f003 031f 	and.w	r3, r3, #31
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <USB_EPStartXfer+0x15be>
 80051dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e0:	3b01      	subs	r3, #1
 80051e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80051e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	029b      	lsls	r3, r3, #10
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	e034      	b.n	800526c <USB_EPStartXfer+0x1644>
 8005202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	785b      	ldrb	r3, [r3, #1]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d12c      	bne.n	800526c <USB_EPStartXfer+0x1644>
 8005212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005216:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005224:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800522e:	b29b      	uxth	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005236:	4413      	add	r3, r2
 8005238:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800523c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005240:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	011a      	lsls	r2, r3, #4
 800524a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800524e:	4413      	add	r3, r2
 8005250:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	b29a      	uxth	r2, r3
 8005266:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800526a:	801a      	strh	r2, [r3, #0]
 800526c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005270:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800527a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800527e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	2b00      	cmp	r3, #0
 8005288:	f040 8091 	bne.w	80053ae <USB_EPStartXfer+0x1786>
 800528c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005290:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800529a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800529e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052b0:	4413      	add	r3, r2
 80052b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80052b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	011a      	lsls	r2, r3, #4
 80052c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052c8:	4413      	add	r3, r2
 80052ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d116      	bne.n	8005310 <USB_EPStartXfer+0x16e8>
 80052e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052f4:	801a      	strh	r2, [r3, #0]
 80052f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005306:	b29a      	uxth	r2, r3
 8005308:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800530c:	801a      	strh	r2, [r3, #0]
 800530e:	e07c      	b.n	800540a <USB_EPStartXfer+0x17e2>
 8005310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005314:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b3e      	cmp	r3, #62	; 0x3e
 800531e:	d820      	bhi.n	8005362 <USB_EPStartXfer+0x173a>
 8005320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	085b      	lsrs	r3, r3, #1
 800532e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005336:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <USB_EPStartXfer+0x1728>
 8005346:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800534a:	3301      	adds	r3, #1
 800534c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005350:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005354:	b29b      	uxth	r3, r3
 8005356:	029b      	lsls	r3, r3, #10
 8005358:	b29a      	uxth	r2, r3
 800535a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800535e:	801a      	strh	r2, [r3, #0]
 8005360:	e053      	b.n	800540a <USB_EPStartXfer+0x17e2>
 8005362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005378:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	2b00      	cmp	r3, #0
 8005386:	d104      	bne.n	8005392 <USB_EPStartXfer+0x176a>
 8005388:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800538c:	3b01      	subs	r3, #1
 800538e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005392:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005396:	b29b      	uxth	r3, r3
 8005398:	029b      	lsls	r3, r3, #10
 800539a:	b29b      	uxth	r3, r3
 800539c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053aa:	801a      	strh	r2, [r3, #0]
 80053ac:	e02d      	b.n	800540a <USB_EPStartXfer+0x17e2>
 80053ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d125      	bne.n	800540a <USB_EPStartXfer+0x17e2>
 80053be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053d4:	4413      	add	r3, r2
 80053d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	011a      	lsls	r2, r3, #4
 80053e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053ec:	4413      	add	r3, r2
 80053ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	b29a      	uxth	r2, r3
 8005404:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005408:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800540a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 81fe 	beq.w	8005818 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800541c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005420:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800543c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <USB_EPStartXfer+0x182c>
 8005448:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800544c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10d      	bne.n	8005470 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005454:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800545c:	2b00      	cmp	r3, #0
 800545e:	f040 81db 	bne.w	8005818 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005462:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	f040 81d4 	bne.w	8005818 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005474:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800549a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	441a      	add	r2, r3
 80054b4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80054b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	8013      	strh	r3, [r2, #0]
 80054cc:	e1a4      	b.n	8005818 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80054ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	78db      	ldrb	r3, [r3, #3]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	f040 819a 	bne.w	8005814 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80054e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699a      	ldr	r2, [r3, #24]
 80054ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d917      	bls.n	800552c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80054fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800550c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005510:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699a      	ldr	r2, [r3, #24]
 8005518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800551c:	1ad2      	subs	r2, r2, r3
 800551e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	619a      	str	r2, [r3, #24]
 800552a:	e00e      	b.n	800554a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800552c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005530:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800553c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2200      	movs	r2, #0
 8005548:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800554a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	785b      	ldrb	r3, [r3, #1]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d178      	bne.n	800564c <USB_EPStartXfer+0x1a24>
 800555a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005576:	b29b      	uxth	r3, r3
 8005578:	461a      	mov	r2, r3
 800557a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800557e:	4413      	add	r3, r2
 8005580:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	011a      	lsls	r2, r3, #4
 8005592:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005596:	4413      	add	r3, r2
 8005598:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800559c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d116      	bne.n	80055d6 <USB_EPStartXfer+0x19ae>
 80055a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055ba:	801a      	strh	r2, [r3, #0]
 80055bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055d2:	801a      	strh	r2, [r3, #0]
 80055d4:	e06b      	b.n	80056ae <USB_EPStartXfer+0x1a86>
 80055d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055da:	2b3e      	cmp	r3, #62	; 0x3e
 80055dc:	d818      	bhi.n	8005610 <USB_EPStartXfer+0x19e8>
 80055de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e2:	085b      	lsrs	r3, r3, #1
 80055e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d004      	beq.n	80055fe <USB_EPStartXfer+0x19d6>
 80055f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055f8:	3301      	adds	r3, #1
 80055fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005602:	b29b      	uxth	r3, r3
 8005604:	029b      	lsls	r3, r3, #10
 8005606:	b29a      	uxth	r2, r3
 8005608:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800560c:	801a      	strh	r2, [r3, #0]
 800560e:	e04e      	b.n	80056ae <USB_EPStartXfer+0x1a86>
 8005610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005614:	095b      	lsrs	r3, r3, #5
 8005616:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800561a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800561e:	f003 031f 	and.w	r3, r3, #31
 8005622:	2b00      	cmp	r3, #0
 8005624:	d104      	bne.n	8005630 <USB_EPStartXfer+0x1a08>
 8005626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800562a:	3b01      	subs	r3, #1
 800562c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005634:	b29b      	uxth	r3, r3
 8005636:	029b      	lsls	r3, r3, #10
 8005638:	b29b      	uxth	r3, r3
 800563a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800563e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005642:	b29a      	uxth	r2, r3
 8005644:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005648:	801a      	strh	r2, [r3, #0]
 800564a:	e030      	b.n	80056ae <USB_EPStartXfer+0x1a86>
 800564c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d128      	bne.n	80056ae <USB_EPStartXfer+0x1a86>
 800565c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005660:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800566a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005678:	b29b      	uxth	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005680:	4413      	add	r3, r2
 8005682:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	011a      	lsls	r2, r3, #4
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005698:	4413      	add	r3, r2
 800569a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800569e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056ac:	801a      	strh	r2, [r3, #0]
 80056ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	785b      	ldrb	r3, [r3, #1]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d178      	bne.n	80057be <USB_EPStartXfer+0x1b96>
 80056cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80056da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056f0:	4413      	add	r3, r2
 80056f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80056f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	011a      	lsls	r2, r3, #4
 8005704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005708:	4413      	add	r3, r2
 800570a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800570e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d116      	bne.n	8005748 <USB_EPStartXfer+0x1b20>
 800571a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005726:	b29a      	uxth	r2, r3
 8005728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	b29b      	uxth	r3, r3
 8005736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800573a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800573e:	b29a      	uxth	r2, r3
 8005740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005744:	801a      	strh	r2, [r3, #0]
 8005746:	e067      	b.n	8005818 <USB_EPStartXfer+0x1bf0>
 8005748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800574c:	2b3e      	cmp	r3, #62	; 0x3e
 800574e:	d818      	bhi.n	8005782 <USB_EPStartXfer+0x1b5a>
 8005750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005754:	085b      	lsrs	r3, r3, #1
 8005756:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800575a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d004      	beq.n	8005770 <USB_EPStartXfer+0x1b48>
 8005766:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800576a:	3301      	adds	r3, #1
 800576c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005770:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005774:	b29b      	uxth	r3, r3
 8005776:	029b      	lsls	r3, r3, #10
 8005778:	b29a      	uxth	r2, r3
 800577a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	e04a      	b.n	8005818 <USB_EPStartXfer+0x1bf0>
 8005782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800578c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005790:	f003 031f 	and.w	r3, r3, #31
 8005794:	2b00      	cmp	r3, #0
 8005796:	d104      	bne.n	80057a2 <USB_EPStartXfer+0x1b7a>
 8005798:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800579c:	3b01      	subs	r3, #1
 800579e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	029b      	lsls	r3, r3, #10
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057ba:	801a      	strh	r2, [r3, #0]
 80057bc:	e02c      	b.n	8005818 <USB_EPStartXfer+0x1bf0>
 80057be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	785b      	ldrb	r3, [r3, #1]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d124      	bne.n	8005818 <USB_EPStartXfer+0x1bf0>
 80057ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057dc:	b29b      	uxth	r3, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e4:	4413      	add	r3, r2
 80057e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	011a      	lsls	r2, r3, #4
 80057f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fc:	4413      	add	r3, r2
 80057fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005802:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800580a:	b29a      	uxth	r2, r3
 800580c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005810:	801a      	strh	r2, [r3, #0]
 8005812:	e001      	b.n	8005818 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e03a      	b.n	800588e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	b29b      	uxth	r3, r3
 8005836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800583a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005842:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005846:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800584a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800584e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005852:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005856:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800585a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	441a      	add	r2, r3
 8005874:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800587c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005888:	b29b      	uxth	r3, r3
 800588a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d020      	beq.n	80058ec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c0:	81bb      	strh	r3, [r7, #12]
 80058c2:	89bb      	ldrh	r3, [r7, #12]
 80058c4:	f083 0310 	eor.w	r3, r3, #16
 80058c8:	81bb      	strh	r3, [r7, #12]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	441a      	add	r2, r3
 80058d4:	89bb      	ldrh	r3, [r7, #12]
 80058d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	8013      	strh	r3, [r2, #0]
 80058ea:	e01f      	b.n	800592c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005902:	81fb      	strh	r3, [r7, #14]
 8005904:	89fb      	ldrh	r3, [r7, #14]
 8005906:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800590a:	81fb      	strh	r3, [r7, #14]
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	441a      	add	r2, r3
 8005916:	89fb      	ldrh	r3, [r7, #14]
 8005918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005928:	b29b      	uxth	r3, r3
 800592a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr

08005938 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	7b1b      	ldrb	r3, [r3, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	f040 809d 	bne.w	8005a86 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	785b      	ldrb	r3, [r3, #1]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d04c      	beq.n	80059ee <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	823b      	strh	r3, [r7, #16]
 8005962:	8a3b      	ldrh	r3, [r7, #16]
 8005964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01b      	beq.n	80059a4 <USB_EPClearStall+0x6c>
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005982:	81fb      	strh	r3, [r7, #14]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	441a      	add	r2, r3
 800598e:	89fb      	ldrh	r3, [r7, #14]
 8005990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	78db      	ldrb	r3, [r3, #3]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d06c      	beq.n	8005a86 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c2:	81bb      	strh	r3, [r7, #12]
 80059c4:	89bb      	ldrh	r3, [r7, #12]
 80059c6:	f083 0320 	eor.w	r3, r3, #32
 80059ca:	81bb      	strh	r3, [r7, #12]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	441a      	add	r2, r3
 80059d6:	89bb      	ldrh	r3, [r7, #12]
 80059d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	8013      	strh	r3, [r2, #0]
 80059ec:	e04b      	b.n	8005a86 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	82fb      	strh	r3, [r7, #22]
 80059fc:	8afb      	ldrh	r3, [r7, #22]
 80059fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01b      	beq.n	8005a3e <USB_EPClearStall+0x106>
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1c:	82bb      	strh	r3, [r7, #20]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	441a      	add	r2, r3
 8005a28:	8abb      	ldrh	r3, [r7, #20]
 8005a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a54:	827b      	strh	r3, [r7, #18]
 8005a56:	8a7b      	ldrh	r3, [r7, #18]
 8005a58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a5c:	827b      	strh	r3, [r7, #18]
 8005a5e:	8a7b      	ldrh	r3, [r7, #18]
 8005a60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a64:	827b      	strh	r3, [r7, #18]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	441a      	add	r2, r3
 8005a70:	8a7b      	ldrh	r3, [r7, #18]
 8005a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr

08005a92 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d103      	bne.n	8005aac <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2280      	movs	r2, #128	; 0x80
 8005aa8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr

08005ab8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr

08005acc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr

08005ae0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005af2:	68fb      	ldr	r3, [r7, #12]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr

08005afe <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr

08005b14 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b08d      	sub	sp, #52	; 0x34
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	4611      	mov	r1, r2
 8005b20:	461a      	mov	r2, r3
 8005b22:	460b      	mov	r3, r1
 8005b24:	80fb      	strh	r3, [r7, #6]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b2a:	88bb      	ldrh	r3, [r7, #4]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b3a:	88fb      	ldrh	r3, [r7, #6]
 8005b3c:	005a      	lsls	r2, r3, #1
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b46:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4c:	e01e      	b.n	8005b8c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	3301      	adds	r3, #1
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	021b      	lsls	r3, r3, #8
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	3302      	adds	r3, #2
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	3302      	adds	r3, #2
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	3301      	adds	r3, #1
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1dd      	bne.n	8005b4e <USB_WritePMA+0x3a>
  }
}
 8005b92:	bf00      	nop
 8005b94:	bf00      	nop
 8005b96:	3734      	adds	r7, #52	; 0x34
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bc80      	pop	{r7}
 8005b9c:	4770      	bx	lr

08005b9e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b08b      	sub	sp, #44	; 0x2c
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	4611      	mov	r1, r2
 8005baa:	461a      	mov	r2, r3
 8005bac:	460b      	mov	r3, r1
 8005bae:	80fb      	strh	r3, [r7, #6]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005bb4:	88bb      	ldrh	r3, [r7, #4]
 8005bb6:	085b      	lsrs	r3, r3, #1
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	005a      	lsls	r2, r3, #1
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bd0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd6:	e01b      	b.n	8005c10 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	3302      	adds	r3, #2
 8005be4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	0a1b      	lsrs	r3, r3, #8
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	3301      	adds	r3, #1
 8005c02:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	3302      	adds	r3, #2
 8005c08:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1e0      	bne.n	8005bd8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005c16:	88bb      	ldrh	r3, [r7, #4]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d007      	beq.n	8005c32 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	701a      	strb	r2, [r3, #0]
  }
}
 8005c32:	bf00      	nop
 8005c34:	372c      	adds	r7, #44	; 0x2c
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr

08005c3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	7c1b      	ldrb	r3, [r3, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d115      	bne.n	8005c80 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c58:	2202      	movs	r2, #2
 8005c5a:	2181      	movs	r1, #129	; 0x81
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 ff2e 	bl	8007abe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	2101      	movs	r1, #1
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f001 ff24 	bl	8007abe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005c7e:	e012      	b.n	8005ca6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c80:	2340      	movs	r3, #64	; 0x40
 8005c82:	2202      	movs	r2, #2
 8005c84:	2181      	movs	r1, #129	; 0x81
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f001 ff19 	bl	8007abe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c92:	2340      	movs	r3, #64	; 0x40
 8005c94:	2202      	movs	r2, #2
 8005c96:	2101      	movs	r1, #1
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 ff10 	bl	8007abe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ca6:	2308      	movs	r3, #8
 8005ca8:	2203      	movs	r2, #3
 8005caa:	2182      	movs	r1, #130	; 0x82
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f001 ff06 	bl	8007abe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005cb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005cbc:	f002 f826 	bl	8007d0c <USBD_static_malloc>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d102      	bne.n	8005cd8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	73fb      	strb	r3, [r7, #15]
 8005cd6:	e026      	b.n	8005d26 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cde:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	7c1b      	ldrb	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d109      	bne.n	8005d16 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f001 ffc6 	bl	8007ca0 <USBD_LL_PrepareReceive>
 8005d14:	e007      	b.n	8005d26 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d1c:	2340      	movs	r3, #64	; 0x40
 8005d1e:	2101      	movs	r1, #1
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f001 ffbd 	bl	8007ca0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005d40:	2181      	movs	r1, #129	; 0x81
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f001 fee1 	bl	8007b0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d4e:	2101      	movs	r1, #1
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 feda 	bl	8007b0a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005d5e:	2182      	movs	r1, #130	; 0x82
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f001 fed2 	bl	8007b0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00e      	beq.n	8005d94 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 ffcc 	bl	8007d24 <USBD_static_free>
    pdev->pClassData = NULL;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b086      	sub	sp, #24
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dae:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d039      	beq.n	8005e3c <USBD_CDC_Setup+0x9e>
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d17f      	bne.n	8005ecc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	88db      	ldrh	r3, [r3, #6]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d029      	beq.n	8005e28 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	b25b      	sxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	da11      	bge.n	8005e02 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005dea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	88d2      	ldrh	r2, [r2, #6]
 8005df0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005df2:	6939      	ldr	r1, [r7, #16]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	88db      	ldrh	r3, [r3, #6]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f001 fa09 	bl	8007212 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005e00:	e06b      	b.n	8005eda <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	785a      	ldrb	r2, [r3, #1]
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	88db      	ldrh	r3, [r3, #6]
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005e18:	6939      	ldr	r1, [r7, #16]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	88db      	ldrh	r3, [r3, #6]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f001 fa24 	bl	800726e <USBD_CtlPrepareRx>
      break;
 8005e26:	e058      	b.n	8005eda <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	7850      	ldrb	r0, [r2, #1]
 8005e34:	2200      	movs	r2, #0
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	4798      	blx	r3
      break;
 8005e3a:	e04e      	b.n	8005eda <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	785b      	ldrb	r3, [r3, #1]
 8005e40:	2b0b      	cmp	r3, #11
 8005e42:	d02e      	beq.n	8005ea2 <USBD_CDC_Setup+0x104>
 8005e44:	2b0b      	cmp	r3, #11
 8005e46:	dc38      	bgt.n	8005eba <USBD_CDC_Setup+0x11c>
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <USBD_CDC_Setup+0xb4>
 8005e4c:	2b0a      	cmp	r3, #10
 8005e4e:	d014      	beq.n	8005e7a <USBD_CDC_Setup+0xdc>
 8005e50:	e033      	b.n	8005eba <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d107      	bne.n	8005e6c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005e5c:	f107 030c 	add.w	r3, r7, #12
 8005e60:	2202      	movs	r2, #2
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f001 f9d4 	bl	8007212 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e6a:	e02e      	b.n	8005eca <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f001 f965 	bl	800713e <USBD_CtlError>
            ret = USBD_FAIL;
 8005e74:	2302      	movs	r3, #2
 8005e76:	75fb      	strb	r3, [r7, #23]
          break;
 8005e78:	e027      	b.n	8005eca <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d107      	bne.n	8005e94 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e84:	f107 030f 	add.w	r3, r7, #15
 8005e88:	2201      	movs	r2, #1
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f001 f9c0 	bl	8007212 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e92:	e01a      	b.n	8005eca <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f001 f951 	bl	800713e <USBD_CtlError>
            ret = USBD_FAIL;
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	75fb      	strb	r3, [r7, #23]
          break;
 8005ea0:	e013      	b.n	8005eca <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d00d      	beq.n	8005ec8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005eac:	6839      	ldr	r1, [r7, #0]
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f001 f945 	bl	800713e <USBD_CtlError>
            ret = USBD_FAIL;
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005eb8:	e006      	b.n	8005ec8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f001 f93e 	bl	800713e <USBD_CtlError>
          ret = USBD_FAIL;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ec6:	e000      	b.n	8005eca <USBD_CDC_Setup+0x12c>
          break;
 8005ec8:	bf00      	nop
      }
      break;
 8005eca:	e006      	b.n	8005eda <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005ecc:	6839      	ldr	r1, [r7, #0]
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f001 f935 	bl	800713e <USBD_CtlError>
      ret = USBD_FAIL;
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ed8:	bf00      	nop
  }

  return ret;
 8005eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005efe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d03a      	beq.n	8005f80 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005f0a:	78fa      	ldrb	r2, [r7, #3]
 8005f0c:	6879      	ldr	r1, [r7, #4]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	440b      	add	r3, r1
 8005f18:	331c      	adds	r3, #28
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d029      	beq.n	8005f74 <USBD_CDC_DataIn+0x90>
 8005f20:	78fa      	ldrb	r2, [r7, #3]
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	331c      	adds	r3, #28
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	78f9      	ldrb	r1, [r7, #3]
 8005f34:	68b8      	ldr	r0, [r7, #8]
 8005f36:	460b      	mov	r3, r1
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	440b      	add	r3, r1
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	4403      	add	r3, r0
 8005f40:	3338      	adds	r3, #56	; 0x38
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f48:	fb01 f303 	mul.w	r3, r1, r3
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d110      	bne.n	8005f74 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005f52:	78fa      	ldrb	r2, [r7, #3]
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	440b      	add	r3, r1
 8005f60:	331c      	adds	r3, #28
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f66:	78f9      	ldrb	r1, [r7, #3]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 fe74 	bl	8007c5a <USBD_LL_Transmit>
 8005f72:	e003      	b.n	8005f7c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	e000      	b.n	8005f82 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005f80:	2302      	movs	r3, #2
  }
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	460b      	mov	r3, r1
 8005f94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f9e:	78fb      	ldrb	r3, [r7, #3]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f001 fe9f 	bl	8007ce6 <USBD_LL_GetRxDataSize>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00d      	beq.n	8005fd6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005fce:	4611      	mov	r1, r2
 8005fd0:	4798      	blx	r3

    return USBD_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e000      	b.n	8005fd8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005fd6:	2302      	movs	r3, #2
  }
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d015      	beq.n	8006026 <USBD_CDC_EP0_RxReady+0x46>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006000:	2bff      	cmp	r3, #255	; 0xff
 8006002:	d010      	beq.n	8006026 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006012:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800601a:	b292      	uxth	r2, r2
 800601c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	22ff      	movs	r2, #255	; 0xff
 8006022:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2243      	movs	r2, #67	; 0x43
 800603c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800603e:	4b03      	ldr	r3, [pc, #12]	; (800604c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	bc80      	pop	{r7}
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	2000009c 	.word	0x2000009c

08006050 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2243      	movs	r2, #67	; 0x43
 800605c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800605e:	4b03      	ldr	r3, [pc, #12]	; (800606c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006060:	4618      	mov	r0, r3
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	bc80      	pop	{r7}
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	20000058 	.word	0x20000058

08006070 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2243      	movs	r2, #67	; 0x43
 800607c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800607e:	4b03      	ldr	r3, [pc, #12]	; (800608c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006080:	4618      	mov	r0, r3
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	200000e0 	.word	0x200000e0

08006090 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	220a      	movs	r2, #10
 800609c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800609e:	4b03      	ldr	r3, [pc, #12]	; (80060ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc80      	pop	{r7}
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	20000014 	.word	0x20000014

080060b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80060ba:	2302      	movs	r3, #2
 80060bc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bc80      	pop	{r7}
 80060da:	4770      	bx	lr

080060dc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	4613      	mov	r3, r2
 80060e8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80060fa:	88fa      	ldrh	r2, [r7, #6]
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	bc80      	pop	{r7}
 800610c:	4770      	bx	lr

0800610e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	bc80      	pop	{r7}
 8006132:	4770      	bx	lr

08006134 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006142:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d01c      	beq.n	8006188 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006154:	2b00      	cmp	r3, #0
 8006156:	d115      	bne.n	8006184 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2201      	movs	r2, #1
 800615c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006176:	b29b      	uxth	r3, r3
 8006178:	2181      	movs	r1, #129	; 0x81
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f001 fd6d 	bl	8007c5a <USBD_LL_Transmit>

      return USBD_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	e002      	b.n	800618a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006184:	2301      	movs	r3, #1
 8006186:	e000      	b.n	800618a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006188:	2302      	movs	r3, #2
  }
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d017      	beq.n	80061dc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	7c1b      	ldrb	r3, [r3, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d109      	bne.n	80061c8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061be:	2101      	movs	r1, #1
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 fd6d 	bl	8007ca0 <USBD_LL_PrepareReceive>
 80061c6:	e007      	b.n	80061d8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061ce:	2340      	movs	r3, #64	; 0x40
 80061d0:	2101      	movs	r1, #1
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 fd64 	bl	8007ca0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	e000      	b.n	80061de <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80061dc:	2302      	movs	r3, #2
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	4613      	mov	r3, r2
 80061f2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80061fa:	2302      	movs	r3, #2
 80061fc:	e01a      	b.n	8006234 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	79fa      	ldrb	r2, [r7, #7]
 800622a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f001 fbd1 	bl	80079d4 <USBD_LL_Init>

  return USBD_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d006      	beq.n	800625e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	73fb      	strb	r3, [r7, #15]
 800625c:	e001      	b.n	8006262 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800625e:	2302      	movs	r3, #2
 8006260:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006262:	7bfb      	ldrb	r3, [r7, #15]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	bc80      	pop	{r7}
 800626c:	4770      	bx	lr

0800626e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b082      	sub	sp, #8
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 fc06 	bl	8007a88 <USBD_LL_Start>

  return USBD_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	bc80      	pop	{r7}
 8006298:	4770      	bx	lr

0800629a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	460b      	mov	r3, r1
 80062a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80062a6:	2302      	movs	r3, #2
 80062a8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00c      	beq.n	80062ce <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	78fa      	ldrb	r2, [r7, #3]
 80062be:	4611      	mov	r1, r2
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	4798      	blx	r3
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	460b      	mov	r3, r1
 80062e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	78fa      	ldrb	r2, [r7, #3]
 80062ee:	4611      	mov	r1, r2
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	4798      	blx	r3

  return USBD_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b082      	sub	sp, #8
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fed8 	bl	80070c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006324:	461a      	mov	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	2b02      	cmp	r3, #2
 8006338:	d016      	beq.n	8006368 <USBD_LL_SetupStage+0x6a>
 800633a:	2b02      	cmp	r3, #2
 800633c:	d81c      	bhi.n	8006378 <USBD_LL_SetupStage+0x7a>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <USBD_LL_SetupStage+0x4a>
 8006342:	2b01      	cmp	r3, #1
 8006344:	d008      	beq.n	8006358 <USBD_LL_SetupStage+0x5a>
 8006346:	e017      	b.n	8006378 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f9cb 	bl	80066ec <USBD_StdDevReq>
      break;
 8006356:	e01a      	b.n	800638e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fa2d 	bl	80067c0 <USBD_StdItfReq>
      break;
 8006366:	e012      	b.n	800638e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fa6d 	bl	8006850 <USBD_StdEPReq>
      break;
 8006376:	e00a      	b.n	800638e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800637e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006382:	b2db      	uxtb	r3, r3
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f001 fbde 	bl	8007b48 <USBD_LL_StallEP>
      break;
 800638c:	bf00      	nop
  }

  return USBD_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	460b      	mov	r3, r1
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80063a6:	7afb      	ldrb	r3, [r7, #11]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d14b      	bne.n	8006444 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063b2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d134      	bne.n	8006428 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d919      	bls.n	80063fe <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	1ad2      	subs	r2, r2, r3
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d203      	bcs.n	80063ec <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	e002      	b.n	80063f2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 ff57 	bl	80072aa <USBD_CtlContinueRx>
 80063fc:	e038      	b.n	8006470 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006410:	2b03      	cmp	r3, #3
 8006412:	d105      	bne.n	8006420 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 ff54 	bl	80072ce <USBD_CtlSendStatus>
 8006426:	e023      	b.n	8006470 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800642e:	2b05      	cmp	r3, #5
 8006430:	d11e      	bne.n	8006470 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800643a:	2100      	movs	r1, #0
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f001 fb83 	bl	8007b48 <USBD_LL_StallEP>
 8006442:	e015      	b.n	8006470 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00d      	beq.n	800646c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006456:	2b03      	cmp	r3, #3
 8006458:	d108      	bne.n	800646c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	7afa      	ldrb	r2, [r7, #11]
 8006464:	4611      	mov	r1, r2
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	4798      	blx	r3
 800646a:	e001      	b.n	8006470 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800646c:	2302      	movs	r3, #2
 800646e:	e000      	b.n	8006472 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b086      	sub	sp, #24
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	460b      	mov	r3, r1
 8006484:	607a      	str	r2, [r7, #4]
 8006486:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006488:	7afb      	ldrb	r3, [r7, #11]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d17f      	bne.n	800658e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3314      	adds	r3, #20
 8006492:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800649a:	2b02      	cmp	r3, #2
 800649c:	d15c      	bne.n	8006558 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d915      	bls.n	80064d6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	1ad2      	subs	r2, r2, r3
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	461a      	mov	r2, r3
 80064c0:	6879      	ldr	r1, [r7, #4]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 fec1 	bl	800724a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064c8:	2300      	movs	r3, #0
 80064ca:	2200      	movs	r2, #0
 80064cc:	2100      	movs	r1, #0
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f001 fbe6 	bl	8007ca0 <USBD_LL_PrepareReceive>
 80064d4:	e04e      	b.n	8006574 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	6912      	ldr	r2, [r2, #16]
 80064de:	fbb3 f1f2 	udiv	r1, r3, r2
 80064e2:	fb01 f202 	mul.w	r2, r1, r2
 80064e6:	1a9b      	subs	r3, r3, r2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d11c      	bne.n	8006526 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d316      	bcc.n	8006526 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006502:	429a      	cmp	r2, r3
 8006504:	d20f      	bcs.n	8006526 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006506:	2200      	movs	r2, #0
 8006508:	2100      	movs	r1, #0
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fe9d 	bl	800724a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006518:	2300      	movs	r3, #0
 800651a:	2200      	movs	r2, #0
 800651c:	2100      	movs	r1, #0
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f001 fbbe 	bl	8007ca0 <USBD_LL_PrepareReceive>
 8006524:	e026      	b.n	8006574 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006538:	2b03      	cmp	r3, #3
 800653a:	d105      	bne.n	8006548 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006548:	2180      	movs	r1, #128	; 0x80
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f001 fafc 	bl	8007b48 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 fecf 	bl	80072f4 <USBD_CtlReceiveStatus>
 8006556:	e00d      	b.n	8006574 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800655e:	2b04      	cmp	r3, #4
 8006560:	d004      	beq.n	800656c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006568:	2b00      	cmp	r3, #0
 800656a:	d103      	bne.n	8006574 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800656c:	2180      	movs	r1, #128	; 0x80
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f001 faea 	bl	8007b48 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800657a:	2b01      	cmp	r3, #1
 800657c:	d11d      	bne.n	80065ba <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff fe81 	bl	8006286 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800658c:	e015      	b.n	80065ba <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00d      	beq.n	80065b6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d108      	bne.n	80065b6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	7afa      	ldrb	r2, [r7, #11]
 80065ae:	4611      	mov	r1, r2
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	4798      	blx	r3
 80065b4:	e001      	b.n	80065ba <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80065b6:	2302      	movs	r3, #2
 80065b8:	e000      	b.n	80065bc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3718      	adds	r7, #24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065cc:	2340      	movs	r3, #64	; 0x40
 80065ce:	2200      	movs	r2, #0
 80065d0:	2100      	movs	r1, #0
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fa73 	bl	8007abe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2240      	movs	r2, #64	; 0x40
 80065e4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065e8:	2340      	movs	r3, #64	; 0x40
 80065ea:	2200      	movs	r2, #0
 80065ec:	2180      	movs	r1, #128	; 0x80
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 fa65 	bl	8007abe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2240      	movs	r2, #64	; 0x40
 80065fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006624:	2b00      	cmp	r3, #0
 8006626:	d009      	beq.n	800663c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6852      	ldr	r2, [r2, #4]
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	4611      	mov	r1, r2
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	4798      	blx	r3
  }

  return USBD_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	460b      	mov	r3, r1
 8006650:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	78fa      	ldrb	r2, [r7, #3]
 8006656:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	bc80      	pop	{r7}
 8006662:	4770      	bx	lr

08006664 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2204      	movs	r2, #4
 800667c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	bc80      	pop	{r7}
 800668a:	4770      	bx	lr

0800668c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669a:	2b04      	cmp	r3, #4
 800669c:	d105      	bne.n	80066aa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bc80      	pop	{r7}
 80066b4:	4770      	bx	lr

080066b6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d10b      	bne.n	80066e0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d005      	beq.n	80066e0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
	...

080066ec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006702:	2b40      	cmp	r3, #64	; 0x40
 8006704:	d005      	beq.n	8006712 <USBD_StdDevReq+0x26>
 8006706:	2b40      	cmp	r3, #64	; 0x40
 8006708:	d84f      	bhi.n	80067aa <USBD_StdDevReq+0xbe>
 800670a:	2b00      	cmp	r3, #0
 800670c:	d009      	beq.n	8006722 <USBD_StdDevReq+0x36>
 800670e:	2b20      	cmp	r3, #32
 8006710:	d14b      	bne.n	80067aa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	6839      	ldr	r1, [r7, #0]
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	4798      	blx	r3
      break;
 8006720:	e048      	b.n	80067b4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	785b      	ldrb	r3, [r3, #1]
 8006726:	2b09      	cmp	r3, #9
 8006728:	d839      	bhi.n	800679e <USBD_StdDevReq+0xb2>
 800672a:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <USBD_StdDevReq+0x44>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	08006781 	.word	0x08006781
 8006734:	08006795 	.word	0x08006795
 8006738:	0800679f 	.word	0x0800679f
 800673c:	0800678b 	.word	0x0800678b
 8006740:	0800679f 	.word	0x0800679f
 8006744:	08006763 	.word	0x08006763
 8006748:	08006759 	.word	0x08006759
 800674c:	0800679f 	.word	0x0800679f
 8006750:	08006777 	.word	0x08006777
 8006754:	0800676d 	.word	0x0800676d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f9dc 	bl	8006b18 <USBD_GetDescriptor>
          break;
 8006760:	e022      	b.n	80067a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fb3f 	bl	8006de8 <USBD_SetAddress>
          break;
 800676a:	e01d      	b.n	80067a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fb7e 	bl	8006e70 <USBD_SetConfig>
          break;
 8006774:	e018      	b.n	80067a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fc07 	bl	8006f8c <USBD_GetConfig>
          break;
 800677e:	e013      	b.n	80067a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fc37 	bl	8006ff6 <USBD_GetStatus>
          break;
 8006788:	e00e      	b.n	80067a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fc65 	bl	800705c <USBD_SetFeature>
          break;
 8006792:	e009      	b.n	80067a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fc74 	bl	8007084 <USBD_ClrFeature>
          break;
 800679c:	e004      	b.n	80067a8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fccc 	bl	800713e <USBD_CtlError>
          break;
 80067a6:	bf00      	nop
      }
      break;
 80067a8:	e004      	b.n	80067b4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fcc6 	bl	800713e <USBD_CtlError>
      break;
 80067b2:	bf00      	nop
  }

  return ret;
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop

080067c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067d6:	2b40      	cmp	r3, #64	; 0x40
 80067d8:	d005      	beq.n	80067e6 <USBD_StdItfReq+0x26>
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d82e      	bhi.n	800683c <USBD_StdItfReq+0x7c>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <USBD_StdItfReq+0x26>
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d12a      	bne.n	800683c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ec:	3b01      	subs	r3, #1
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d81d      	bhi.n	800682e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	889b      	ldrh	r3, [r3, #4]
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d813      	bhi.n	8006824 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	4798      	blx	r3
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	88db      	ldrh	r3, [r3, #6]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d110      	bne.n	8006838 <USBD_StdItfReq+0x78>
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10d      	bne.n	8006838 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fd56 	bl	80072ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006822:	e009      	b.n	8006838 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fc89 	bl	800713e <USBD_CtlError>
          break;
 800682c:	e004      	b.n	8006838 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fc84 	bl	800713e <USBD_CtlError>
          break;
 8006836:	e000      	b.n	800683a <USBD_StdItfReq+0x7a>
          break;
 8006838:	bf00      	nop
      }
      break;
 800683a:	e004      	b.n	8006846 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fc7d 	bl	800713e <USBD_CtlError>
      break;
 8006844:	bf00      	nop
  }

  return USBD_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	889b      	ldrh	r3, [r3, #4]
 8006862:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	d007      	beq.n	8006880 <USBD_StdEPReq+0x30>
 8006870:	2b40      	cmp	r3, #64	; 0x40
 8006872:	f200 8146 	bhi.w	8006b02 <USBD_StdEPReq+0x2b2>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <USBD_StdEPReq+0x40>
 800687a:	2b20      	cmp	r3, #32
 800687c:	f040 8141 	bne.w	8006b02 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	4798      	blx	r3
      break;
 800688e:	e13d      	b.n	8006b0c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006898:	2b20      	cmp	r3, #32
 800689a:	d10a      	bne.n	80068b2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	73fb      	strb	r3, [r7, #15]

        return ret;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	e12d      	b.n	8006b0e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	785b      	ldrb	r3, [r3, #1]
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d007      	beq.n	80068ca <USBD_StdEPReq+0x7a>
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	f300 811b 	bgt.w	8006af6 <USBD_StdEPReq+0x2a6>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d072      	beq.n	80069aa <USBD_StdEPReq+0x15a>
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d03a      	beq.n	800693e <USBD_StdEPReq+0xee>
 80068c8:	e115      	b.n	8006af6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d002      	beq.n	80068da <USBD_StdEPReq+0x8a>
 80068d4:	2b03      	cmp	r3, #3
 80068d6:	d015      	beq.n	8006904 <USBD_StdEPReq+0xb4>
 80068d8:	e02b      	b.n	8006932 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068da:	7bbb      	ldrb	r3, [r7, #14]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00c      	beq.n	80068fa <USBD_StdEPReq+0xaa>
 80068e0:	7bbb      	ldrb	r3, [r7, #14]
 80068e2:	2b80      	cmp	r3, #128	; 0x80
 80068e4:	d009      	beq.n	80068fa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80068e6:	7bbb      	ldrb	r3, [r7, #14]
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 f92c 	bl	8007b48 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80068f0:	2180      	movs	r1, #128	; 0x80
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f001 f928 	bl	8007b48 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068f8:	e020      	b.n	800693c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fc1e 	bl	800713e <USBD_CtlError>
              break;
 8006902:	e01b      	b.n	800693c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	885b      	ldrh	r3, [r3, #2]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10e      	bne.n	800692a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <USBD_StdEPReq+0xda>
 8006912:	7bbb      	ldrb	r3, [r7, #14]
 8006914:	2b80      	cmp	r3, #128	; 0x80
 8006916:	d008      	beq.n	800692a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	88db      	ldrh	r3, [r3, #6]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d104      	bne.n	800692a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006920:	7bbb      	ldrb	r3, [r7, #14]
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f001 f90f 	bl	8007b48 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fccf 	bl	80072ce <USBD_CtlSendStatus>

              break;
 8006930:	e004      	b.n	800693c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fc02 	bl	800713e <USBD_CtlError>
              break;
 800693a:	bf00      	nop
          }
          break;
 800693c:	e0e0      	b.n	8006b00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006944:	2b02      	cmp	r3, #2
 8006946:	d002      	beq.n	800694e <USBD_StdEPReq+0xfe>
 8006948:	2b03      	cmp	r3, #3
 800694a:	d015      	beq.n	8006978 <USBD_StdEPReq+0x128>
 800694c:	e026      	b.n	800699c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800694e:	7bbb      	ldrb	r3, [r7, #14]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00c      	beq.n	800696e <USBD_StdEPReq+0x11e>
 8006954:	7bbb      	ldrb	r3, [r7, #14]
 8006956:	2b80      	cmp	r3, #128	; 0x80
 8006958:	d009      	beq.n	800696e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800695a:	7bbb      	ldrb	r3, [r7, #14]
 800695c:	4619      	mov	r1, r3
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f001 f8f2 	bl	8007b48 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006964:	2180      	movs	r1, #128	; 0x80
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 f8ee 	bl	8007b48 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800696c:	e01c      	b.n	80069a8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fbe4 	bl	800713e <USBD_CtlError>
              break;
 8006976:	e017      	b.n	80069a8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	885b      	ldrh	r3, [r3, #2]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d112      	bne.n	80069a6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006986:	2b00      	cmp	r3, #0
 8006988:	d004      	beq.n	8006994 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800698a:	7bbb      	ldrb	r3, [r7, #14]
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f001 f8f9 	bl	8007b86 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fc9a 	bl	80072ce <USBD_CtlSendStatus>
              }
              break;
 800699a:	e004      	b.n	80069a6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fbcd 	bl	800713e <USBD_CtlError>
              break;
 80069a4:	e000      	b.n	80069a8 <USBD_StdEPReq+0x158>
              break;
 80069a6:	bf00      	nop
          }
          break;
 80069a8:	e0aa      	b.n	8006b00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d002      	beq.n	80069ba <USBD_StdEPReq+0x16a>
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d032      	beq.n	8006a1e <USBD_StdEPReq+0x1ce>
 80069b8:	e097      	b.n	8006aea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d007      	beq.n	80069d0 <USBD_StdEPReq+0x180>
 80069c0:	7bbb      	ldrb	r3, [r7, #14]
 80069c2:	2b80      	cmp	r3, #128	; 0x80
 80069c4:	d004      	beq.n	80069d0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fbb8 	bl	800713e <USBD_CtlError>
                break;
 80069ce:	e091      	b.n	8006af4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	da0b      	bge.n	80069f0 <USBD_StdEPReq+0x1a0>
 80069d8:	7bbb      	ldrb	r3, [r7, #14]
 80069da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069de:	4613      	mov	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	3310      	adds	r3, #16
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	4413      	add	r3, r2
 80069ec:	3304      	adds	r3, #4
 80069ee:	e00b      	b.n	8006a08 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069f0:	7bbb      	ldrb	r3, [r7, #14]
 80069f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	4413      	add	r3, r2
 8006a06:	3304      	adds	r3, #4
 8006a08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2202      	movs	r2, #2
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fbfb 	bl	8007212 <USBD_CtlSendData>
              break;
 8006a1c:	e06a      	b.n	8006af4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	da11      	bge.n	8006a4a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a26:	7bbb      	ldrb	r3, [r7, #14]
 8006a28:	f003 020f 	and.w	r2, r3, #15
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	440b      	add	r3, r1
 8006a38:	3318      	adds	r3, #24
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d117      	bne.n	8006a70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fb7b 	bl	800713e <USBD_CtlError>
                  break;
 8006a48:	e054      	b.n	8006af4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
 8006a4c:	f003 020f 	and.w	r2, r3, #15
 8006a50:	6879      	ldr	r1, [r7, #4]
 8006a52:	4613      	mov	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	440b      	add	r3, r1
 8006a5c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fb68 	bl	800713e <USBD_CtlError>
                  break;
 8006a6e:	e041      	b.n	8006af4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	da0b      	bge.n	8006a90 <USBD_StdEPReq+0x240>
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	3310      	adds	r3, #16
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	e00b      	b.n	8006aa8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a96:	4613      	mov	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006aaa:	7bbb      	ldrb	r3, [r7, #14]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <USBD_StdEPReq+0x266>
 8006ab0:	7bbb      	ldrb	r3, [r7, #14]
 8006ab2:	2b80      	cmp	r3, #128	; 0x80
 8006ab4:	d103      	bne.n	8006abe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	e00e      	b.n	8006adc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006abe:	7bbb      	ldrb	r3, [r7, #14]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 f87e 	bl	8007bc4 <USBD_LL_IsStallEP>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	e002      	b.n	8006adc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fb95 	bl	8007212 <USBD_CtlSendData>
              break;
 8006ae8:	e004      	b.n	8006af4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fb26 	bl	800713e <USBD_CtlError>
              break;
 8006af2:	bf00      	nop
          }
          break;
 8006af4:	e004      	b.n	8006b00 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fb20 	bl	800713e <USBD_CtlError>
          break;
 8006afe:	bf00      	nop
      }
      break;
 8006b00:	e004      	b.n	8006b0c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fb1a 	bl	800713e <USBD_CtlError>
      break;
 8006b0a:	bf00      	nop
  }

  return ret;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	885b      	ldrh	r3, [r3, #2]
 8006b32:	0a1b      	lsrs	r3, r3, #8
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	3b01      	subs	r3, #1
 8006b38:	2b06      	cmp	r3, #6
 8006b3a:	f200 8128 	bhi.w	8006d8e <USBD_GetDescriptor+0x276>
 8006b3e:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <USBD_GetDescriptor+0x2c>)
 8006b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b44:	08006b61 	.word	0x08006b61
 8006b48:	08006b79 	.word	0x08006b79
 8006b4c:	08006bb9 	.word	0x08006bb9
 8006b50:	08006d8f 	.word	0x08006d8f
 8006b54:	08006d8f 	.word	0x08006d8f
 8006b58:	08006d2f 	.word	0x08006d2f
 8006b5c:	08006d5b 	.word	0x08006d5b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	7c12      	ldrb	r2, [r2, #16]
 8006b6c:	f107 0108 	add.w	r1, r7, #8
 8006b70:	4610      	mov	r0, r2
 8006b72:	4798      	blx	r3
 8006b74:	60f8      	str	r0, [r7, #12]
      break;
 8006b76:	e112      	b.n	8006d9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	7c1b      	ldrb	r3, [r3, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10d      	bne.n	8006b9c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	f107 0208 	add.w	r2, r7, #8
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	4798      	blx	r3
 8006b90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3301      	adds	r3, #1
 8006b96:	2202      	movs	r2, #2
 8006b98:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b9a:	e100      	b.n	8006d9e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	f107 0208 	add.w	r2, r7, #8
 8006ba8:	4610      	mov	r0, r2
 8006baa:	4798      	blx	r3
 8006bac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	701a      	strb	r2, [r3, #0]
      break;
 8006bb6:	e0f2      	b.n	8006d9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	885b      	ldrh	r3, [r3, #2]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b05      	cmp	r3, #5
 8006bc0:	f200 80ac 	bhi.w	8006d1c <USBD_GetDescriptor+0x204>
 8006bc4:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <USBD_GetDescriptor+0xb4>)
 8006bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bca:	bf00      	nop
 8006bcc:	08006be5 	.word	0x08006be5
 8006bd0:	08006c19 	.word	0x08006c19
 8006bd4:	08006c4d 	.word	0x08006c4d
 8006bd8:	08006c81 	.word	0x08006c81
 8006bdc:	08006cb5 	.word	0x08006cb5
 8006be0:	08006ce9 	.word	0x08006ce9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00b      	beq.n	8006c08 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	7c12      	ldrb	r2, [r2, #16]
 8006bfc:	f107 0108 	add.w	r1, r7, #8
 8006c00:	4610      	mov	r0, r2
 8006c02:	4798      	blx	r3
 8006c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c06:	e091      	b.n	8006d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fa97 	bl	800713e <USBD_CtlError>
            err++;
 8006c10:	7afb      	ldrb	r3, [r7, #11]
 8006c12:	3301      	adds	r3, #1
 8006c14:	72fb      	strb	r3, [r7, #11]
          break;
 8006c16:	e089      	b.n	8006d2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	7c12      	ldrb	r2, [r2, #16]
 8006c30:	f107 0108 	add.w	r1, r7, #8
 8006c34:	4610      	mov	r0, r2
 8006c36:	4798      	blx	r3
 8006c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c3a:	e077      	b.n	8006d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fa7d 	bl	800713e <USBD_CtlError>
            err++;
 8006c44:	7afb      	ldrb	r3, [r7, #11]
 8006c46:	3301      	adds	r3, #1
 8006c48:	72fb      	strb	r3, [r7, #11]
          break;
 8006c4a:	e06f      	b.n	8006d2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00b      	beq.n	8006c70 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	7c12      	ldrb	r2, [r2, #16]
 8006c64:	f107 0108 	add.w	r1, r7, #8
 8006c68:	4610      	mov	r0, r2
 8006c6a:	4798      	blx	r3
 8006c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c6e:	e05d      	b.n	8006d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fa63 	bl	800713e <USBD_CtlError>
            err++;
 8006c78:	7afb      	ldrb	r3, [r7, #11]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c7e:	e055      	b.n	8006d2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	7c12      	ldrb	r2, [r2, #16]
 8006c98:	f107 0108 	add.w	r1, r7, #8
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	4798      	blx	r3
 8006ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ca2:	e043      	b.n	8006d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa49 	bl	800713e <USBD_CtlError>
            err++;
 8006cac:	7afb      	ldrb	r3, [r7, #11]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cb2:	e03b      	b.n	8006d2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00b      	beq.n	8006cd8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	7c12      	ldrb	r2, [r2, #16]
 8006ccc:	f107 0108 	add.w	r1, r7, #8
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	4798      	blx	r3
 8006cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cd6:	e029      	b.n	8006d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fa2f 	bl	800713e <USBD_CtlError>
            err++;
 8006ce0:	7afb      	ldrb	r3, [r7, #11]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ce6:	e021      	b.n	8006d2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00b      	beq.n	8006d0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	7c12      	ldrb	r2, [r2, #16]
 8006d00:	f107 0108 	add.w	r1, r7, #8
 8006d04:	4610      	mov	r0, r2
 8006d06:	4798      	blx	r3
 8006d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d0a:	e00f      	b.n	8006d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fa15 	bl	800713e <USBD_CtlError>
            err++;
 8006d14:	7afb      	ldrb	r3, [r7, #11]
 8006d16:	3301      	adds	r3, #1
 8006d18:	72fb      	strb	r3, [r7, #11]
          break;
 8006d1a:	e007      	b.n	8006d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fa0d 	bl	800713e <USBD_CtlError>
          err++;
 8006d24:	7afb      	ldrb	r3, [r7, #11]
 8006d26:	3301      	adds	r3, #1
 8006d28:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006d2a:	e038      	b.n	8006d9e <USBD_GetDescriptor+0x286>
 8006d2c:	e037      	b.n	8006d9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	7c1b      	ldrb	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d109      	bne.n	8006d4a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3e:	f107 0208 	add.w	r2, r7, #8
 8006d42:	4610      	mov	r0, r2
 8006d44:	4798      	blx	r3
 8006d46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d48:	e029      	b.n	8006d9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f9f6 	bl	800713e <USBD_CtlError>
        err++;
 8006d52:	7afb      	ldrb	r3, [r7, #11]
 8006d54:	3301      	adds	r3, #1
 8006d56:	72fb      	strb	r3, [r7, #11]
      break;
 8006d58:	e021      	b.n	8006d9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	7c1b      	ldrb	r3, [r3, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10d      	bne.n	8006d7e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	f107 0208 	add.w	r2, r7, #8
 8006d6e:	4610      	mov	r0, r2
 8006d70:	4798      	blx	r3
 8006d72:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	3301      	adds	r3, #1
 8006d78:	2207      	movs	r2, #7
 8006d7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d7c:	e00f      	b.n	8006d9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f9dc 	bl	800713e <USBD_CtlError>
        err++;
 8006d86:	7afb      	ldrb	r3, [r7, #11]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	72fb      	strb	r3, [r7, #11]
      break;
 8006d8c:	e007      	b.n	8006d9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f9d4 	bl	800713e <USBD_CtlError>
      err++;
 8006d96:	7afb      	ldrb	r3, [r7, #11]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	72fb      	strb	r3, [r7, #11]
      break;
 8006d9c:	bf00      	nop
  }

  if (err != 0U)
 8006d9e:	7afb      	ldrb	r3, [r7, #11]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d11c      	bne.n	8006dde <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006da4:	893b      	ldrh	r3, [r7, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d011      	beq.n	8006dce <USBD_GetDescriptor+0x2b6>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	88db      	ldrh	r3, [r3, #6]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00d      	beq.n	8006dce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	88da      	ldrh	r2, [r3, #6]
 8006db6:	893b      	ldrh	r3, [r7, #8]
 8006db8:	4293      	cmp	r3, r2
 8006dba:	bf28      	it	cs
 8006dbc:	4613      	movcs	r3, r2
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006dc2:	893b      	ldrh	r3, [r7, #8]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	68f9      	ldr	r1, [r7, #12]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fa22 	bl	8007212 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	88db      	ldrh	r3, [r3, #6]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d104      	bne.n	8006de0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fa79 	bl	80072ce <USBD_CtlSendStatus>
 8006ddc:	e000      	b.n	8006de0 <USBD_GetDescriptor+0x2c8>
    return;
 8006dde:	bf00      	nop
    }
  }
}
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop

08006de8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	889b      	ldrh	r3, [r3, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d130      	bne.n	8006e5c <USBD_SetAddress+0x74>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	88db      	ldrh	r3, [r3, #6]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d12c      	bne.n	8006e5c <USBD_SetAddress+0x74>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	885b      	ldrh	r3, [r3, #2]
 8006e06:	2b7f      	cmp	r3, #127	; 0x7f
 8006e08:	d828      	bhi.n	8006e5c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	885b      	ldrh	r3, [r3, #2]
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d104      	bne.n	8006e2a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f98b 	bl	800713e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e28:	e01d      	b.n	8006e66 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	7bfa      	ldrb	r2, [r7, #15]
 8006e2e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fef0 	bl	8007c1c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fa46 	bl	80072ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d004      	beq.n	8006e52 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e50:	e009      	b.n	8006e66 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e5a:	e004      	b.n	8006e66 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f96d 	bl	800713e <USBD_CtlError>
  }
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	885b      	ldrh	r3, [r3, #2]
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	4b41      	ldr	r3, [pc, #260]	; (8006f88 <USBD_SetConfig+0x118>)
 8006e82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e84:	4b40      	ldr	r3, [pc, #256]	; (8006f88 <USBD_SetConfig+0x118>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d904      	bls.n	8006e96 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f955 	bl	800713e <USBD_CtlError>
 8006e94:	e075      	b.n	8006f82 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d002      	beq.n	8006ea6 <USBD_SetConfig+0x36>
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d023      	beq.n	8006eec <USBD_SetConfig+0x7c>
 8006ea4:	e062      	b.n	8006f6c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006ea6:	4b38      	ldr	r3, [pc, #224]	; (8006f88 <USBD_SetConfig+0x118>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d01a      	beq.n	8006ee4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006eae:	4b36      	ldr	r3, [pc, #216]	; (8006f88 <USBD_SetConfig+0x118>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2203      	movs	r2, #3
 8006ebc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006ec0:	4b31      	ldr	r3, [pc, #196]	; (8006f88 <USBD_SetConfig+0x118>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7ff f9e7 	bl	800629a <USBD_SetClassConfig>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d104      	bne.n	8006edc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f932 	bl	800713e <USBD_CtlError>
            return;
 8006eda:	e052      	b.n	8006f82 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f9f6 	bl	80072ce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006ee2:	e04e      	b.n	8006f82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f9f2 	bl	80072ce <USBD_CtlSendStatus>
        break;
 8006eea:	e04a      	b.n	8006f82 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006eec:	4b26      	ldr	r3, [pc, #152]	; (8006f88 <USBD_SetConfig+0x118>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d112      	bne.n	8006f1a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006efc:	4b22      	ldr	r3, [pc, #136]	; (8006f88 <USBD_SetConfig+0x118>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	461a      	mov	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006f06:	4b20      	ldr	r3, [pc, #128]	; (8006f88 <USBD_SetConfig+0x118>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7ff f9e3 	bl	80062d8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f9db 	bl	80072ce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006f18:	e033      	b.n	8006f82 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006f1a:	4b1b      	ldr	r3, [pc, #108]	; (8006f88 <USBD_SetConfig+0x118>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d01d      	beq.n	8006f64 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7ff f9d1 	bl	80062d8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006f36:	4b14      	ldr	r3, [pc, #80]	; (8006f88 <USBD_SetConfig+0x118>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006f40:	4b11      	ldr	r3, [pc, #68]	; (8006f88 <USBD_SetConfig+0x118>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff f9a7 	bl	800629a <USBD_SetClassConfig>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d104      	bne.n	8006f5c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f8f2 	bl	800713e <USBD_CtlError>
            return;
 8006f5a:	e012      	b.n	8006f82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f9b6 	bl	80072ce <USBD_CtlSendStatus>
        break;
 8006f62:	e00e      	b.n	8006f82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f9b2 	bl	80072ce <USBD_CtlSendStatus>
        break;
 8006f6a:	e00a      	b.n	8006f82 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f8e5 	bl	800713e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006f74:	4b04      	ldr	r3, [pc, #16]	; (8006f88 <USBD_SetConfig+0x118>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff f9ac 	bl	80062d8 <USBD_ClrClassConfig>
        break;
 8006f80:	bf00      	nop
    }
  }
}
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	20000214 	.word	0x20000214

08006f8c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	88db      	ldrh	r3, [r3, #6]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d004      	beq.n	8006fa8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f8cc 	bl	800713e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006fa6:	e022      	b.n	8006fee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	dc02      	bgt.n	8006fb8 <USBD_GetConfig+0x2c>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	dc03      	bgt.n	8006fbe <USBD_GetConfig+0x32>
 8006fb6:	e015      	b.n	8006fe4 <USBD_GetConfig+0x58>
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d00b      	beq.n	8006fd4 <USBD_GetConfig+0x48>
 8006fbc:	e012      	b.n	8006fe4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	2201      	movs	r2, #1
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f920 	bl	8007212 <USBD_CtlSendData>
        break;
 8006fd2:	e00c      	b.n	8006fee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	2201      	movs	r2, #1
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f918 	bl	8007212 <USBD_CtlSendData>
        break;
 8006fe2:	e004      	b.n	8006fee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f8a9 	bl	800713e <USBD_CtlError>
        break;
 8006fec:	bf00      	nop
}
 8006fee:	bf00      	nop
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007006:	3b01      	subs	r3, #1
 8007008:	2b02      	cmp	r3, #2
 800700a:	d81e      	bhi.n	800704a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	88db      	ldrh	r3, [r3, #6]
 8007010:	2b02      	cmp	r3, #2
 8007012:	d004      	beq.n	800701e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f891 	bl	800713e <USBD_CtlError>
        break;
 800701c:	e01a      	b.n	8007054 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800702a:	2b00      	cmp	r3, #0
 800702c:	d005      	beq.n	800703a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f043 0202 	orr.w	r2, r3, #2
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	330c      	adds	r3, #12
 800703e:	2202      	movs	r2, #2
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f8e5 	bl	8007212 <USBD_CtlSendData>
      break;
 8007048:	e004      	b.n	8007054 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f876 	bl	800713e <USBD_CtlError>
      break;
 8007052:	bf00      	nop
  }
}
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	885b      	ldrh	r3, [r3, #2]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d106      	bne.n	800707c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f929 	bl	80072ce <USBD_CtlSendStatus>
  }
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007094:	3b01      	subs	r3, #1
 8007096:	2b02      	cmp	r3, #2
 8007098:	d80b      	bhi.n	80070b2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	885b      	ldrh	r3, [r3, #2]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d10c      	bne.n	80070bc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f90f 	bl	80072ce <USBD_CtlSendStatus>
      }
      break;
 80070b0:	e004      	b.n	80070bc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f842 	bl	800713e <USBD_CtlError>
      break;
 80070ba:	e000      	b.n	80070be <USBD_ClrFeature+0x3a>
      break;
 80070bc:	bf00      	nop
  }
}
 80070be:	bf00      	nop
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781a      	ldrb	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	785a      	ldrb	r2, [r3, #1]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	3302      	adds	r3, #2
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	3303      	adds	r3, #3
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	021b      	lsls	r3, r3, #8
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	4413      	add	r3, r2
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	3304      	adds	r3, #4
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	b29a      	uxth	r2, r3
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	3305      	adds	r3, #5
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	021b      	lsls	r3, r3, #8
 800710e:	b29b      	uxth	r3, r3
 8007110:	4413      	add	r3, r2
 8007112:	b29a      	uxth	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	3306      	adds	r3, #6
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	b29a      	uxth	r2, r3
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	3307      	adds	r3, #7
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	b29b      	uxth	r3, r3
 800712c:	4413      	add	r3, r2
 800712e:	b29a      	uxth	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	80da      	strh	r2, [r3, #6]

}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	bc80      	pop	{r7}
 800713c:	4770      	bx	lr

0800713e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b082      	sub	sp, #8
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007148:	2180      	movs	r1, #128	; 0x80
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fcfc 	bl	8007b48 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007150:	2100      	movs	r1, #0
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fcf8 	bl	8007b48 <USBD_LL_StallEP>
}
 8007158:	bf00      	nop
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800716c:	2300      	movs	r3, #0
 800716e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d032      	beq.n	80071dc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 f834 	bl	80071e4 <USBD_GetLen>
 800717c:	4603      	mov	r3, r0
 800717e:	3301      	adds	r3, #1
 8007180:	b29b      	uxth	r3, r3
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800718a:	7dfb      	ldrb	r3, [r7, #23]
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	75fa      	strb	r2, [r7, #23]
 8007190:	461a      	mov	r2, r3
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	4413      	add	r3, r2
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	7812      	ldrb	r2, [r2, #0]
 800719a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800719c:	7dfb      	ldrb	r3, [r7, #23]
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	75fa      	strb	r2, [r7, #23]
 80071a2:	461a      	mov	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4413      	add	r3, r2
 80071a8:	2203      	movs	r2, #3
 80071aa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80071ac:	e012      	b.n	80071d4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	60fa      	str	r2, [r7, #12]
 80071b4:	7dfa      	ldrb	r2, [r7, #23]
 80071b6:	1c51      	adds	r1, r2, #1
 80071b8:	75f9      	strb	r1, [r7, #23]
 80071ba:	4611      	mov	r1, r2
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	440a      	add	r2, r1
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80071c4:	7dfb      	ldrb	r3, [r7, #23]
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	75fa      	strb	r2, [r7, #23]
 80071ca:	461a      	mov	r2, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4413      	add	r3, r2
 80071d0:	2200      	movs	r2, #0
 80071d2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e8      	bne.n	80071ae <USBD_GetString+0x4e>
    }
  }
}
 80071dc:	bf00      	nop
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80071f0:	e005      	b.n	80071fe <USBD_GetLen+0x1a>
  {
    len++;
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
 80071f4:	3301      	adds	r3, #1
 80071f6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3301      	adds	r3, #1
 80071fc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1f5      	bne.n	80071f2 <USBD_GetLen+0xe>
  }

  return len;
 8007206:	7bfb      	ldrb	r3, [r7, #15]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr

08007212 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	4613      	mov	r3, r2
 800721e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2202      	movs	r2, #2
 8007224:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007228:	88fa      	ldrh	r2, [r7, #6]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800722e:	88fa      	ldrh	r2, [r7, #6]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007234:	88fb      	ldrh	r3, [r7, #6]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	2100      	movs	r1, #0
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fd0d 	bl	8007c5a <USBD_LL_Transmit>

  return USBD_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	4613      	mov	r3, r2
 8007256:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007258:	88fb      	ldrh	r3, [r7, #6]
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	2100      	movs	r1, #0
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 fcfb 	bl	8007c5a <USBD_LL_Transmit>

  return USBD_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	4613      	mov	r3, r2
 800727a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2203      	movs	r2, #3
 8007280:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007284:	88fa      	ldrh	r2, [r7, #6]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800728c:	88fa      	ldrh	r2, [r7, #6]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007294:	88fb      	ldrh	r3, [r7, #6]
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	2100      	movs	r1, #0
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 fd00 	bl	8007ca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	4613      	mov	r3, r2
 80072b6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072b8:	88fb      	ldrh	r3, [r7, #6]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	2100      	movs	r1, #0
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fcee 	bl	8007ca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2204      	movs	r2, #4
 80072da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072de:	2300      	movs	r3, #0
 80072e0:	2200      	movs	r2, #0
 80072e2:	2100      	movs	r1, #0
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fcb8 	bl	8007c5a <USBD_LL_Transmit>

  return USBD_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2205      	movs	r2, #5
 8007300:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007304:	2300      	movs	r3, #0
 8007306:	2200      	movs	r2, #0
 8007308:	2100      	movs	r1, #0
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fcc8 	bl	8007ca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007320:	2200      	movs	r2, #0
 8007322:	4912      	ldr	r1, [pc, #72]	; (800736c <MX_USB_DEVICE_Init+0x50>)
 8007324:	4812      	ldr	r0, [pc, #72]	; (8007370 <MX_USB_DEVICE_Init+0x54>)
 8007326:	f7fe ff5e 	bl	80061e6 <USBD_Init>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007330:	f7f9 f80c 	bl	800034c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007334:	490f      	ldr	r1, [pc, #60]	; (8007374 <MX_USB_DEVICE_Init+0x58>)
 8007336:	480e      	ldr	r0, [pc, #56]	; (8007370 <MX_USB_DEVICE_Init+0x54>)
 8007338:	f7fe ff80 	bl	800623c <USBD_RegisterClass>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007342:	f7f9 f803 	bl	800034c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007346:	490c      	ldr	r1, [pc, #48]	; (8007378 <MX_USB_DEVICE_Init+0x5c>)
 8007348:	4809      	ldr	r0, [pc, #36]	; (8007370 <MX_USB_DEVICE_Init+0x54>)
 800734a:	f7fe feb1 	bl	80060b0 <USBD_CDC_RegisterInterface>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007354:	f7f8 fffa 	bl	800034c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007358:	4805      	ldr	r0, [pc, #20]	; (8007370 <MX_USB_DEVICE_Init+0x54>)
 800735a:	f7fe ff88 	bl	800626e <USBD_Start>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007364:	f7f8 fff2 	bl	800034c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007368:	bf00      	nop
 800736a:	bd80      	pop	{r7, pc}
 800736c:	20000138 	.word	0x20000138
 8007370:	20000218 	.word	0x20000218
 8007374:	20000020 	.word	0x20000020
 8007378:	20000128 	.word	0x20000128

0800737c <cdcAvailable>:
uint32_t rx_len = 512;
uint8_t rx_buf[512];


uint32_t cdcAvailable(void)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 8007382:	4b09      	ldr	r3, [pc, #36]	; (80073a8 <cdcAvailable+0x2c>)
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	4b09      	ldr	r3, [pc, #36]	; (80073ac <cdcAvailable+0x30>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	4a08      	ldr	r2, [pc, #32]	; (80073b0 <cdcAvailable+0x34>)
 800738e:	6812      	ldr	r2, [r2, #0]
 8007390:	fbb3 f1f2 	udiv	r1, r3, r2
 8007394:	fb01 f202 	mul.w	r2, r1, r2
 8007398:	1a9b      	subs	r3, r3, r2
 800739a:	607b      	str	r3, [r7, #4]

  return ret;
 800739c:	687b      	ldr	r3, [r7, #4]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bc80      	pop	{r7}
 80073a6:	4770      	bx	lr
 80073a8:	200004dc 	.word	0x200004dc
 80073ac:	200004e0 	.word	0x200004e0
 80073b0:	20000124 	.word	0x20000124

080073b4 <cdcRead>:

uint8_t cdcRead(void)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 80073ba:	4b0e      	ldr	r3, [pc, #56]	; (80073f4 <cdcRead+0x40>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a0e      	ldr	r2, [pc, #56]	; (80073f8 <cdcRead+0x44>)
 80073c0:	5cd3      	ldrb	r3, [r2, r3]
 80073c2:	71fb      	strb	r3, [r7, #7]

  if (rx_out != rx_in)
 80073c4:	4b0b      	ldr	r3, [pc, #44]	; (80073f4 <cdcRead+0x40>)
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <cdcRead+0x48>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d00b      	beq.n	80073e8 <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 80073d0:	4b08      	ldr	r3, [pc, #32]	; (80073f4 <cdcRead+0x40>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3301      	adds	r3, #1
 80073d6:	4a0a      	ldr	r2, [pc, #40]	; (8007400 <cdcRead+0x4c>)
 80073d8:	6812      	ldr	r2, [r2, #0]
 80073da:	fbb3 f1f2 	udiv	r1, r3, r2
 80073de:	fb01 f202 	mul.w	r2, r1, r2
 80073e2:	1a9b      	subs	r3, r3, r2
 80073e4:	4a03      	ldr	r2, [pc, #12]	; (80073f4 <cdcRead+0x40>)
 80073e6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80073e8:	79fb      	ldrb	r3, [r7, #7]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bc80      	pop	{r7}
 80073f2:	4770      	bx	lr
 80073f4:	200004e0 	.word	0x200004e0
 80073f8:	200004e4 	.word	0x200004e4
 80073fc:	200004dc 	.word	0x200004dc
 8007400:	20000124 	.word	0x20000124

08007404 <cdcDataIn>:


void cdcDataIn(uint8_t rx_data)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 800740e:	4b0e      	ldr	r3, [pc, #56]	; (8007448 <cdcDataIn+0x44>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	490e      	ldr	r1, [pc, #56]	; (800744c <cdcDataIn+0x48>)
 8007414:	79fa      	ldrb	r2, [r7, #7]
 8007416:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 8007418:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <cdcDataIn+0x44>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3301      	adds	r3, #1
 800741e:	4a0c      	ldr	r2, [pc, #48]	; (8007450 <cdcDataIn+0x4c>)
 8007420:	6812      	ldr	r2, [r2, #0]
 8007422:	fbb3 f1f2 	udiv	r1, r3, r2
 8007426:	fb01 f202 	mul.w	r2, r1, r2
 800742a:	1a9b      	subs	r3, r3, r2
 800742c:	60fb      	str	r3, [r7, #12]

  if (next_rx_in != rx_out)
 800742e:	4b09      	ldr	r3, [pc, #36]	; (8007454 <cdcDataIn+0x50>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	429a      	cmp	r2, r3
 8007436:	d002      	beq.n	800743e <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 8007438:	4a03      	ldr	r2, [pc, #12]	; (8007448 <cdcDataIn+0x44>)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6013      	str	r3, [r2, #0]
  }
}
 800743e:	bf00      	nop
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	bc80      	pop	{r7}
 8007446:	4770      	bx	lr
 8007448:	200004dc 	.word	0x200004dc
 800744c:	200004e4 	.word	0x200004e4
 8007450:	20000124 	.word	0x20000124
 8007454:	200004e0 	.word	0x200004e0

08007458 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = miliis();
 8007462:	f7f8 ff12 	bl	800028a <miliis>
 8007466:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	b29b      	uxth	r3, r3
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f8ba 	bl	80075e8 <CDC_Transmit_FS>
 8007474:	4603      	mov	r3, r0
 8007476:	72fb      	strb	r3, [r7, #11]
    if(ret == USBD_OK)
 8007478:	7afb      	ldrb	r3, [r7, #11]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <cdcWrite+0x2a>
    {
      return length;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	e00e      	b.n	80074a0 <cdcWrite+0x48>
    }
    else if (ret == USBD_FAIL)
 8007482:	7afb      	ldrb	r3, [r7, #11]
 8007484:	2b02      	cmp	r3, #2
 8007486:	d101      	bne.n	800748c <cdcWrite+0x34>
    {
      return 0;
 8007488:	2300      	movs	r3, #0
 800748a:	e009      	b.n	80074a0 <cdcWrite+0x48>
    }

    if (miliis() - pre_time >= 100)
 800748c:	f7f8 fefd 	bl	800028a <miliis>
 8007490:	4602      	mov	r2, r0
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	2b63      	cmp	r3, #99	; 0x63
 8007498:	d800      	bhi.n	800749c <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 800749a:	e7e5      	b.n	8007468 <cdcWrite+0x10>
    {
      break;
 800749c:	bf00      	nop
    }
  }
  return 0;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80074ac:	2200      	movs	r2, #0
 80074ae:	4905      	ldr	r1, [pc, #20]	; (80074c4 <CDC_Init_FS+0x1c>)
 80074b0:	4805      	ldr	r0, [pc, #20]	; (80074c8 <CDC_Init_FS+0x20>)
 80074b2:	f7fe fe13 	bl	80060dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074b6:	4905      	ldr	r1, [pc, #20]	; (80074cc <CDC_Init_FS+0x24>)
 80074b8:	4803      	ldr	r0, [pc, #12]	; (80074c8 <CDC_Init_FS+0x20>)
 80074ba:	f7fe fe28 	bl	800610e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80074be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	200008e4 	.word	0x200008e4
 80074c8:	20000218 	.word	0x20000218
 80074cc:	200006e4 	.word	0x200006e4

080074d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80074d0:	b480      	push	{r7}
 80074d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80074d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	46bd      	mov	sp, r7
 80074da:	bc80      	pop	{r7}
 80074dc:	4770      	bx	lr
	...

080074e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4603      	mov	r3, r0
 80074e8:	6039      	str	r1, [r7, #0]
 80074ea:	71fb      	strb	r3, [r7, #7]
 80074ec:	4613      	mov	r3, r2
 80074ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80074f0:	79fb      	ldrb	r3, [r7, #7]
 80074f2:	2b23      	cmp	r3, #35	; 0x23
 80074f4:	d84a      	bhi.n	800758c <CDC_Control_FS+0xac>
 80074f6:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <CDC_Control_FS+0x1c>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	0800758d 	.word	0x0800758d
 8007500:	0800758d 	.word	0x0800758d
 8007504:	0800758d 	.word	0x0800758d
 8007508:	0800758d 	.word	0x0800758d
 800750c:	0800758d 	.word	0x0800758d
 8007510:	0800758d 	.word	0x0800758d
 8007514:	0800758d 	.word	0x0800758d
 8007518:	0800758d 	.word	0x0800758d
 800751c:	0800758d 	.word	0x0800758d
 8007520:	0800758d 	.word	0x0800758d
 8007524:	0800758d 	.word	0x0800758d
 8007528:	0800758d 	.word	0x0800758d
 800752c:	0800758d 	.word	0x0800758d
 8007530:	0800758d 	.word	0x0800758d
 8007534:	0800758d 	.word	0x0800758d
 8007538:	0800758d 	.word	0x0800758d
 800753c:	0800758d 	.word	0x0800758d
 8007540:	0800758d 	.word	0x0800758d
 8007544:	0800758d 	.word	0x0800758d
 8007548:	0800758d 	.word	0x0800758d
 800754c:	0800758d 	.word	0x0800758d
 8007550:	0800758d 	.word	0x0800758d
 8007554:	0800758d 	.word	0x0800758d
 8007558:	0800758d 	.word	0x0800758d
 800755c:	0800758d 	.word	0x0800758d
 8007560:	0800758d 	.word	0x0800758d
 8007564:	0800758d 	.word	0x0800758d
 8007568:	0800758d 	.word	0x0800758d
 800756c:	0800758d 	.word	0x0800758d
 8007570:	0800758d 	.word	0x0800758d
 8007574:	0800758d 	.word	0x0800758d
 8007578:	0800758d 	.word	0x0800758d
 800757c:	0800758d 	.word	0x0800758d
 8007580:	0800758d 	.word	0x0800758d
 8007584:	0800758d 	.word	0x0800758d
 8007588:	0800758d 	.word	0x0800758d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800758c:	bf00      	nop
  }

  return (USBD_OK);
 800758e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007590:	4618      	mov	r0, r3
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	bc80      	pop	{r7}
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop

0800759c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	480e      	ldr	r0, [pc, #56]	; (80075e4 <CDC_Receive_FS+0x48>)
 80075aa:	f7fe fdb0 	bl	800610e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075ae:	480d      	ldr	r0, [pc, #52]	; (80075e4 <CDC_Receive_FS+0x48>)
 80075b0:	f7fe fdef 	bl	8006192 <USBD_CDC_ReceivePacket>

  for ( int i = 0; i < *Len; i++)
 80075b4:	2300      	movs	r3, #0
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	e009      	b.n	80075ce <CDC_Receive_FS+0x32>
  {
    cdcDataIn(Buf[i]);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	4413      	add	r3, r2
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7ff ff1e 	bl	8007404 <cdcDataIn>
  for ( int i = 0; i < *Len; i++)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d8f0      	bhi.n	80075ba <CDC_Receive_FS+0x1e>
  }
  return (USBD_OK);
 80075d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	20000218 	.word	0x20000218

080075e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80075f8:	4b0d      	ldr	r3, [pc, #52]	; (8007630 <CDC_Transmit_FS+0x48>)
 80075fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800760a:	2301      	movs	r3, #1
 800760c:	e00b      	b.n	8007626 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800760e:	887b      	ldrh	r3, [r7, #2]
 8007610:	461a      	mov	r2, r3
 8007612:	6879      	ldr	r1, [r7, #4]
 8007614:	4806      	ldr	r0, [pc, #24]	; (8007630 <CDC_Transmit_FS+0x48>)
 8007616:	f7fe fd61 	bl	80060dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800761a:	4805      	ldr	r0, [pc, #20]	; (8007630 <CDC_Transmit_FS+0x48>)
 800761c:	f7fe fd8a 	bl	8006134 <USBD_CDC_TransmitPacket>
 8007620:	4603      	mov	r3, r0
 8007622:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007624:	7bfb      	ldrb	r3, [r7, #15]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	20000218 	.word	0x20000218

08007634 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	4603      	mov	r3, r0
 800763c:	6039      	str	r1, [r7, #0]
 800763e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2212      	movs	r2, #18
 8007644:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007646:	4b03      	ldr	r3, [pc, #12]	; (8007654 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	bc80      	pop	{r7}
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	20000154 	.word	0x20000154

08007658 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	4603      	mov	r3, r0
 8007660:	6039      	str	r1, [r7, #0]
 8007662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2204      	movs	r2, #4
 8007668:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800766a:	4b03      	ldr	r3, [pc, #12]	; (8007678 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800766c:	4618      	mov	r0, r3
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	20000168 	.word	0x20000168

0800767c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	4603      	mov	r3, r0
 8007684:	6039      	str	r1, [r7, #0]
 8007686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007688:	79fb      	ldrb	r3, [r7, #7]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d105      	bne.n	800769a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	4907      	ldr	r1, [pc, #28]	; (80076b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007692:	4808      	ldr	r0, [pc, #32]	; (80076b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007694:	f7ff fd64 	bl	8007160 <USBD_GetString>
 8007698:	e004      	b.n	80076a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	4904      	ldr	r1, [pc, #16]	; (80076b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800769e:	4805      	ldr	r0, [pc, #20]	; (80076b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80076a0:	f7ff fd5e 	bl	8007160 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076a4:	4b02      	ldr	r3, [pc, #8]	; (80076b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	20000ae4 	.word	0x20000ae4
 80076b4:	08008784 	.word	0x08008784

080076b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	6039      	str	r1, [r7, #0]
 80076c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	4904      	ldr	r1, [pc, #16]	; (80076d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80076c8:	4804      	ldr	r0, [pc, #16]	; (80076dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80076ca:	f7ff fd49 	bl	8007160 <USBD_GetString>
  return USBD_StrDesc;
 80076ce:	4b02      	ldr	r3, [pc, #8]	; (80076d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000ae4 	.word	0x20000ae4
 80076dc:	0800879c 	.word	0x0800879c

080076e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	4603      	mov	r3, r0
 80076e8:	6039      	str	r1, [r7, #0]
 80076ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	221a      	movs	r2, #26
 80076f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076f2:	f000 f843 	bl	800777c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80076f6:	4b02      	ldr	r3, [pc, #8]	; (8007700 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	2000016c 	.word	0x2000016c

08007704 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	4603      	mov	r3, r0
 800770c:	6039      	str	r1, [r7, #0]
 800770e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d105      	bne.n	8007722 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	4907      	ldr	r1, [pc, #28]	; (8007738 <USBD_FS_ConfigStrDescriptor+0x34>)
 800771a:	4808      	ldr	r0, [pc, #32]	; (800773c <USBD_FS_ConfigStrDescriptor+0x38>)
 800771c:	f7ff fd20 	bl	8007160 <USBD_GetString>
 8007720:	e004      	b.n	800772c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	4904      	ldr	r1, [pc, #16]	; (8007738 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007726:	4805      	ldr	r0, [pc, #20]	; (800773c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007728:	f7ff fd1a 	bl	8007160 <USBD_GetString>
  }
  return USBD_StrDesc;
 800772c:	4b02      	ldr	r3, [pc, #8]	; (8007738 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20000ae4 	.word	0x20000ae4
 800773c:	080087b0 	.word	0x080087b0

08007740 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	6039      	str	r1, [r7, #0]
 800774a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800774c:	79fb      	ldrb	r3, [r7, #7]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d105      	bne.n	800775e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	4907      	ldr	r1, [pc, #28]	; (8007774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007756:	4808      	ldr	r0, [pc, #32]	; (8007778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007758:	f7ff fd02 	bl	8007160 <USBD_GetString>
 800775c:	e004      	b.n	8007768 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	4904      	ldr	r1, [pc, #16]	; (8007774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007762:	4805      	ldr	r0, [pc, #20]	; (8007778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007764:	f7ff fcfc 	bl	8007160 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007768:	4b02      	ldr	r3, [pc, #8]	; (8007774 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20000ae4 	.word	0x20000ae4
 8007778:	080087bc 	.word	0x080087bc

0800777c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007782:	4b0f      	ldr	r3, [pc, #60]	; (80077c0 <Get_SerialNum+0x44>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007788:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <Get_SerialNum+0x48>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800778e:	4b0e      	ldr	r3, [pc, #56]	; (80077c8 <Get_SerialNum+0x4c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4413      	add	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d009      	beq.n	80077b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077a2:	2208      	movs	r2, #8
 80077a4:	4909      	ldr	r1, [pc, #36]	; (80077cc <Get_SerialNum+0x50>)
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 f814 	bl	80077d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077ac:	2204      	movs	r2, #4
 80077ae:	4908      	ldr	r1, [pc, #32]	; (80077d0 <Get_SerialNum+0x54>)
 80077b0:	68b8      	ldr	r0, [r7, #8]
 80077b2:	f000 f80f 	bl	80077d4 <IntToUnicode>
  }
}
 80077b6:	bf00      	nop
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	1ffff7e8 	.word	0x1ffff7e8
 80077c4:	1ffff7ec 	.word	0x1ffff7ec
 80077c8:	1ffff7f0 	.word	0x1ffff7f0
 80077cc:	2000016e 	.word	0x2000016e
 80077d0:	2000017e 	.word	0x2000017e

080077d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	4613      	mov	r3, r2
 80077e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80077e6:	2300      	movs	r3, #0
 80077e8:	75fb      	strb	r3, [r7, #23]
 80077ea:	e027      	b.n	800783c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	0f1b      	lsrs	r3, r3, #28
 80077f0:	2b09      	cmp	r3, #9
 80077f2:	d80b      	bhi.n	800780c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	0f1b      	lsrs	r3, r3, #28
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	7dfb      	ldrb	r3, [r7, #23]
 80077fc:	005b      	lsls	r3, r3, #1
 80077fe:	4619      	mov	r1, r3
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	440b      	add	r3, r1
 8007804:	3230      	adds	r2, #48	; 0x30
 8007806:	b2d2      	uxtb	r2, r2
 8007808:	701a      	strb	r2, [r3, #0]
 800780a:	e00a      	b.n	8007822 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	0f1b      	lsrs	r3, r3, #28
 8007810:	b2da      	uxtb	r2, r3
 8007812:	7dfb      	ldrb	r3, [r7, #23]
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	4619      	mov	r1, r3
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	440b      	add	r3, r1
 800781c:	3237      	adds	r2, #55	; 0x37
 800781e:	b2d2      	uxtb	r2, r2
 8007820:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	011b      	lsls	r3, r3, #4
 8007826:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007828:	7dfb      	ldrb	r3, [r7, #23]
 800782a:	005b      	lsls	r3, r3, #1
 800782c:	3301      	adds	r3, #1
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	4413      	add	r3, r2
 8007832:	2200      	movs	r2, #0
 8007834:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007836:	7dfb      	ldrb	r3, [r7, #23]
 8007838:	3301      	adds	r3, #1
 800783a:	75fb      	strb	r3, [r7, #23]
 800783c:	7dfa      	ldrb	r2, [r7, #23]
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	429a      	cmp	r2, r3
 8007842:	d3d3      	bcc.n	80077ec <IntToUnicode+0x18>
  }
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	371c      	adds	r7, #28
 800784a:	46bd      	mov	sp, r7
 800784c:	bc80      	pop	{r7}
 800784e:	4770      	bx	lr

08007850 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a0d      	ldr	r2, [pc, #52]	; (8007894 <HAL_PCD_MspInit+0x44>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d113      	bne.n	800788a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007862:	4b0d      	ldr	r3, [pc, #52]	; (8007898 <HAL_PCD_MspInit+0x48>)
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	4a0c      	ldr	r2, [pc, #48]	; (8007898 <HAL_PCD_MspInit+0x48>)
 8007868:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800786c:	61d3      	str	r3, [r2, #28]
 800786e:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <HAL_PCD_MspInit+0x48>)
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800787a:	2200      	movs	r2, #0
 800787c:	2100      	movs	r1, #0
 800787e:	2014      	movs	r0, #20
 8007880:	f7f9 f8c3 	bl	8000a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007884:	2014      	movs	r0, #20
 8007886:	f7f9 f8dc 	bl	8000a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800788a:	bf00      	nop
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	40005c00 	.word	0x40005c00
 8007898:	40021000 	.word	0x40021000

0800789c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80078b0:	4619      	mov	r1, r3
 80078b2:	4610      	mov	r0, r2
 80078b4:	f7fe fd23 	bl	80062fe <USBD_LL_SetupStage>
}
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80078d2:	78fa      	ldrb	r2, [r7, #3]
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	4613      	mov	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	00db      	lsls	r3, r3, #3
 80078de:	440b      	add	r3, r1
 80078e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	78fb      	ldrb	r3, [r7, #3]
 80078e8:	4619      	mov	r1, r3
 80078ea:	f7fe fd55 	bl	8006398 <USBD_LL_DataOutStage>
}
 80078ee:	bf00      	nop
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b082      	sub	sp, #8
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	460b      	mov	r3, r1
 8007900:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007908:	78fa      	ldrb	r2, [r7, #3]
 800790a:	6879      	ldr	r1, [r7, #4]
 800790c:	4613      	mov	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	00db      	lsls	r3, r3, #3
 8007914:	440b      	add	r3, r1
 8007916:	333c      	adds	r3, #60	; 0x3c
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	78fb      	ldrb	r3, [r7, #3]
 800791c:	4619      	mov	r1, r3
 800791e:	f7fe fdac 	bl	800647a <USBD_LL_DataInStage>
}
 8007922:	bf00      	nop
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b082      	sub	sp, #8
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007938:	4618      	mov	r0, r3
 800793a:	f7fe febc 	bl	80066b6 <USBD_LL_SOF>
}
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800794e:	2301      	movs	r3, #1
 8007950:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	2b02      	cmp	r3, #2
 8007958:	d001      	beq.n	800795e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800795a:	f7f8 fcf7 	bl	800034c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007964:	7bfa      	ldrb	r2, [r7, #15]
 8007966:	4611      	mov	r1, r2
 8007968:	4618      	mov	r0, r3
 800796a:	f7fe fe6c 	bl	8006646 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe fe25 	bl	80065c4 <USBD_LL_Reset>
}
 800797a:	bf00      	nop
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
	...

08007984 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007992:	4618      	mov	r0, r3
 8007994:	f7fe fe66 	bl	8006664 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d005      	beq.n	80079ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079a0:	4b04      	ldr	r3, [pc, #16]	; (80079b4 <HAL_PCD_SuspendCallback+0x30>)
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	4a03      	ldr	r2, [pc, #12]	; (80079b4 <HAL_PCD_SuspendCallback+0x30>)
 80079a6:	f043 0306 	orr.w	r3, r3, #6
 80079aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80079ac:	bf00      	nop
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	e000ed00 	.word	0xe000ed00

080079b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fe fe60 	bl	800668c <USBD_LL_Resume>
}
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80079dc:	4a28      	ldr	r2, [pc, #160]	; (8007a80 <USBD_LL_Init+0xac>)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a26      	ldr	r2, [pc, #152]	; (8007a80 <USBD_LL_Init+0xac>)
 80079e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80079ec:	4b24      	ldr	r3, [pc, #144]	; (8007a80 <USBD_LL_Init+0xac>)
 80079ee:	4a25      	ldr	r2, [pc, #148]	; (8007a84 <USBD_LL_Init+0xb0>)
 80079f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80079f2:	4b23      	ldr	r3, [pc, #140]	; (8007a80 <USBD_LL_Init+0xac>)
 80079f4:	2208      	movs	r2, #8
 80079f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80079f8:	4b21      	ldr	r3, [pc, #132]	; (8007a80 <USBD_LL_Init+0xac>)
 80079fa:	2202      	movs	r2, #2
 80079fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80079fe:	4b20      	ldr	r3, [pc, #128]	; (8007a80 <USBD_LL_Init+0xac>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007a04:	4b1e      	ldr	r3, [pc, #120]	; (8007a80 <USBD_LL_Init+0xac>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007a0a:	4b1d      	ldr	r3, [pc, #116]	; (8007a80 <USBD_LL_Init+0xac>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007a10:	481b      	ldr	r0, [pc, #108]	; (8007a80 <USBD_LL_Init+0xac>)
 8007a12:	f7f9 f9e6 	bl	8000de2 <HAL_PCD_Init>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007a1c:	f7f8 fc96 	bl	800034c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a26:	2318      	movs	r3, #24
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	f7fa fe5a 	bl	80026e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a36:	2358      	movs	r3, #88	; 0x58
 8007a38:	2200      	movs	r2, #0
 8007a3a:	2180      	movs	r1, #128	; 0x80
 8007a3c:	f7fa fe52 	bl	80026e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a46:	23c0      	movs	r3, #192	; 0xc0
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2181      	movs	r1, #129	; 0x81
 8007a4c:	f7fa fe4a 	bl	80026e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a56:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	f7fa fe41 	bl	80026e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2182      	movs	r1, #130	; 0x82
 8007a70:	f7fa fe38 	bl	80026e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20000ce4 	.word	0x20000ce4
 8007a84:	40005c00 	.word	0x40005c00

08007a88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7f9 faaa 	bl	8000ff8 <HAL_PCD_Start>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 f94e 	bl	8007d4c <USBD_Get_USB_Status>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	4608      	mov	r0, r1
 8007ac8:	4611      	mov	r1, r2
 8007aca:	461a      	mov	r2, r3
 8007acc:	4603      	mov	r3, r0
 8007ace:	70fb      	strb	r3, [r7, #3]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70bb      	strb	r3, [r7, #2]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ae6:	78bb      	ldrb	r3, [r7, #2]
 8007ae8:	883a      	ldrh	r2, [r7, #0]
 8007aea:	78f9      	ldrb	r1, [r7, #3]
 8007aec:	f7f9 fc22 	bl	8001334 <HAL_PCD_EP_Open>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 f928 	bl	8007d4c <USBD_Get_USB_Status>
 8007afc:	4603      	mov	r3, r0
 8007afe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b084      	sub	sp, #16
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	460b      	mov	r3, r1
 8007b14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b24:	78fa      	ldrb	r2, [r7, #3]
 8007b26:	4611      	mov	r1, r2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7f9 fc69 	bl	8001400 <HAL_PCD_EP_Close>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 f909 	bl	8007d4c <USBD_Get_USB_Status>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b62:	78fa      	ldrb	r2, [r7, #3]
 8007b64:	4611      	mov	r1, r2
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7f9 fd29 	bl	80015be <HAL_PCD_EP_SetStall>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 f8ea 	bl	8007d4c <USBD_Get_USB_Status>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	460b      	mov	r3, r1
 8007b90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ba0:	78fa      	ldrb	r2, [r7, #3]
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7f9 fd6a 	bl	800167e <HAL_PCD_EP_ClrStall>
 8007baa:	4603      	mov	r3, r0
 8007bac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 f8cb 	bl	8007d4c <USBD_Get_USB_Status>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	da0c      	bge.n	8007bfa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007be0:	78fb      	ldrb	r3, [r7, #3]
 8007be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007be6:	68f9      	ldr	r1, [r7, #12]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	4613      	mov	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	00db      	lsls	r3, r3, #3
 8007bf2:	440b      	add	r3, r1
 8007bf4:	3302      	adds	r3, #2
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	e00b      	b.n	8007c12 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bfa:	78fb      	ldrb	r3, [r7, #3]
 8007bfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c00:	68f9      	ldr	r1, [r7, #12]
 8007c02:	4613      	mov	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	00db      	lsls	r3, r3, #3
 8007c0a:	440b      	add	r3, r1
 8007c0c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007c10:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bc80      	pop	{r7}
 8007c1a:	4770      	bx	lr

08007c1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c36:	78fa      	ldrb	r2, [r7, #3]
 8007c38:	4611      	mov	r1, r2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7f9 fb55 	bl	80012ea <HAL_PCD_SetAddress>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 f880 	bl	8007d4c <USBD_Get_USB_Status>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b086      	sub	sp, #24
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	461a      	mov	r2, r3
 8007c66:	460b      	mov	r3, r1
 8007c68:	72fb      	strb	r3, [r7, #11]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c7c:	893b      	ldrh	r3, [r7, #8]
 8007c7e:	7af9      	ldrb	r1, [r7, #11]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	f7f9 fc59 	bl	8001538 <HAL_PCD_EP_Transmit>
 8007c86:	4603      	mov	r3, r0
 8007c88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 f85d 	bl	8007d4c <USBD_Get_USB_Status>
 8007c92:	4603      	mov	r3, r0
 8007c94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c96:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	607a      	str	r2, [r7, #4]
 8007caa:	461a      	mov	r2, r3
 8007cac:	460b      	mov	r3, r1
 8007cae:	72fb      	strb	r3, [r7, #11]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007cc2:	893b      	ldrh	r3, [r7, #8]
 8007cc4:	7af9      	ldrb	r1, [r7, #11]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	f7f9 fbe2 	bl	8001490 <HAL_PCD_EP_Receive>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 f83a 	bl	8007d4c <USBD_Get_USB_Status>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cdc:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cf8:	78fa      	ldrb	r2, [r7, #3]
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7f9 fc04 	bl	800150a <HAL_PCD_EP_GetRxCount>
 8007d02:	4603      	mov	r3, r0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d14:	4b02      	ldr	r3, [pc, #8]	; (8007d20 <USBD_static_malloc+0x14>)
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bc80      	pop	{r7}
 8007d1e:	4770      	bx	lr
 8007d20:	20000fd0 	.word	0x20000fd0

08007d24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]

}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bc80      	pop	{r7}
 8007d34:	4770      	bx	lr

08007d36 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bc80      	pop	{r7}
 8007d4a:	4770      	bx	lr

08007d4c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	4603      	mov	r3, r0
 8007d54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d5a:	79fb      	ldrb	r3, [r7, #7]
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d817      	bhi.n	8007d90 <USBD_Get_USB_Status+0x44>
 8007d60:	a201      	add	r2, pc, #4	; (adr r2, 8007d68 <USBD_Get_USB_Status+0x1c>)
 8007d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d66:	bf00      	nop
 8007d68:	08007d79 	.word	0x08007d79
 8007d6c:	08007d7f 	.word	0x08007d7f
 8007d70:	08007d85 	.word	0x08007d85
 8007d74:	08007d8b 	.word	0x08007d8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d7c:	e00b      	b.n	8007d96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	73fb      	strb	r3, [r7, #15]
    break;
 8007d82:	e008      	b.n	8007d96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d84:	2301      	movs	r3, #1
 8007d86:	73fb      	strb	r3, [r7, #15]
    break;
 8007d88:	e005      	b.n	8007d96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d8e:	e002      	b.n	8007d96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d90:	2302      	movs	r3, #2
 8007d92:	73fb      	strb	r3, [r7, #15]
    break;
 8007d94:	bf00      	nop
  }
  return usb_status;
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bc80      	pop	{r7}
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop

08007da4 <main>:

#include "main.h"


int main(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  hwInit();
 8007da8:	f7f8 fcc8 	bl	800073c <hwInit>
  apInit();
 8007dac:	f7f8 f9ce 	bl	800014c <apInit>

  apMain();
 8007db0:	f7f8 f9d6 	bl	8000160 <apMain>

  return 0;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	bd80      	pop	{r7, pc}
	...

08007dbc <__errno>:
 8007dbc:	4b01      	ldr	r3, [pc, #4]	; (8007dc4 <__errno+0x8>)
 8007dbe:	6818      	ldr	r0, [r3, #0]
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	20000188 	.word	0x20000188

08007dc8 <__libc_init_array>:
 8007dc8:	b570      	push	{r4, r5, r6, lr}
 8007dca:	2600      	movs	r6, #0
 8007dcc:	4d0c      	ldr	r5, [pc, #48]	; (8007e00 <__libc_init_array+0x38>)
 8007dce:	4c0d      	ldr	r4, [pc, #52]	; (8007e04 <__libc_init_array+0x3c>)
 8007dd0:	1b64      	subs	r4, r4, r5
 8007dd2:	10a4      	asrs	r4, r4, #2
 8007dd4:	42a6      	cmp	r6, r4
 8007dd6:	d109      	bne.n	8007dec <__libc_init_array+0x24>
 8007dd8:	f000 fcb6 	bl	8008748 <_init>
 8007ddc:	2600      	movs	r6, #0
 8007dde:	4d0a      	ldr	r5, [pc, #40]	; (8007e08 <__libc_init_array+0x40>)
 8007de0:	4c0a      	ldr	r4, [pc, #40]	; (8007e0c <__libc_init_array+0x44>)
 8007de2:	1b64      	subs	r4, r4, r5
 8007de4:	10a4      	asrs	r4, r4, #2
 8007de6:	42a6      	cmp	r6, r4
 8007de8:	d105      	bne.n	8007df6 <__libc_init_array+0x2e>
 8007dea:	bd70      	pop	{r4, r5, r6, pc}
 8007dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007df0:	4798      	blx	r3
 8007df2:	3601      	adds	r6, #1
 8007df4:	e7ee      	b.n	8007dd4 <__libc_init_array+0xc>
 8007df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dfa:	4798      	blx	r3
 8007dfc:	3601      	adds	r6, #1
 8007dfe:	e7f2      	b.n	8007de6 <__libc_init_array+0x1e>
 8007e00:	08008810 	.word	0x08008810
 8007e04:	08008810 	.word	0x08008810
 8007e08:	08008810 	.word	0x08008810
 8007e0c:	08008814 	.word	0x08008814

08007e10 <memset>:
 8007e10:	4603      	mov	r3, r0
 8007e12:	4402      	add	r2, r0
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d100      	bne.n	8007e1a <memset+0xa>
 8007e18:	4770      	bx	lr
 8007e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e1e:	e7f9      	b.n	8007e14 <memset+0x4>

08007e20 <_vsniprintf_r>:
 8007e20:	b530      	push	{r4, r5, lr}
 8007e22:	4614      	mov	r4, r2
 8007e24:	2c00      	cmp	r4, #0
 8007e26:	4605      	mov	r5, r0
 8007e28:	461a      	mov	r2, r3
 8007e2a:	b09b      	sub	sp, #108	; 0x6c
 8007e2c:	da05      	bge.n	8007e3a <_vsniprintf_r+0x1a>
 8007e2e:	238b      	movs	r3, #139	; 0x8b
 8007e30:	6003      	str	r3, [r0, #0]
 8007e32:	f04f 30ff 	mov.w	r0, #4294967295
 8007e36:	b01b      	add	sp, #108	; 0x6c
 8007e38:	bd30      	pop	{r4, r5, pc}
 8007e3a:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007e3e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007e42:	bf0c      	ite	eq
 8007e44:	4623      	moveq	r3, r4
 8007e46:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007e4a:	9302      	str	r3, [sp, #8]
 8007e4c:	9305      	str	r3, [sp, #20]
 8007e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e52:	9100      	str	r1, [sp, #0]
 8007e54:	9104      	str	r1, [sp, #16]
 8007e56:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007e5a:	4669      	mov	r1, sp
 8007e5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007e5e:	f000 f875 	bl	8007f4c <_svfiprintf_r>
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	bfbc      	itt	lt
 8007e66:	238b      	movlt	r3, #139	; 0x8b
 8007e68:	602b      	strlt	r3, [r5, #0]
 8007e6a:	2c00      	cmp	r4, #0
 8007e6c:	d0e3      	beq.n	8007e36 <_vsniprintf_r+0x16>
 8007e6e:	2200      	movs	r2, #0
 8007e70:	9b00      	ldr	r3, [sp, #0]
 8007e72:	701a      	strb	r2, [r3, #0]
 8007e74:	e7df      	b.n	8007e36 <_vsniprintf_r+0x16>
	...

08007e78 <vsniprintf>:
 8007e78:	b507      	push	{r0, r1, r2, lr}
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	460a      	mov	r2, r1
 8007e80:	4601      	mov	r1, r0
 8007e82:	4803      	ldr	r0, [pc, #12]	; (8007e90 <vsniprintf+0x18>)
 8007e84:	6800      	ldr	r0, [r0, #0]
 8007e86:	f7ff ffcb 	bl	8007e20 <_vsniprintf_r>
 8007e8a:	b003      	add	sp, #12
 8007e8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e90:	20000188 	.word	0x20000188

08007e94 <__ssputs_r>:
 8007e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e98:	688e      	ldr	r6, [r1, #8]
 8007e9a:	4682      	mov	sl, r0
 8007e9c:	429e      	cmp	r6, r3
 8007e9e:	460c      	mov	r4, r1
 8007ea0:	4690      	mov	r8, r2
 8007ea2:	461f      	mov	r7, r3
 8007ea4:	d838      	bhi.n	8007f18 <__ssputs_r+0x84>
 8007ea6:	898a      	ldrh	r2, [r1, #12]
 8007ea8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007eac:	d032      	beq.n	8007f14 <__ssputs_r+0x80>
 8007eae:	6825      	ldr	r5, [r4, #0]
 8007eb0:	6909      	ldr	r1, [r1, #16]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	eba5 0901 	sub.w	r9, r5, r1
 8007eb8:	6965      	ldr	r5, [r4, #20]
 8007eba:	444b      	add	r3, r9
 8007ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ec0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ec4:	106d      	asrs	r5, r5, #1
 8007ec6:	429d      	cmp	r5, r3
 8007ec8:	bf38      	it	cc
 8007eca:	461d      	movcc	r5, r3
 8007ecc:	0553      	lsls	r3, r2, #21
 8007ece:	d531      	bpl.n	8007f34 <__ssputs_r+0xa0>
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	f000 fb6f 	bl	80085b4 <_malloc_r>
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	b950      	cbnz	r0, 8007ef0 <__ssputs_r+0x5c>
 8007eda:	230c      	movs	r3, #12
 8007edc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee0:	f8ca 3000 	str.w	r3, [sl]
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eea:	81a3      	strh	r3, [r4, #12]
 8007eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef0:	464a      	mov	r2, r9
 8007ef2:	6921      	ldr	r1, [r4, #16]
 8007ef4:	f000 face 	bl	8008494 <memcpy>
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f02:	81a3      	strh	r3, [r4, #12]
 8007f04:	6126      	str	r6, [r4, #16]
 8007f06:	444e      	add	r6, r9
 8007f08:	6026      	str	r6, [r4, #0]
 8007f0a:	463e      	mov	r6, r7
 8007f0c:	6165      	str	r5, [r4, #20]
 8007f0e:	eba5 0509 	sub.w	r5, r5, r9
 8007f12:	60a5      	str	r5, [r4, #8]
 8007f14:	42be      	cmp	r6, r7
 8007f16:	d900      	bls.n	8007f1a <__ssputs_r+0x86>
 8007f18:	463e      	mov	r6, r7
 8007f1a:	4632      	mov	r2, r6
 8007f1c:	4641      	mov	r1, r8
 8007f1e:	6820      	ldr	r0, [r4, #0]
 8007f20:	f000 fac6 	bl	80084b0 <memmove>
 8007f24:	68a3      	ldr	r3, [r4, #8]
 8007f26:	2000      	movs	r0, #0
 8007f28:	1b9b      	subs	r3, r3, r6
 8007f2a:	60a3      	str	r3, [r4, #8]
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	4433      	add	r3, r6
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	e7db      	b.n	8007eec <__ssputs_r+0x58>
 8007f34:	462a      	mov	r2, r5
 8007f36:	f000 fbb1 	bl	800869c <_realloc_r>
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d1e1      	bne.n	8007f04 <__ssputs_r+0x70>
 8007f40:	4650      	mov	r0, sl
 8007f42:	6921      	ldr	r1, [r4, #16]
 8007f44:	f000 face 	bl	80084e4 <_free_r>
 8007f48:	e7c7      	b.n	8007eda <__ssputs_r+0x46>
	...

08007f4c <_svfiprintf_r>:
 8007f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f50:	4698      	mov	r8, r3
 8007f52:	898b      	ldrh	r3, [r1, #12]
 8007f54:	4607      	mov	r7, r0
 8007f56:	061b      	lsls	r3, r3, #24
 8007f58:	460d      	mov	r5, r1
 8007f5a:	4614      	mov	r4, r2
 8007f5c:	b09d      	sub	sp, #116	; 0x74
 8007f5e:	d50e      	bpl.n	8007f7e <_svfiprintf_r+0x32>
 8007f60:	690b      	ldr	r3, [r1, #16]
 8007f62:	b963      	cbnz	r3, 8007f7e <_svfiprintf_r+0x32>
 8007f64:	2140      	movs	r1, #64	; 0x40
 8007f66:	f000 fb25 	bl	80085b4 <_malloc_r>
 8007f6a:	6028      	str	r0, [r5, #0]
 8007f6c:	6128      	str	r0, [r5, #16]
 8007f6e:	b920      	cbnz	r0, 8007f7a <_svfiprintf_r+0x2e>
 8007f70:	230c      	movs	r3, #12
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	f04f 30ff 	mov.w	r0, #4294967295
 8007f78:	e0d1      	b.n	800811e <_svfiprintf_r+0x1d2>
 8007f7a:	2340      	movs	r3, #64	; 0x40
 8007f7c:	616b      	str	r3, [r5, #20]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9309      	str	r3, [sp, #36]	; 0x24
 8007f82:	2320      	movs	r3, #32
 8007f84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f88:	2330      	movs	r3, #48	; 0x30
 8007f8a:	f04f 0901 	mov.w	r9, #1
 8007f8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008138 <_svfiprintf_r+0x1ec>
 8007f96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f9a:	4623      	mov	r3, r4
 8007f9c:	469a      	mov	sl, r3
 8007f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fa2:	b10a      	cbz	r2, 8007fa8 <_svfiprintf_r+0x5c>
 8007fa4:	2a25      	cmp	r2, #37	; 0x25
 8007fa6:	d1f9      	bne.n	8007f9c <_svfiprintf_r+0x50>
 8007fa8:	ebba 0b04 	subs.w	fp, sl, r4
 8007fac:	d00b      	beq.n	8007fc6 <_svfiprintf_r+0x7a>
 8007fae:	465b      	mov	r3, fp
 8007fb0:	4622      	mov	r2, r4
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	f7ff ff6d 	bl	8007e94 <__ssputs_r>
 8007fba:	3001      	adds	r0, #1
 8007fbc:	f000 80aa 	beq.w	8008114 <_svfiprintf_r+0x1c8>
 8007fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fc2:	445a      	add	r2, fp
 8007fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 80a2 	beq.w	8008114 <_svfiprintf_r+0x1c8>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fda:	f10a 0a01 	add.w	sl, sl, #1
 8007fde:	9304      	str	r3, [sp, #16]
 8007fe0:	9307      	str	r3, [sp, #28]
 8007fe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fe6:	931a      	str	r3, [sp, #104]	; 0x68
 8007fe8:	4654      	mov	r4, sl
 8007fea:	2205      	movs	r2, #5
 8007fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff0:	4851      	ldr	r0, [pc, #324]	; (8008138 <_svfiprintf_r+0x1ec>)
 8007ff2:	f000 fa41 	bl	8008478 <memchr>
 8007ff6:	9a04      	ldr	r2, [sp, #16]
 8007ff8:	b9d8      	cbnz	r0, 8008032 <_svfiprintf_r+0xe6>
 8007ffa:	06d0      	lsls	r0, r2, #27
 8007ffc:	bf44      	itt	mi
 8007ffe:	2320      	movmi	r3, #32
 8008000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008004:	0711      	lsls	r1, r2, #28
 8008006:	bf44      	itt	mi
 8008008:	232b      	movmi	r3, #43	; 0x2b
 800800a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800800e:	f89a 3000 	ldrb.w	r3, [sl]
 8008012:	2b2a      	cmp	r3, #42	; 0x2a
 8008014:	d015      	beq.n	8008042 <_svfiprintf_r+0xf6>
 8008016:	4654      	mov	r4, sl
 8008018:	2000      	movs	r0, #0
 800801a:	f04f 0c0a 	mov.w	ip, #10
 800801e:	9a07      	ldr	r2, [sp, #28]
 8008020:	4621      	mov	r1, r4
 8008022:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008026:	3b30      	subs	r3, #48	; 0x30
 8008028:	2b09      	cmp	r3, #9
 800802a:	d94e      	bls.n	80080ca <_svfiprintf_r+0x17e>
 800802c:	b1b0      	cbz	r0, 800805c <_svfiprintf_r+0x110>
 800802e:	9207      	str	r2, [sp, #28]
 8008030:	e014      	b.n	800805c <_svfiprintf_r+0x110>
 8008032:	eba0 0308 	sub.w	r3, r0, r8
 8008036:	fa09 f303 	lsl.w	r3, r9, r3
 800803a:	4313      	orrs	r3, r2
 800803c:	46a2      	mov	sl, r4
 800803e:	9304      	str	r3, [sp, #16]
 8008040:	e7d2      	b.n	8007fe8 <_svfiprintf_r+0x9c>
 8008042:	9b03      	ldr	r3, [sp, #12]
 8008044:	1d19      	adds	r1, r3, #4
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	9103      	str	r1, [sp, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	bfbb      	ittet	lt
 800804e:	425b      	neglt	r3, r3
 8008050:	f042 0202 	orrlt.w	r2, r2, #2
 8008054:	9307      	strge	r3, [sp, #28]
 8008056:	9307      	strlt	r3, [sp, #28]
 8008058:	bfb8      	it	lt
 800805a:	9204      	strlt	r2, [sp, #16]
 800805c:	7823      	ldrb	r3, [r4, #0]
 800805e:	2b2e      	cmp	r3, #46	; 0x2e
 8008060:	d10c      	bne.n	800807c <_svfiprintf_r+0x130>
 8008062:	7863      	ldrb	r3, [r4, #1]
 8008064:	2b2a      	cmp	r3, #42	; 0x2a
 8008066:	d135      	bne.n	80080d4 <_svfiprintf_r+0x188>
 8008068:	9b03      	ldr	r3, [sp, #12]
 800806a:	3402      	adds	r4, #2
 800806c:	1d1a      	adds	r2, r3, #4
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	9203      	str	r2, [sp, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	bfb8      	it	lt
 8008076:	f04f 33ff 	movlt.w	r3, #4294967295
 800807a:	9305      	str	r3, [sp, #20]
 800807c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800813c <_svfiprintf_r+0x1f0>
 8008080:	2203      	movs	r2, #3
 8008082:	4650      	mov	r0, sl
 8008084:	7821      	ldrb	r1, [r4, #0]
 8008086:	f000 f9f7 	bl	8008478 <memchr>
 800808a:	b140      	cbz	r0, 800809e <_svfiprintf_r+0x152>
 800808c:	2340      	movs	r3, #64	; 0x40
 800808e:	eba0 000a 	sub.w	r0, r0, sl
 8008092:	fa03 f000 	lsl.w	r0, r3, r0
 8008096:	9b04      	ldr	r3, [sp, #16]
 8008098:	3401      	adds	r4, #1
 800809a:	4303      	orrs	r3, r0
 800809c:	9304      	str	r3, [sp, #16]
 800809e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a2:	2206      	movs	r2, #6
 80080a4:	4826      	ldr	r0, [pc, #152]	; (8008140 <_svfiprintf_r+0x1f4>)
 80080a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080aa:	f000 f9e5 	bl	8008478 <memchr>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d038      	beq.n	8008124 <_svfiprintf_r+0x1d8>
 80080b2:	4b24      	ldr	r3, [pc, #144]	; (8008144 <_svfiprintf_r+0x1f8>)
 80080b4:	bb1b      	cbnz	r3, 80080fe <_svfiprintf_r+0x1b2>
 80080b6:	9b03      	ldr	r3, [sp, #12]
 80080b8:	3307      	adds	r3, #7
 80080ba:	f023 0307 	bic.w	r3, r3, #7
 80080be:	3308      	adds	r3, #8
 80080c0:	9303      	str	r3, [sp, #12]
 80080c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c4:	4433      	add	r3, r6
 80080c6:	9309      	str	r3, [sp, #36]	; 0x24
 80080c8:	e767      	b.n	8007f9a <_svfiprintf_r+0x4e>
 80080ca:	460c      	mov	r4, r1
 80080cc:	2001      	movs	r0, #1
 80080ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80080d2:	e7a5      	b.n	8008020 <_svfiprintf_r+0xd4>
 80080d4:	2300      	movs	r3, #0
 80080d6:	f04f 0c0a 	mov.w	ip, #10
 80080da:	4619      	mov	r1, r3
 80080dc:	3401      	adds	r4, #1
 80080de:	9305      	str	r3, [sp, #20]
 80080e0:	4620      	mov	r0, r4
 80080e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080e6:	3a30      	subs	r2, #48	; 0x30
 80080e8:	2a09      	cmp	r2, #9
 80080ea:	d903      	bls.n	80080f4 <_svfiprintf_r+0x1a8>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0c5      	beq.n	800807c <_svfiprintf_r+0x130>
 80080f0:	9105      	str	r1, [sp, #20]
 80080f2:	e7c3      	b.n	800807c <_svfiprintf_r+0x130>
 80080f4:	4604      	mov	r4, r0
 80080f6:	2301      	movs	r3, #1
 80080f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80080fc:	e7f0      	b.n	80080e0 <_svfiprintf_r+0x194>
 80080fe:	ab03      	add	r3, sp, #12
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	462a      	mov	r2, r5
 8008104:	4638      	mov	r0, r7
 8008106:	4b10      	ldr	r3, [pc, #64]	; (8008148 <_svfiprintf_r+0x1fc>)
 8008108:	a904      	add	r1, sp, #16
 800810a:	f3af 8000 	nop.w
 800810e:	1c42      	adds	r2, r0, #1
 8008110:	4606      	mov	r6, r0
 8008112:	d1d6      	bne.n	80080c2 <_svfiprintf_r+0x176>
 8008114:	89ab      	ldrh	r3, [r5, #12]
 8008116:	065b      	lsls	r3, r3, #25
 8008118:	f53f af2c 	bmi.w	8007f74 <_svfiprintf_r+0x28>
 800811c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800811e:	b01d      	add	sp, #116	; 0x74
 8008120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008124:	ab03      	add	r3, sp, #12
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	462a      	mov	r2, r5
 800812a:	4638      	mov	r0, r7
 800812c:	4b06      	ldr	r3, [pc, #24]	; (8008148 <_svfiprintf_r+0x1fc>)
 800812e:	a904      	add	r1, sp, #16
 8008130:	f000 f87c 	bl	800822c <_printf_i>
 8008134:	e7eb      	b.n	800810e <_svfiprintf_r+0x1c2>
 8008136:	bf00      	nop
 8008138:	080087dc 	.word	0x080087dc
 800813c:	080087e2 	.word	0x080087e2
 8008140:	080087e6 	.word	0x080087e6
 8008144:	00000000 	.word	0x00000000
 8008148:	08007e95 	.word	0x08007e95

0800814c <_printf_common>:
 800814c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008150:	4616      	mov	r6, r2
 8008152:	4699      	mov	r9, r3
 8008154:	688a      	ldr	r2, [r1, #8]
 8008156:	690b      	ldr	r3, [r1, #16]
 8008158:	4607      	mov	r7, r0
 800815a:	4293      	cmp	r3, r2
 800815c:	bfb8      	it	lt
 800815e:	4613      	movlt	r3, r2
 8008160:	6033      	str	r3, [r6, #0]
 8008162:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008166:	460c      	mov	r4, r1
 8008168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800816c:	b10a      	cbz	r2, 8008172 <_printf_common+0x26>
 800816e:	3301      	adds	r3, #1
 8008170:	6033      	str	r3, [r6, #0]
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	0699      	lsls	r1, r3, #26
 8008176:	bf42      	ittt	mi
 8008178:	6833      	ldrmi	r3, [r6, #0]
 800817a:	3302      	addmi	r3, #2
 800817c:	6033      	strmi	r3, [r6, #0]
 800817e:	6825      	ldr	r5, [r4, #0]
 8008180:	f015 0506 	ands.w	r5, r5, #6
 8008184:	d106      	bne.n	8008194 <_printf_common+0x48>
 8008186:	f104 0a19 	add.w	sl, r4, #25
 800818a:	68e3      	ldr	r3, [r4, #12]
 800818c:	6832      	ldr	r2, [r6, #0]
 800818e:	1a9b      	subs	r3, r3, r2
 8008190:	42ab      	cmp	r3, r5
 8008192:	dc28      	bgt.n	80081e6 <_printf_common+0x9a>
 8008194:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008198:	1e13      	subs	r3, r2, #0
 800819a:	6822      	ldr	r2, [r4, #0]
 800819c:	bf18      	it	ne
 800819e:	2301      	movne	r3, #1
 80081a0:	0692      	lsls	r2, r2, #26
 80081a2:	d42d      	bmi.n	8008200 <_printf_common+0xb4>
 80081a4:	4649      	mov	r1, r9
 80081a6:	4638      	mov	r0, r7
 80081a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081ac:	47c0      	blx	r8
 80081ae:	3001      	adds	r0, #1
 80081b0:	d020      	beq.n	80081f4 <_printf_common+0xa8>
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	68e5      	ldr	r5, [r4, #12]
 80081b6:	f003 0306 	and.w	r3, r3, #6
 80081ba:	2b04      	cmp	r3, #4
 80081bc:	bf18      	it	ne
 80081be:	2500      	movne	r5, #0
 80081c0:	6832      	ldr	r2, [r6, #0]
 80081c2:	f04f 0600 	mov.w	r6, #0
 80081c6:	68a3      	ldr	r3, [r4, #8]
 80081c8:	bf08      	it	eq
 80081ca:	1aad      	subeq	r5, r5, r2
 80081cc:	6922      	ldr	r2, [r4, #16]
 80081ce:	bf08      	it	eq
 80081d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081d4:	4293      	cmp	r3, r2
 80081d6:	bfc4      	itt	gt
 80081d8:	1a9b      	subgt	r3, r3, r2
 80081da:	18ed      	addgt	r5, r5, r3
 80081dc:	341a      	adds	r4, #26
 80081de:	42b5      	cmp	r5, r6
 80081e0:	d11a      	bne.n	8008218 <_printf_common+0xcc>
 80081e2:	2000      	movs	r0, #0
 80081e4:	e008      	b.n	80081f8 <_printf_common+0xac>
 80081e6:	2301      	movs	r3, #1
 80081e8:	4652      	mov	r2, sl
 80081ea:	4649      	mov	r1, r9
 80081ec:	4638      	mov	r0, r7
 80081ee:	47c0      	blx	r8
 80081f0:	3001      	adds	r0, #1
 80081f2:	d103      	bne.n	80081fc <_printf_common+0xb0>
 80081f4:	f04f 30ff 	mov.w	r0, #4294967295
 80081f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fc:	3501      	adds	r5, #1
 80081fe:	e7c4      	b.n	800818a <_printf_common+0x3e>
 8008200:	2030      	movs	r0, #48	; 0x30
 8008202:	18e1      	adds	r1, r4, r3
 8008204:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008208:	1c5a      	adds	r2, r3, #1
 800820a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800820e:	4422      	add	r2, r4
 8008210:	3302      	adds	r3, #2
 8008212:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008216:	e7c5      	b.n	80081a4 <_printf_common+0x58>
 8008218:	2301      	movs	r3, #1
 800821a:	4622      	mov	r2, r4
 800821c:	4649      	mov	r1, r9
 800821e:	4638      	mov	r0, r7
 8008220:	47c0      	blx	r8
 8008222:	3001      	adds	r0, #1
 8008224:	d0e6      	beq.n	80081f4 <_printf_common+0xa8>
 8008226:	3601      	adds	r6, #1
 8008228:	e7d9      	b.n	80081de <_printf_common+0x92>
	...

0800822c <_printf_i>:
 800822c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008230:	7e0f      	ldrb	r7, [r1, #24]
 8008232:	4691      	mov	r9, r2
 8008234:	2f78      	cmp	r7, #120	; 0x78
 8008236:	4680      	mov	r8, r0
 8008238:	460c      	mov	r4, r1
 800823a:	469a      	mov	sl, r3
 800823c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800823e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008242:	d807      	bhi.n	8008254 <_printf_i+0x28>
 8008244:	2f62      	cmp	r7, #98	; 0x62
 8008246:	d80a      	bhi.n	800825e <_printf_i+0x32>
 8008248:	2f00      	cmp	r7, #0
 800824a:	f000 80d9 	beq.w	8008400 <_printf_i+0x1d4>
 800824e:	2f58      	cmp	r7, #88	; 0x58
 8008250:	f000 80a4 	beq.w	800839c <_printf_i+0x170>
 8008254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800825c:	e03a      	b.n	80082d4 <_printf_i+0xa8>
 800825e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008262:	2b15      	cmp	r3, #21
 8008264:	d8f6      	bhi.n	8008254 <_printf_i+0x28>
 8008266:	a101      	add	r1, pc, #4	; (adr r1, 800826c <_printf_i+0x40>)
 8008268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800826c:	080082c5 	.word	0x080082c5
 8008270:	080082d9 	.word	0x080082d9
 8008274:	08008255 	.word	0x08008255
 8008278:	08008255 	.word	0x08008255
 800827c:	08008255 	.word	0x08008255
 8008280:	08008255 	.word	0x08008255
 8008284:	080082d9 	.word	0x080082d9
 8008288:	08008255 	.word	0x08008255
 800828c:	08008255 	.word	0x08008255
 8008290:	08008255 	.word	0x08008255
 8008294:	08008255 	.word	0x08008255
 8008298:	080083e7 	.word	0x080083e7
 800829c:	08008309 	.word	0x08008309
 80082a0:	080083c9 	.word	0x080083c9
 80082a4:	08008255 	.word	0x08008255
 80082a8:	08008255 	.word	0x08008255
 80082ac:	08008409 	.word	0x08008409
 80082b0:	08008255 	.word	0x08008255
 80082b4:	08008309 	.word	0x08008309
 80082b8:	08008255 	.word	0x08008255
 80082bc:	08008255 	.word	0x08008255
 80082c0:	080083d1 	.word	0x080083d1
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	1d1a      	adds	r2, r3, #4
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	602a      	str	r2, [r5, #0]
 80082cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082d4:	2301      	movs	r3, #1
 80082d6:	e0a4      	b.n	8008422 <_printf_i+0x1f6>
 80082d8:	6820      	ldr	r0, [r4, #0]
 80082da:	6829      	ldr	r1, [r5, #0]
 80082dc:	0606      	lsls	r6, r0, #24
 80082de:	f101 0304 	add.w	r3, r1, #4
 80082e2:	d50a      	bpl.n	80082fa <_printf_i+0xce>
 80082e4:	680e      	ldr	r6, [r1, #0]
 80082e6:	602b      	str	r3, [r5, #0]
 80082e8:	2e00      	cmp	r6, #0
 80082ea:	da03      	bge.n	80082f4 <_printf_i+0xc8>
 80082ec:	232d      	movs	r3, #45	; 0x2d
 80082ee:	4276      	negs	r6, r6
 80082f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f4:	230a      	movs	r3, #10
 80082f6:	485e      	ldr	r0, [pc, #376]	; (8008470 <_printf_i+0x244>)
 80082f8:	e019      	b.n	800832e <_printf_i+0x102>
 80082fa:	680e      	ldr	r6, [r1, #0]
 80082fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008300:	602b      	str	r3, [r5, #0]
 8008302:	bf18      	it	ne
 8008304:	b236      	sxthne	r6, r6
 8008306:	e7ef      	b.n	80082e8 <_printf_i+0xbc>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	6820      	ldr	r0, [r4, #0]
 800830c:	1d19      	adds	r1, r3, #4
 800830e:	6029      	str	r1, [r5, #0]
 8008310:	0601      	lsls	r1, r0, #24
 8008312:	d501      	bpl.n	8008318 <_printf_i+0xec>
 8008314:	681e      	ldr	r6, [r3, #0]
 8008316:	e002      	b.n	800831e <_printf_i+0xf2>
 8008318:	0646      	lsls	r6, r0, #25
 800831a:	d5fb      	bpl.n	8008314 <_printf_i+0xe8>
 800831c:	881e      	ldrh	r6, [r3, #0]
 800831e:	2f6f      	cmp	r7, #111	; 0x6f
 8008320:	bf0c      	ite	eq
 8008322:	2308      	moveq	r3, #8
 8008324:	230a      	movne	r3, #10
 8008326:	4852      	ldr	r0, [pc, #328]	; (8008470 <_printf_i+0x244>)
 8008328:	2100      	movs	r1, #0
 800832a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800832e:	6865      	ldr	r5, [r4, #4]
 8008330:	2d00      	cmp	r5, #0
 8008332:	bfa8      	it	ge
 8008334:	6821      	ldrge	r1, [r4, #0]
 8008336:	60a5      	str	r5, [r4, #8]
 8008338:	bfa4      	itt	ge
 800833a:	f021 0104 	bicge.w	r1, r1, #4
 800833e:	6021      	strge	r1, [r4, #0]
 8008340:	b90e      	cbnz	r6, 8008346 <_printf_i+0x11a>
 8008342:	2d00      	cmp	r5, #0
 8008344:	d04d      	beq.n	80083e2 <_printf_i+0x1b6>
 8008346:	4615      	mov	r5, r2
 8008348:	fbb6 f1f3 	udiv	r1, r6, r3
 800834c:	fb03 6711 	mls	r7, r3, r1, r6
 8008350:	5dc7      	ldrb	r7, [r0, r7]
 8008352:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008356:	4637      	mov	r7, r6
 8008358:	42bb      	cmp	r3, r7
 800835a:	460e      	mov	r6, r1
 800835c:	d9f4      	bls.n	8008348 <_printf_i+0x11c>
 800835e:	2b08      	cmp	r3, #8
 8008360:	d10b      	bne.n	800837a <_printf_i+0x14e>
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	07de      	lsls	r6, r3, #31
 8008366:	d508      	bpl.n	800837a <_printf_i+0x14e>
 8008368:	6923      	ldr	r3, [r4, #16]
 800836a:	6861      	ldr	r1, [r4, #4]
 800836c:	4299      	cmp	r1, r3
 800836e:	bfde      	ittt	le
 8008370:	2330      	movle	r3, #48	; 0x30
 8008372:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008376:	f105 35ff 	addle.w	r5, r5, #4294967295
 800837a:	1b52      	subs	r2, r2, r5
 800837c:	6122      	str	r2, [r4, #16]
 800837e:	464b      	mov	r3, r9
 8008380:	4621      	mov	r1, r4
 8008382:	4640      	mov	r0, r8
 8008384:	f8cd a000 	str.w	sl, [sp]
 8008388:	aa03      	add	r2, sp, #12
 800838a:	f7ff fedf 	bl	800814c <_printf_common>
 800838e:	3001      	adds	r0, #1
 8008390:	d14c      	bne.n	800842c <_printf_i+0x200>
 8008392:	f04f 30ff 	mov.w	r0, #4294967295
 8008396:	b004      	add	sp, #16
 8008398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839c:	4834      	ldr	r0, [pc, #208]	; (8008470 <_printf_i+0x244>)
 800839e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083a2:	6829      	ldr	r1, [r5, #0]
 80083a4:	6823      	ldr	r3, [r4, #0]
 80083a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80083aa:	6029      	str	r1, [r5, #0]
 80083ac:	061d      	lsls	r5, r3, #24
 80083ae:	d514      	bpl.n	80083da <_printf_i+0x1ae>
 80083b0:	07df      	lsls	r7, r3, #31
 80083b2:	bf44      	itt	mi
 80083b4:	f043 0320 	orrmi.w	r3, r3, #32
 80083b8:	6023      	strmi	r3, [r4, #0]
 80083ba:	b91e      	cbnz	r6, 80083c4 <_printf_i+0x198>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	f023 0320 	bic.w	r3, r3, #32
 80083c2:	6023      	str	r3, [r4, #0]
 80083c4:	2310      	movs	r3, #16
 80083c6:	e7af      	b.n	8008328 <_printf_i+0xfc>
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	f043 0320 	orr.w	r3, r3, #32
 80083ce:	6023      	str	r3, [r4, #0]
 80083d0:	2378      	movs	r3, #120	; 0x78
 80083d2:	4828      	ldr	r0, [pc, #160]	; (8008474 <_printf_i+0x248>)
 80083d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083d8:	e7e3      	b.n	80083a2 <_printf_i+0x176>
 80083da:	0659      	lsls	r1, r3, #25
 80083dc:	bf48      	it	mi
 80083de:	b2b6      	uxthmi	r6, r6
 80083e0:	e7e6      	b.n	80083b0 <_printf_i+0x184>
 80083e2:	4615      	mov	r5, r2
 80083e4:	e7bb      	b.n	800835e <_printf_i+0x132>
 80083e6:	682b      	ldr	r3, [r5, #0]
 80083e8:	6826      	ldr	r6, [r4, #0]
 80083ea:	1d18      	adds	r0, r3, #4
 80083ec:	6961      	ldr	r1, [r4, #20]
 80083ee:	6028      	str	r0, [r5, #0]
 80083f0:	0635      	lsls	r5, r6, #24
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	d501      	bpl.n	80083fa <_printf_i+0x1ce>
 80083f6:	6019      	str	r1, [r3, #0]
 80083f8:	e002      	b.n	8008400 <_printf_i+0x1d4>
 80083fa:	0670      	lsls	r0, r6, #25
 80083fc:	d5fb      	bpl.n	80083f6 <_printf_i+0x1ca>
 80083fe:	8019      	strh	r1, [r3, #0]
 8008400:	2300      	movs	r3, #0
 8008402:	4615      	mov	r5, r2
 8008404:	6123      	str	r3, [r4, #16]
 8008406:	e7ba      	b.n	800837e <_printf_i+0x152>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	2100      	movs	r1, #0
 800840c:	1d1a      	adds	r2, r3, #4
 800840e:	602a      	str	r2, [r5, #0]
 8008410:	681d      	ldr	r5, [r3, #0]
 8008412:	6862      	ldr	r2, [r4, #4]
 8008414:	4628      	mov	r0, r5
 8008416:	f000 f82f 	bl	8008478 <memchr>
 800841a:	b108      	cbz	r0, 8008420 <_printf_i+0x1f4>
 800841c:	1b40      	subs	r0, r0, r5
 800841e:	6060      	str	r0, [r4, #4]
 8008420:	6863      	ldr	r3, [r4, #4]
 8008422:	6123      	str	r3, [r4, #16]
 8008424:	2300      	movs	r3, #0
 8008426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800842a:	e7a8      	b.n	800837e <_printf_i+0x152>
 800842c:	462a      	mov	r2, r5
 800842e:	4649      	mov	r1, r9
 8008430:	4640      	mov	r0, r8
 8008432:	6923      	ldr	r3, [r4, #16]
 8008434:	47d0      	blx	sl
 8008436:	3001      	adds	r0, #1
 8008438:	d0ab      	beq.n	8008392 <_printf_i+0x166>
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	079b      	lsls	r3, r3, #30
 800843e:	d413      	bmi.n	8008468 <_printf_i+0x23c>
 8008440:	68e0      	ldr	r0, [r4, #12]
 8008442:	9b03      	ldr	r3, [sp, #12]
 8008444:	4298      	cmp	r0, r3
 8008446:	bfb8      	it	lt
 8008448:	4618      	movlt	r0, r3
 800844a:	e7a4      	b.n	8008396 <_printf_i+0x16a>
 800844c:	2301      	movs	r3, #1
 800844e:	4632      	mov	r2, r6
 8008450:	4649      	mov	r1, r9
 8008452:	4640      	mov	r0, r8
 8008454:	47d0      	blx	sl
 8008456:	3001      	adds	r0, #1
 8008458:	d09b      	beq.n	8008392 <_printf_i+0x166>
 800845a:	3501      	adds	r5, #1
 800845c:	68e3      	ldr	r3, [r4, #12]
 800845e:	9903      	ldr	r1, [sp, #12]
 8008460:	1a5b      	subs	r3, r3, r1
 8008462:	42ab      	cmp	r3, r5
 8008464:	dcf2      	bgt.n	800844c <_printf_i+0x220>
 8008466:	e7eb      	b.n	8008440 <_printf_i+0x214>
 8008468:	2500      	movs	r5, #0
 800846a:	f104 0619 	add.w	r6, r4, #25
 800846e:	e7f5      	b.n	800845c <_printf_i+0x230>
 8008470:	080087ed 	.word	0x080087ed
 8008474:	080087fe 	.word	0x080087fe

08008478 <memchr>:
 8008478:	4603      	mov	r3, r0
 800847a:	b510      	push	{r4, lr}
 800847c:	b2c9      	uxtb	r1, r1
 800847e:	4402      	add	r2, r0
 8008480:	4293      	cmp	r3, r2
 8008482:	4618      	mov	r0, r3
 8008484:	d101      	bne.n	800848a <memchr+0x12>
 8008486:	2000      	movs	r0, #0
 8008488:	e003      	b.n	8008492 <memchr+0x1a>
 800848a:	7804      	ldrb	r4, [r0, #0]
 800848c:	3301      	adds	r3, #1
 800848e:	428c      	cmp	r4, r1
 8008490:	d1f6      	bne.n	8008480 <memchr+0x8>
 8008492:	bd10      	pop	{r4, pc}

08008494 <memcpy>:
 8008494:	440a      	add	r2, r1
 8008496:	4291      	cmp	r1, r2
 8008498:	f100 33ff 	add.w	r3, r0, #4294967295
 800849c:	d100      	bne.n	80084a0 <memcpy+0xc>
 800849e:	4770      	bx	lr
 80084a0:	b510      	push	{r4, lr}
 80084a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084a6:	4291      	cmp	r1, r2
 80084a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ac:	d1f9      	bne.n	80084a2 <memcpy+0xe>
 80084ae:	bd10      	pop	{r4, pc}

080084b0 <memmove>:
 80084b0:	4288      	cmp	r0, r1
 80084b2:	b510      	push	{r4, lr}
 80084b4:	eb01 0402 	add.w	r4, r1, r2
 80084b8:	d902      	bls.n	80084c0 <memmove+0x10>
 80084ba:	4284      	cmp	r4, r0
 80084bc:	4623      	mov	r3, r4
 80084be:	d807      	bhi.n	80084d0 <memmove+0x20>
 80084c0:	1e43      	subs	r3, r0, #1
 80084c2:	42a1      	cmp	r1, r4
 80084c4:	d008      	beq.n	80084d8 <memmove+0x28>
 80084c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084ce:	e7f8      	b.n	80084c2 <memmove+0x12>
 80084d0:	4601      	mov	r1, r0
 80084d2:	4402      	add	r2, r0
 80084d4:	428a      	cmp	r2, r1
 80084d6:	d100      	bne.n	80084da <memmove+0x2a>
 80084d8:	bd10      	pop	{r4, pc}
 80084da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084e2:	e7f7      	b.n	80084d4 <memmove+0x24>

080084e4 <_free_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4605      	mov	r5, r0
 80084e8:	2900      	cmp	r1, #0
 80084ea:	d040      	beq.n	800856e <_free_r+0x8a>
 80084ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f0:	1f0c      	subs	r4, r1, #4
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	bfb8      	it	lt
 80084f6:	18e4      	addlt	r4, r4, r3
 80084f8:	f000 f910 	bl	800871c <__malloc_lock>
 80084fc:	4a1c      	ldr	r2, [pc, #112]	; (8008570 <_free_r+0x8c>)
 80084fe:	6813      	ldr	r3, [r2, #0]
 8008500:	b933      	cbnz	r3, 8008510 <_free_r+0x2c>
 8008502:	6063      	str	r3, [r4, #4]
 8008504:	6014      	str	r4, [r2, #0]
 8008506:	4628      	mov	r0, r5
 8008508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800850c:	f000 b90c 	b.w	8008728 <__malloc_unlock>
 8008510:	42a3      	cmp	r3, r4
 8008512:	d908      	bls.n	8008526 <_free_r+0x42>
 8008514:	6820      	ldr	r0, [r4, #0]
 8008516:	1821      	adds	r1, r4, r0
 8008518:	428b      	cmp	r3, r1
 800851a:	bf01      	itttt	eq
 800851c:	6819      	ldreq	r1, [r3, #0]
 800851e:	685b      	ldreq	r3, [r3, #4]
 8008520:	1809      	addeq	r1, r1, r0
 8008522:	6021      	streq	r1, [r4, #0]
 8008524:	e7ed      	b.n	8008502 <_free_r+0x1e>
 8008526:	461a      	mov	r2, r3
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	b10b      	cbz	r3, 8008530 <_free_r+0x4c>
 800852c:	42a3      	cmp	r3, r4
 800852e:	d9fa      	bls.n	8008526 <_free_r+0x42>
 8008530:	6811      	ldr	r1, [r2, #0]
 8008532:	1850      	adds	r0, r2, r1
 8008534:	42a0      	cmp	r0, r4
 8008536:	d10b      	bne.n	8008550 <_free_r+0x6c>
 8008538:	6820      	ldr	r0, [r4, #0]
 800853a:	4401      	add	r1, r0
 800853c:	1850      	adds	r0, r2, r1
 800853e:	4283      	cmp	r3, r0
 8008540:	6011      	str	r1, [r2, #0]
 8008542:	d1e0      	bne.n	8008506 <_free_r+0x22>
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	4401      	add	r1, r0
 800854a:	6011      	str	r1, [r2, #0]
 800854c:	6053      	str	r3, [r2, #4]
 800854e:	e7da      	b.n	8008506 <_free_r+0x22>
 8008550:	d902      	bls.n	8008558 <_free_r+0x74>
 8008552:	230c      	movs	r3, #12
 8008554:	602b      	str	r3, [r5, #0]
 8008556:	e7d6      	b.n	8008506 <_free_r+0x22>
 8008558:	6820      	ldr	r0, [r4, #0]
 800855a:	1821      	adds	r1, r4, r0
 800855c:	428b      	cmp	r3, r1
 800855e:	bf01      	itttt	eq
 8008560:	6819      	ldreq	r1, [r3, #0]
 8008562:	685b      	ldreq	r3, [r3, #4]
 8008564:	1809      	addeq	r1, r1, r0
 8008566:	6021      	streq	r1, [r4, #0]
 8008568:	6063      	str	r3, [r4, #4]
 800856a:	6054      	str	r4, [r2, #4]
 800856c:	e7cb      	b.n	8008506 <_free_r+0x22>
 800856e:	bd38      	pop	{r3, r4, r5, pc}
 8008570:	200011f0 	.word	0x200011f0

08008574 <sbrk_aligned>:
 8008574:	b570      	push	{r4, r5, r6, lr}
 8008576:	4e0e      	ldr	r6, [pc, #56]	; (80085b0 <sbrk_aligned+0x3c>)
 8008578:	460c      	mov	r4, r1
 800857a:	6831      	ldr	r1, [r6, #0]
 800857c:	4605      	mov	r5, r0
 800857e:	b911      	cbnz	r1, 8008586 <sbrk_aligned+0x12>
 8008580:	f000 f8bc 	bl	80086fc <_sbrk_r>
 8008584:	6030      	str	r0, [r6, #0]
 8008586:	4621      	mov	r1, r4
 8008588:	4628      	mov	r0, r5
 800858a:	f000 f8b7 	bl	80086fc <_sbrk_r>
 800858e:	1c43      	adds	r3, r0, #1
 8008590:	d00a      	beq.n	80085a8 <sbrk_aligned+0x34>
 8008592:	1cc4      	adds	r4, r0, #3
 8008594:	f024 0403 	bic.w	r4, r4, #3
 8008598:	42a0      	cmp	r0, r4
 800859a:	d007      	beq.n	80085ac <sbrk_aligned+0x38>
 800859c:	1a21      	subs	r1, r4, r0
 800859e:	4628      	mov	r0, r5
 80085a0:	f000 f8ac 	bl	80086fc <_sbrk_r>
 80085a4:	3001      	adds	r0, #1
 80085a6:	d101      	bne.n	80085ac <sbrk_aligned+0x38>
 80085a8:	f04f 34ff 	mov.w	r4, #4294967295
 80085ac:	4620      	mov	r0, r4
 80085ae:	bd70      	pop	{r4, r5, r6, pc}
 80085b0:	200011f4 	.word	0x200011f4

080085b4 <_malloc_r>:
 80085b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b8:	1ccd      	adds	r5, r1, #3
 80085ba:	f025 0503 	bic.w	r5, r5, #3
 80085be:	3508      	adds	r5, #8
 80085c0:	2d0c      	cmp	r5, #12
 80085c2:	bf38      	it	cc
 80085c4:	250c      	movcc	r5, #12
 80085c6:	2d00      	cmp	r5, #0
 80085c8:	4607      	mov	r7, r0
 80085ca:	db01      	blt.n	80085d0 <_malloc_r+0x1c>
 80085cc:	42a9      	cmp	r1, r5
 80085ce:	d905      	bls.n	80085dc <_malloc_r+0x28>
 80085d0:	230c      	movs	r3, #12
 80085d2:	2600      	movs	r6, #0
 80085d4:	603b      	str	r3, [r7, #0]
 80085d6:	4630      	mov	r0, r6
 80085d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085dc:	4e2e      	ldr	r6, [pc, #184]	; (8008698 <_malloc_r+0xe4>)
 80085de:	f000 f89d 	bl	800871c <__malloc_lock>
 80085e2:	6833      	ldr	r3, [r6, #0]
 80085e4:	461c      	mov	r4, r3
 80085e6:	bb34      	cbnz	r4, 8008636 <_malloc_r+0x82>
 80085e8:	4629      	mov	r1, r5
 80085ea:	4638      	mov	r0, r7
 80085ec:	f7ff ffc2 	bl	8008574 <sbrk_aligned>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	4604      	mov	r4, r0
 80085f4:	d14d      	bne.n	8008692 <_malloc_r+0xde>
 80085f6:	6834      	ldr	r4, [r6, #0]
 80085f8:	4626      	mov	r6, r4
 80085fa:	2e00      	cmp	r6, #0
 80085fc:	d140      	bne.n	8008680 <_malloc_r+0xcc>
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	4631      	mov	r1, r6
 8008602:	4638      	mov	r0, r7
 8008604:	eb04 0803 	add.w	r8, r4, r3
 8008608:	f000 f878 	bl	80086fc <_sbrk_r>
 800860c:	4580      	cmp	r8, r0
 800860e:	d13a      	bne.n	8008686 <_malloc_r+0xd2>
 8008610:	6821      	ldr	r1, [r4, #0]
 8008612:	3503      	adds	r5, #3
 8008614:	1a6d      	subs	r5, r5, r1
 8008616:	f025 0503 	bic.w	r5, r5, #3
 800861a:	3508      	adds	r5, #8
 800861c:	2d0c      	cmp	r5, #12
 800861e:	bf38      	it	cc
 8008620:	250c      	movcc	r5, #12
 8008622:	4638      	mov	r0, r7
 8008624:	4629      	mov	r1, r5
 8008626:	f7ff ffa5 	bl	8008574 <sbrk_aligned>
 800862a:	3001      	adds	r0, #1
 800862c:	d02b      	beq.n	8008686 <_malloc_r+0xd2>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	442b      	add	r3, r5
 8008632:	6023      	str	r3, [r4, #0]
 8008634:	e00e      	b.n	8008654 <_malloc_r+0xa0>
 8008636:	6822      	ldr	r2, [r4, #0]
 8008638:	1b52      	subs	r2, r2, r5
 800863a:	d41e      	bmi.n	800867a <_malloc_r+0xc6>
 800863c:	2a0b      	cmp	r2, #11
 800863e:	d916      	bls.n	800866e <_malloc_r+0xba>
 8008640:	1961      	adds	r1, r4, r5
 8008642:	42a3      	cmp	r3, r4
 8008644:	6025      	str	r5, [r4, #0]
 8008646:	bf18      	it	ne
 8008648:	6059      	strne	r1, [r3, #4]
 800864a:	6863      	ldr	r3, [r4, #4]
 800864c:	bf08      	it	eq
 800864e:	6031      	streq	r1, [r6, #0]
 8008650:	5162      	str	r2, [r4, r5]
 8008652:	604b      	str	r3, [r1, #4]
 8008654:	4638      	mov	r0, r7
 8008656:	f104 060b 	add.w	r6, r4, #11
 800865a:	f000 f865 	bl	8008728 <__malloc_unlock>
 800865e:	f026 0607 	bic.w	r6, r6, #7
 8008662:	1d23      	adds	r3, r4, #4
 8008664:	1af2      	subs	r2, r6, r3
 8008666:	d0b6      	beq.n	80085d6 <_malloc_r+0x22>
 8008668:	1b9b      	subs	r3, r3, r6
 800866a:	50a3      	str	r3, [r4, r2]
 800866c:	e7b3      	b.n	80085d6 <_malloc_r+0x22>
 800866e:	6862      	ldr	r2, [r4, #4]
 8008670:	42a3      	cmp	r3, r4
 8008672:	bf0c      	ite	eq
 8008674:	6032      	streq	r2, [r6, #0]
 8008676:	605a      	strne	r2, [r3, #4]
 8008678:	e7ec      	b.n	8008654 <_malloc_r+0xa0>
 800867a:	4623      	mov	r3, r4
 800867c:	6864      	ldr	r4, [r4, #4]
 800867e:	e7b2      	b.n	80085e6 <_malloc_r+0x32>
 8008680:	4634      	mov	r4, r6
 8008682:	6876      	ldr	r6, [r6, #4]
 8008684:	e7b9      	b.n	80085fa <_malloc_r+0x46>
 8008686:	230c      	movs	r3, #12
 8008688:	4638      	mov	r0, r7
 800868a:	603b      	str	r3, [r7, #0]
 800868c:	f000 f84c 	bl	8008728 <__malloc_unlock>
 8008690:	e7a1      	b.n	80085d6 <_malloc_r+0x22>
 8008692:	6025      	str	r5, [r4, #0]
 8008694:	e7de      	b.n	8008654 <_malloc_r+0xa0>
 8008696:	bf00      	nop
 8008698:	200011f0 	.word	0x200011f0

0800869c <_realloc_r>:
 800869c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a0:	4680      	mov	r8, r0
 80086a2:	4614      	mov	r4, r2
 80086a4:	460e      	mov	r6, r1
 80086a6:	b921      	cbnz	r1, 80086b2 <_realloc_r+0x16>
 80086a8:	4611      	mov	r1, r2
 80086aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ae:	f7ff bf81 	b.w	80085b4 <_malloc_r>
 80086b2:	b92a      	cbnz	r2, 80086c0 <_realloc_r+0x24>
 80086b4:	f7ff ff16 	bl	80084e4 <_free_r>
 80086b8:	4625      	mov	r5, r4
 80086ba:	4628      	mov	r0, r5
 80086bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086c0:	f000 f838 	bl	8008734 <_malloc_usable_size_r>
 80086c4:	4284      	cmp	r4, r0
 80086c6:	4607      	mov	r7, r0
 80086c8:	d802      	bhi.n	80086d0 <_realloc_r+0x34>
 80086ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086ce:	d812      	bhi.n	80086f6 <_realloc_r+0x5a>
 80086d0:	4621      	mov	r1, r4
 80086d2:	4640      	mov	r0, r8
 80086d4:	f7ff ff6e 	bl	80085b4 <_malloc_r>
 80086d8:	4605      	mov	r5, r0
 80086da:	2800      	cmp	r0, #0
 80086dc:	d0ed      	beq.n	80086ba <_realloc_r+0x1e>
 80086de:	42bc      	cmp	r4, r7
 80086e0:	4622      	mov	r2, r4
 80086e2:	4631      	mov	r1, r6
 80086e4:	bf28      	it	cs
 80086e6:	463a      	movcs	r2, r7
 80086e8:	f7ff fed4 	bl	8008494 <memcpy>
 80086ec:	4631      	mov	r1, r6
 80086ee:	4640      	mov	r0, r8
 80086f0:	f7ff fef8 	bl	80084e4 <_free_r>
 80086f4:	e7e1      	b.n	80086ba <_realloc_r+0x1e>
 80086f6:	4635      	mov	r5, r6
 80086f8:	e7df      	b.n	80086ba <_realloc_r+0x1e>
	...

080086fc <_sbrk_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	2300      	movs	r3, #0
 8008700:	4d05      	ldr	r5, [pc, #20]	; (8008718 <_sbrk_r+0x1c>)
 8008702:	4604      	mov	r4, r0
 8008704:	4608      	mov	r0, r1
 8008706:	602b      	str	r3, [r5, #0]
 8008708:	f7f7 fe8a 	bl	8000420 <_sbrk>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	d102      	bne.n	8008716 <_sbrk_r+0x1a>
 8008710:	682b      	ldr	r3, [r5, #0]
 8008712:	b103      	cbz	r3, 8008716 <_sbrk_r+0x1a>
 8008714:	6023      	str	r3, [r4, #0]
 8008716:	bd38      	pop	{r3, r4, r5, pc}
 8008718:	200011f8 	.word	0x200011f8

0800871c <__malloc_lock>:
 800871c:	4801      	ldr	r0, [pc, #4]	; (8008724 <__malloc_lock+0x8>)
 800871e:	f000 b811 	b.w	8008744 <__retarget_lock_acquire_recursive>
 8008722:	bf00      	nop
 8008724:	200011fc 	.word	0x200011fc

08008728 <__malloc_unlock>:
 8008728:	4801      	ldr	r0, [pc, #4]	; (8008730 <__malloc_unlock+0x8>)
 800872a:	f000 b80c 	b.w	8008746 <__retarget_lock_release_recursive>
 800872e:	bf00      	nop
 8008730:	200011fc 	.word	0x200011fc

08008734 <_malloc_usable_size_r>:
 8008734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008738:	1f18      	subs	r0, r3, #4
 800873a:	2b00      	cmp	r3, #0
 800873c:	bfbc      	itt	lt
 800873e:	580b      	ldrlt	r3, [r1, r0]
 8008740:	18c0      	addlt	r0, r0, r3
 8008742:	4770      	bx	lr

08008744 <__retarget_lock_acquire_recursive>:
 8008744:	4770      	bx	lr

08008746 <__retarget_lock_release_recursive>:
 8008746:	4770      	bx	lr

08008748 <_init>:
 8008748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874a:	bf00      	nop
 800874c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800874e:	bc08      	pop	{r3}
 8008750:	469e      	mov	lr, r3
 8008752:	4770      	bx	lr

08008754 <_fini>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	bf00      	nop
 8008758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875a:	bc08      	pop	{r3}
 800875c:	469e      	mov	lr, r3
 800875e:	4770      	bx	lr
